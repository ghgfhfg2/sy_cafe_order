[{"D:\\프로젝트\\sy-cafe-order\\src\\index.js":"1","D:\\프로젝트\\sy-cafe-order\\src\\reportWebVitals.js":"2","D:\\프로젝트\\sy-cafe-order\\src\\App.js":"3","D:\\프로젝트\\sy-cafe-order\\src\\redux\\reducers\\index.js":"4","D:\\프로젝트\\sy-cafe-order\\src\\firebase.js":"5","D:\\프로젝트\\sy-cafe-order\\src\\component\\Join.js":"6","D:\\프로젝트\\sy-cafe-order\\src\\component\\Menu.js":"7","D:\\프로젝트\\sy-cafe-order\\src\\component\\Login.js":"8","D:\\프로젝트\\sy-cafe-order\\src\\component\\MyOrder.js":"9","D:\\프로젝트\\sy-cafe-order\\src\\component\\Loading.js":"10","D:\\프로젝트\\sy-cafe-order\\src\\component\\Nav.js":"11","D:\\프로젝트\\sy-cafe-order\\src\\component\\MyMenu.js":"12","D:\\프로젝트\\sy-cafe-order\\src\\component\\LunchCheck.js":"13","D:\\프로젝트\\sy-cafe-order\\src\\component\\Test.js":"14","D:\\프로젝트\\sy-cafe-order\\src\\component\\Admin\\AdminOrder.js":"15","D:\\프로젝트\\sy-cafe-order\\src\\component\\LogoImg.js":"16","D:\\프로젝트\\sy-cafe-order\\src\\component\\AuthPop.js":"17","D:\\프로젝트\\sy-cafe-order\\src\\component\\Admin\\UserAdmin.js":"18","D:\\프로젝트\\sy-cafe-order\\src\\component\\Admin\\AdminProd.js":"19","D:\\프로젝트\\sy-cafe-order\\src\\component\\Admin\\LunchAdmin.js":"20","D:\\프로젝트\\sy-cafe-order\\src\\component\\CommonFunc.js":"21","D:\\프로젝트\\sy-cafe-order\\src\\component\\Admin\\AdminProdCount.js":"22","D:\\프로젝트\\sy-cafe-order\\src\\component\\Admin\\HairAdmin.js":"23","D:\\프로젝트\\sy-cafe-order\\src\\component\\Research\\ResearchWrite.js":"24","D:\\프로젝트\\sy-cafe-order\\src\\component\\Admin\\InvenAdmin.js":"25","D:\\프로젝트\\sy-cafe-order\\src\\component\\Research\\ResearchView.js":"26","D:\\프로젝트\\sy-cafe-order\\src\\component\\welfare\\ChairAdmin.js":"27","D:\\프로젝트\\sy-cafe-order\\src\\component\\welfare\\Chair.js":"28","D:\\프로젝트\\sy-cafe-order\\src\\component\\welfare\\StylerAdmin.js":"29","D:\\프로젝트\\sy-cafe-order\\src\\redux\\actions\\user_action.js":"30","D:\\프로젝트\\sy-cafe-order\\src\\component\\Research\\Research.js":"31","D:\\프로젝트\\sy-cafe-order\\src\\component\\Research\\ResearchTemp.js":"32","D:\\프로젝트\\sy-cafe-order\\src\\component\\Research\\ResearchModify.js":"33","D:\\프로젝트\\sy-cafe-order\\src\\component\\Admin\\AdminOrderList.js":"34","D:\\프로젝트\\sy-cafe-order\\src\\component\\welfare\\Styler.js":"35","D:\\프로젝트\\sy-cafe-order\\src\\component\\inven\\Inventory.js":"36","D:\\프로젝트\\sy-cafe-order\\src\\component\\hair\\Hair.js":"37","D:\\프로젝트\\sy-cafe-order\\src\\redux\\reducers\\user_reducer.js":"38","D:\\프로젝트\\sy-cafe-order\\src\\component\\OrderModal.js":"39","D:\\프로젝트\\sy-cafe-order\\src\\component\\GuestHome.js":"40","D:\\프로젝트\\sy-cafe-order\\src\\component\\Timer.js":"41","D:\\프로젝트\\sy-cafe-order\\src\\component\\Admin\\ProdCategory.js":"42","D:\\프로젝트\\sy-cafe-order\\src\\component\\Admin\\ModifyModal.js":"43","D:\\프로젝트\\sy-cafe-order\\src\\redux\\actions\\types.js":"44","D:\\프로젝트\\sy-cafe-order\\src\\component\\Admin\\ImgUpload.js":"45","D:\\프로젝트\\sy-cafe-order\\src\\component\\Signature.js":"46","D:\\프로젝트\\sy-cafe-order\\src\\component\\inven\\useInvenKakaoTel.js":"47","D:\\프로젝트\\sy-cafe-order\\src\\component\\Admin\\inventory\\InvenTelAdmin.js":"48","D:\\프로젝트\\sy-cafe-order\\src\\component\\Admin\\option\\LastOrderTime.js":"49","D:\\프로젝트\\sy-cafe-order\\src\\component\\welfare\\chair\\ReservList.js":"50","D:\\프로젝트\\sy-cafe-order\\src\\component\\Admin\\inventory\\AdminModifyModal.js":"51","D:\\프로젝트\\sy-cafe-order\\src\\component\\PartSelect.js":"52","D:\\프로젝트\\sy-cafe-order\\src\\firebaseConfig.js":"53","D:\\프로젝트\\sy-cafe-order\\src\\component\\First.js":"54"},{"size":966,"mtime":1693967709876,"results":"55","hashOfConfig":"56"},{"size":375,"mtime":1693967709878,"results":"57","hashOfConfig":"56"},{"size":8740,"mtime":1694415516830,"results":"58","hashOfConfig":"56"},{"size":163,"mtime":1693967709877,"results":"59","hashOfConfig":"56"},{"size":380,"mtime":1693976374580,"results":"60","hashOfConfig":"56"},{"size":8929,"mtime":1694407575863,"results":"61","hashOfConfig":"56"},{"size":19116,"mtime":1693997218876,"results":"62","hashOfConfig":"56"},{"size":4978,"mtime":1694419004273,"results":"63","hashOfConfig":"56"},{"size":7922,"mtime":1693976522090,"results":"64","hashOfConfig":"56"},{"size":210,"mtime":1693967709861,"results":"65","hashOfConfig":"56"},{"size":16821,"mtime":1694054159023,"results":"66","hashOfConfig":"56"},{"size":13338,"mtime":1693997146134,"results":"67","hashOfConfig":"56"},{"size":12009,"mtime":1693967709862,"results":"68","hashOfConfig":"56"},{"size":614,"mtime":1693967709866,"results":"69","hashOfConfig":"56"},{"size":11726,"mtime":1693976261273,"results":"70","hashOfConfig":"56"},{"size":280,"mtime":1694418971398,"results":"71","hashOfConfig":"56"},{"size":2195,"mtime":1693967709860,"results":"72","hashOfConfig":"56"},{"size":3782,"mtime":1694007186398,"results":"73","hashOfConfig":"56"},{"size":21519,"mtime":1693967709856,"results":"74","hashOfConfig":"56"},{"size":15887,"mtime":1693967709858,"results":"75","hashOfConfig":"56"},{"size":4064,"mtime":1693967709860,"results":"76","hashOfConfig":"56"},{"size":1943,"mtime":1693967709856,"results":"77","hashOfConfig":"56"},{"size":20686,"mtime":1693967709856,"results":"78","hashOfConfig":"56"},{"size":15999,"mtime":1693967709866,"results":"79","hashOfConfig":"56"},{"size":33307,"mtime":1693976397675,"results":"80","hashOfConfig":"56"},{"size":10803,"mtime":1693967709865,"results":"81","hashOfConfig":"56"},{"size":4326,"mtime":1693976456426,"results":"82","hashOfConfig":"56"},{"size":16442,"mtime":1693976446924,"results":"83","hashOfConfig":"56"},{"size":4745,"mtime":1693976473845,"results":"84","hashOfConfig":"56"},{"size":235,"mtime":1693967709877,"results":"85","hashOfConfig":"56"},{"size":4589,"mtime":1693967709864,"results":"86","hashOfConfig":"56"},{"size":15149,"mtime":1693967709865,"results":"87","hashOfConfig":"56"},{"size":15038,"mtime":1693967709864,"results":"88","hashOfConfig":"56"},{"size":11833,"mtime":1693976295005,"results":"89","hashOfConfig":"56"},{"size":14925,"mtime":1693976465748,"results":"90","hashOfConfig":"56"},{"size":15405,"mtime":1693976422838,"results":"91","hashOfConfig":"56"},{"size":11561,"mtime":1693967709867,"results":"92","hashOfConfig":"56"},{"size":558,"mtime":1693967709878,"results":"93","hashOfConfig":"56"},{"size":16717,"mtime":1693967709863,"results":"94","hashOfConfig":"56"},{"size":1926,"mtime":1693967709860,"results":"95","hashOfConfig":"56"},{"size":958,"mtime":1693967709866,"results":"96","hashOfConfig":"56"},{"size":622,"mtime":1693967709859,"results":"97","hashOfConfig":"56"},{"size":15913,"mtime":1693967709858,"results":"98","hashOfConfig":"56"},{"size":92,"mtime":1693967709877,"results":"99","hashOfConfig":"56"},{"size":1164,"mtime":1693967709857,"results":"100","hashOfConfig":"56"},{"size":1313,"mtime":1693967709866,"results":"101","hashOfConfig":"56"},{"size":646,"mtime":1693997194962,"results":"102","hashOfConfig":"56"},{"size":1558,"mtime":1693976409140,"results":"103","hashOfConfig":"56"},{"size":2184,"mtime":1693967709860,"results":"104","hashOfConfig":"56"},{"size":1398,"mtime":1693967709869,"results":"105","hashOfConfig":"56"},{"size":1953,"mtime":1693967709859,"results":"106","hashOfConfig":"56"},{"size":945,"mtime":1693967709864,"results":"107","hashOfConfig":"56"},{"size":440,"mtime":1693994974819,"results":"108","hashOfConfig":"56"},{"size":331,"mtime":1694413780911,"results":"109","hashOfConfig":"56"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},"mr2572",{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"112"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"112"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"112"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"112"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"112"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"112"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"112"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"112"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"112"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"112"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"112"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"112"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"112"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"112"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"112"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"112"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"112"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"112"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"112"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"112"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"112"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"112"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"112"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"112"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"112"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"112"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"112"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"112"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"112"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"112"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"112"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"112"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"226"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"112"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"112"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"112"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"112"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"112"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"112"},"D:\\프로젝트\\sy-cafe-order\\src\\index.js",[],["259","260"],"D:\\프로젝트\\sy-cafe-order\\src\\reportWebVitals.js",[],"D:\\프로젝트\\sy-cafe-order\\src\\App.js",["261","262","263"],"import React, { useEffect, useState } from \"react\";\r\nimport { Route, Router, Switch, useHistory } from \"react-router-dom\";\r\nimport Nav from \"./component/Nav\";\r\nimport \"./custom_antd.less\";\r\nimport \"./App.css\";\r\nimport Join from \"./component/Join\";\r\nimport Login from \"./component/Login\";\r\nimport First from \"./component/First\";\r\nimport Menu from \"./component/Menu\";\r\nimport MyOrder from \"./component/MyOrder\";\r\nimport MyMenu from \"./component/MyMenu\";\r\nimport AdminProd from \"./component/Admin/AdminProd\";\r\nimport AdminOrder from \"./component/Admin/AdminOrder\";\r\nimport AdminOrderList from \"./component/Admin/AdminOrderList\";\r\nimport LunchAdmin from \"./component/Admin/LunchAdmin\";\r\nimport Research from \"./component/Research/Research\";\r\nimport ResearchWrite from \"./component/Research/ResearchWrite\";\r\nimport ResearchView from \"./component/Research/ResearchView\";\r\nimport Loading from \"./component/Loading\";\r\nimport LunchCheck from \"./component/LunchCheck\";\r\nimport { Layout, Button, BackTop } from \"antd\";\r\nimport firebase from \"./firebase\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setUser, clearUser } from \"./redux/actions/user_action\";\r\nimport { getNotificationPermission } from \"./component/CommonFunc\";\r\nimport * as antIcon from \"react-icons/ai\";\r\nimport Test from \"./component/Test\";\r\nimport UserAdmin from \"./component/Admin/UserAdmin\";\r\nimport Hair from \"./component/hair/Hair\";\r\nimport HairAdmin from \"./component/Admin/HairAdmin\";\r\nimport AdminProdCount from \"./component/Admin/AdminProdCount\";\r\nimport ResearchModify from \"./component/Research/ResearchModify\";\r\nimport ResearchTemp from \"./component/Research/ResearchTemp\";\r\nimport Chair from \"./component/welfare/Chair\";\r\nimport ChairAdmin from \"./component/welfare/ChairAdmin\";\r\nimport StylerAdmin from \"./component/welfare/StylerAdmin\";\r\nimport Styler from \"./component/welfare/Styler\";\r\nimport Inventory from \"./component/inven/Inventory\";\r\nimport InvenAdmin from \"./component/Admin/InvenAdmin\";\r\nimport AuthPop from \"./component/AuthPop\";\r\nimport LogoImg from \"./component/LogoImg\";\r\n\r\nconst { Sider, Content, Header } = Layout;\r\n\r\nfunction App(props) {\r\n  const userInfo = useSelector((state) => state.user.currentUser);\r\n  function isDesktopOS() {\r\n    return (\r\n      \"win16|win32|win64|windows|mac|macintel|linux|freebsd|openbsd|sunos\".indexOf(\r\n        navigator.platform.toLowerCase()\r\n      ) >= 0\r\n    );\r\n  }\r\n\r\n  if (isDesktopOS()) {\r\n    getNotificationPermission();\r\n  }\r\n\r\n  let history = useHistory();\r\n  let dispatch = useDispatch();\r\n  const isLoading = useSelector((state) => state.user.isLoading);\r\n\r\n  useEffect(() => {\r\n    firebase.auth().onAuthStateChanged((user) => {\r\n      if (user) {\r\n        firebase\r\n          .database()\r\n          .ref(\"users\")\r\n          .child(user.uid)\r\n          .once(\"value\", (snapshot) => {\r\n            if (snapshot.val()) {\r\n              let addInfo = {\r\n                ...user,\r\n                auth: snapshot.val().auth ? snapshot.val().auth : \"\",\r\n                call_number: snapshot.val().call_number,\r\n                favorite: snapshot.val().favorite,\r\n                role: snapshot.val().role,\r\n                sosok: snapshot.val().sosok,\r\n                welfare_range: snapshot.val().welfare_range,\r\n                welfare_able: snapshot.val().welfare_able,\r\n                photoURL: snapshot.val().part,\r\n              };\r\n              history.push(\"/\");\r\n              dispatch(setUser(addInfo));\r\n            }\r\n          });\r\n      } else {\r\n        history.push(\"/login\");\r\n        dispatch(clearUser());\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  // 스크롤 이벤트 핸들러\r\n  const [TopFix, setTopFix] = useState(false);\r\n  const [TopFixLeft, setTopFixLeft] = useState(false);\r\n  const handleScroll = () => {\r\n    let scrollTop = document.documentElement.scrollTop;\r\n    if (scrollTop >= 130) {\r\n      setTopFixLeft(true);\r\n    } else {\r\n      setTopFixLeft(false);\r\n    }\r\n    if (scrollTop >= 80) {\r\n      setTopFix(true);\r\n    } else {\r\n      setTopFix(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", handleScroll);\r\n    return () => {\r\n      window.removeEventListener(\"scroll\", handleScroll);\r\n    };\r\n  });\r\n\r\n  const [authPop, setAuthPop] = useState(false);\r\n  const authPopToggle = () => {\r\n    setAuthPop(!authPop);\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <>\r\n        <Layout className={TopFix && \"top-fix\"}>\r\n          <Header className=\"header-box\">\r\n            <a href=\"/\">\r\n              <LogoImg />\r\n              {/* <img className=\"top-logo\" src={Logo_PC} alt=\"\" />\r\n              <img className=\"top-logo-m\" src={Logo} alt=\"\" /> */}\r\n            </a>\r\n          </Header>\r\n          <Layout>\r\n            <div className=\"content-box\">\r\n              <Sider className={\"nav-wrap \" + (TopFixLeft && \"fix\")}>\r\n                <Nav />\r\n              </Sider>\r\n              <Content>\r\n                <Loading />\r\n              </Content>\r\n            </div>\r\n          </Layout>\r\n        </Layout>\r\n      </>\r\n    );\r\n  } else {\r\n    return (\r\n      <>\r\n        {authPop && <AuthPop authPopToggle={authPopToggle} />}\r\n        <Layout className={TopFix && \"top-fix\"}>\r\n          {/* <Header className=\"header-box\">\r\n            <div className=\"header-content\">\r\n              <a href=\"/\">\r\n                <LogoImg />\r\n              </a>\r\n              {userInfo && (\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"user-auth\"\r\n                  onClick={authPopToggle}\r\n                >\r\n                  <antIcon.AiOutlineIdcard />\r\n                  사원증\r\n                </button>\r\n              )}\r\n            </div>\r\n          </Header> */}\r\n          <Layout>\r\n            <div className=\"content-box\">\r\n              <Sider className={\"nav-wrap \" + (TopFixLeft && \"fix\")}>\r\n                <Nav />\r\n              </Sider>\r\n              <Content>\r\n                <Switch>\r\n                  <Route exact path=\"/\" component={Menu} />\r\n                  <Route exact path=\"/first\" component={First} />\r\n                  <Route exact path=\"/login\" component={Login} />\r\n                  <Route exact path=\"/join\" component={Join} />\r\n                  <Route exact path=\"/myorder\" component={MyOrder} />\r\n                  <Route exact path=\"/mymenu\" component={MyMenu} />\r\n                  <Route exact path=\"/lunch\" component={LunchCheck} />\r\n                  <Route exact path=\"/admin/prod\" component={AdminProd} />\r\n                  <Route\r\n                    exact\r\n                    path=\"/admin/prod_count\"\r\n                    component={AdminProdCount}\r\n                  />\r\n                  <Route exact path=\"/admin/order\" component={AdminOrder} />\r\n                  <Route exact path=\"/admin/lunch\" component={LunchAdmin} />\r\n                  <Route\r\n                    exact\r\n                    path=\"/admin/order_list\"\r\n                    component={AdminOrderList}\r\n                  />\r\n                  <Route exact path=\"/research\" component={Research} />\r\n                  <Route\r\n                    exact\r\n                    path=\"/research_write\"\r\n                    component={ResearchWrite}\r\n                  />\r\n                  <Route\r\n                    exact\r\n                    path=\"/research_modify\"\r\n                    component={ResearchModify}\r\n                  />\r\n                  <Route exact path=\"/research_temp\" component={ResearchTemp} />\r\n                  <Route exact path=\"/research_view\" component={ResearchView} />\r\n                  <Route exact path=\"/hair\" component={Hair} />\r\n                  <Route exact path=\"/admin/user_admin\" component={UserAdmin} />\r\n                  <Route exact path=\"/admin/hair\" component={HairAdmin} />\r\n                  <Route exact path=\"/chair\" component={Chair} />\r\n                  <Route exact path=\"/chair_admin\" component={ChairAdmin} />\r\n                  <Route exact path=\"/styler\" component={Styler} />\r\n                  <Route exact path=\"/styler_admin\" component={StylerAdmin} />\r\n                  <Route exact path=\"/inventory\" component={Inventory} />\r\n                  <Route exact path=\"/admin/inventory\" component={InvenAdmin} />\r\n                  <Route exact path=\"/test\" component={Test} />\r\n                </Switch>\r\n              </Content>\r\n              <BackTop>\r\n                <Button\r\n                  type=\"primary\"\r\n                  shape=\"circle\"\r\n                  className=\"btn-top-move\"\r\n                  icon={<antIcon.AiOutlineArrowUp />}\r\n                />\r\n              </BackTop>\r\n            </div>\r\n          </Layout>\r\n        </Layout>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","D:\\프로젝트\\sy-cafe-order\\src\\redux\\reducers\\index.js",[],"D:\\프로젝트\\sy-cafe-order\\src\\firebase.js",[],"D:\\프로젝트\\sy-cafe-order\\src\\component\\Join.js",["264","265","266","267","268"],"import { message } from \"antd\";\r\nimport React, { useRef, useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport firebase from \"../firebase\";\r\nimport uuid from \"react-uuid\";\r\n\r\nfunction Join() {\r\n  const { register, handleSubmit, watch, errors } = useForm({\r\n    mode: \"onChange\",\r\n  });\r\n  const [errorFromSubmit, setErrorFromSubmit] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const password = useRef();\r\n  password.current = watch(\"password\");\r\n  const onSubmit = async (data) => {\r\n    console.log(11);\r\n    data.storeCode = uuid();\r\n    console.log(data);\r\n    //data.part == 1 && alert(\"부서를 선택해 주세요\");\r\n    try {\r\n      setLoading(true);\r\n      let createdUser = await firebase\r\n        .auth()\r\n        .createUserWithEmailAndPassword(data.email, data.password);\r\n\r\n      await createdUser.user.updateProfile({\r\n        displayName: data.name,\r\n        photoURL: data.part,\r\n      });\r\n\r\n      //Firebase 데이터베이스에 저장해주기\r\n      await firebase\r\n        .database()\r\n        .ref(\"users\")\r\n        .child(createdUser.user.uid)\r\n        .set({\r\n          ...data,\r\n          name: createdUser.user.displayName,\r\n          part: createdUser.user.photoURL || \"\",\r\n          email: data.email,\r\n          role: 0,\r\n          auth: \"intern\",\r\n        });\r\n      setLoading(false);\r\n\r\n      window.location.reload();\r\n    } catch (error) {\r\n      console.log(error);\r\n      setErrorFromSubmit(error.message);\r\n\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  watch(\"name\");\r\n  watch(\"email\");\r\n  //watch(\"call_number\");\r\n  watch(\"password\");\r\n  watch(\"password2\");\r\n\r\n  const [InputName, setInputName] = useState(false);\r\n  const [InputNick, setInputNick] = useState(false);\r\n  const [InputEmail, setInputEmail] = useState(false);\r\n  const [InputPhone, setInputPhone] = useState(false);\r\n  const [InputPw, setInputPw] = useState(false);\r\n  const [InputPw2, setInputPw2] = useState(false);\r\n  const [InputStoreName, setInputStoreName] = useState(false);\r\n\r\n  const onInputName = (e) => {\r\n    setInputName(e.target.value);\r\n  };\r\n  const onInputNick = (e) => {\r\n    setInputNick(e.target.value);\r\n  };\r\n  const onInputEmail = (e) => {\r\n    setInputEmail(e.target.value);\r\n  };\r\n  const onInputPhone = (e) => {\r\n    setInputPhone(e.target.value);\r\n  };\r\n  const onInputPw = (e) => {\r\n    setInputPw(e.target.value);\r\n  };\r\n  const onInputPw2 = (e) => {\r\n    setInputPw2(e.target.value);\r\n  };\r\n\r\n  const onInputStoreName = (e) => {\r\n    setInputStoreName(e.target.value);\r\n  };\r\n\r\n  //사용자,관리자 구분\r\n  const [userJoin, setUserJoin] = useState(1);\r\n  const onChangeSosok = (e) => {\r\n    console.log(e.target.value);\r\n    if (e.target.value == 1) {\r\n      setUserJoin(1);\r\n    } else {\r\n      setUserJoin(2);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"join-form-wrap\">\r\n        <form className=\"join-form\" onSubmit={handleSubmit(onSubmit)}>\r\n          <div className=\"input-box\">\r\n            <input\r\n              type=\"text\"\r\n              onChange={onInputName}\r\n              name=\"name\"\r\n              id=\"name\"\r\n              ref={register({ required: true })}\r\n            />\r\n            <label\r\n              htmlFor=\"name\"\r\n              className={\"place-holder \" + (InputName && \"on\")}\r\n            >\r\n              <span>이름</span>\r\n            </label>\r\n            {errors.name && errors.name.type === \"required\" && (\r\n              <p>이름을 입력해 주세요</p>\r\n            )}\r\n          </div>\r\n          <div className=\"input-box\">\r\n            <input\r\n              type=\"text\"\r\n              onChange={onInputNick}\r\n              name=\"nick\"\r\n              id=\"nick\"\r\n              ref={register({ required: true })}\r\n            />\r\n            <label\r\n              htmlFor=\"nick\"\r\n              className={\"place-holder \" + (InputNick && \"on\")}\r\n            >\r\n              <span>닉네임</span>\r\n            </label>\r\n            {errors.nick && errors.nick.type === \"required\" && (\r\n              <p>닉네임을 입력해 주세요</p>\r\n            )}\r\n          </div>\r\n          <div className=\"input-box\">\r\n            <input\r\n              name=\"email\"\r\n              type=\"email\"\r\n              id=\"email\"\r\n              onChange={onInputEmail}\r\n              ref={register({ required: true, pattern: /^\\S+@\\S+$/i })}\r\n            />\r\n            <label\r\n              htmlFor=\"email\"\r\n              className={\"place-holder \" + (InputEmail && \"on\")}\r\n            >\r\n              <span>이메일</span>\r\n            </label>\r\n            <span\r\n              style={{\r\n                color: \"#888\",\r\n                fontSize: \"12px\",\r\n                display: \"block\",\r\n                paddingLeft: \"10px\",\r\n                marginTop: \"3px\",\r\n              }}\r\n            >\r\n              ※ 사용 가능한 이메일로 가입 바랍니다(비밀번호 재설정 시 필요해요)\r\n            </span>\r\n            {errors.email && errors.email.type === \"required\" && (\r\n              <p>이메일을 입력해 주세요</p>\r\n            )}\r\n            {errors.email && errors.email.type === \"pattern\" && (\r\n              <p>이메일 형식이 맞지 않습니다.</p>\r\n            )}\r\n          </div>\r\n\r\n          <div className=\"input-box\">\r\n            <input\r\n              type=\"password\"\r\n              name=\"password\"\r\n              id=\"password\"\r\n              onChange={onInputPw}\r\n              ref={register({ required: true, minLength: 6 })}\r\n            />\r\n            <label\r\n              htmlFor=\"password\"\r\n              className={\"place-holder \" + (InputPw && \"on\")}\r\n            >\r\n              <span>비밀번호</span>\r\n            </label>\r\n            {errors.password && errors.password.type === \"required\" && (\r\n              <p>비밀번호를 입력해 주세요</p>\r\n            )}\r\n            {errors.password && errors.password.type === \"minLength\" && (\r\n              <p>비밀번호는 최소 6글자이상 이어야 합니다.</p>\r\n            )}\r\n          </div>\r\n          <div className=\"input-box\">\r\n            <input\r\n              type=\"password\"\r\n              name=\"password2\"\r\n              id=\"password2\"\r\n              onChange={onInputPw2}\r\n              ref={register({\r\n                required: true,\r\n                validate: (value) => value === password.current,\r\n              })}\r\n            />\r\n            <label\r\n              htmlFor=\"password2\"\r\n              className={\"place-holder \" + (InputPw2 && \"on\")}\r\n            >\r\n              <span>비밀번호 확인</span>\r\n            </label>\r\n            {errors.password2 && errors.password2.type === \"required\" && (\r\n              <p>비밀번호 확인을 입력해 주세요</p>\r\n            )}\r\n            {errors.password2 && errors.password2.type === \"validate\" && (\r\n              <p>비밀번호가 일치하지 않습니다.</p>\r\n            )}\r\n            {errorFromSubmit && <p>{errorFromSubmit}</p>}\r\n          </div>\r\n          <div className=\"input-box radio\">\r\n            <div className=\"flex-box\">\r\n              <input\r\n                type=\"radio\"\r\n                className=\"custom-radio\"\r\n                name=\"sosok\"\r\n                id=\"sosok1\"\r\n                value=\"1\"\r\n                defaultChecked\r\n                onClick={onChangeSosok}\r\n                ref={register({ required: true })}\r\n              />\r\n              <label for=\"sosok1\">사용자</label>\r\n              <input\r\n                type=\"radio\"\r\n                className=\"custom-radio\"\r\n                name=\"sosok\"\r\n                id=\"sosok2\"\r\n                value=\"2\"\r\n                onClick={onChangeSosok}\r\n                ref={register({ required: true })}\r\n              />\r\n              <label for=\"sosok2\">관리자</label>\r\n            </div>\r\n            {userJoin == 2 && (\r\n              <>\r\n                <div className=\"input-box\" style={{ marginTop: \"30px\" }}>\r\n                  <input\r\n                    type=\"text\"\r\n                    onChange={onInputStoreName}\r\n                    name=\"storeName\"\r\n                    id=\"storeName\"\r\n                    ref={register({ required: true })}\r\n                  />\r\n                  <label\r\n                    htmlFor=\"storeName\"\r\n                    className={\"place-holder \" + (InputStoreName && \"on\")}\r\n                  >\r\n                    <span>스토어이름</span>\r\n                  </label>\r\n                  {errors.storeName && errors.storeName.type === \"required\" && (\r\n                    <p>스토어이름을 입력해 주세요</p>\r\n                  )}\r\n                </div>\r\n              </>\r\n            )}\r\n            {errors.sosok && <p>소속을 선택해 주세요</p>}\r\n          </div>\r\n          <input type=\"submit\" value=\"회원가입\" disabled={loading} />\r\n        </form>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Join;\r\n","D:\\프로젝트\\sy-cafe-order\\src\\component\\Menu.js",["269","270","271","272","273","274","275","276"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport firebase from \"../firebase\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { ProdList } from \"./Admin/AdminProd\";\r\nimport OderModalPopup from \"./OrderModal\";\r\nimport { commaNumber, getFormatDate } from \"./CommonFunc\";\r\nimport Loading from \"./Loading\";\r\nimport Timer from \"./Timer\";\r\nimport { Radio, Input, Empty, Button, Checkbox } from \"antd\";\r\nimport * as antIcon from \"react-icons/ai\";\r\nimport * as Hangul from \"hangul-js\";\r\nimport { useSelector } from \"react-redux\";\r\nimport GuestHome from \"./GuestHome\";\r\nimport ProdCategory from \"./Admin/ProdCategory\";\r\nconst { Search } = Input;\r\nconst _ = require(\"lodash\");\r\n\r\nconst curDate = getFormatDate(new Date());\r\nconst curHourMin = \"\" + curDate.hour + curDate.min;\r\n\r\nfunction Menu() {\r\n  const userInfo = useSelector((state) => state.user.currentUser);\r\n  const [ProdItem, setProdItem] = useState([]);\r\n  const [ProdItemCopy, setProdItemCopy] = useState();\r\n  const lunchCheckBox = useRef();\r\n\r\n  const [TimeOut, setTimeOut] = useState(false);\r\n\r\n  const [GuestHomePop, setGuestHomePop] = useState(true);\r\n  const guestPopClose = () => {\r\n    setGuestHomePop(false);\r\n  };\r\n  const guestPopOn = () => {\r\n    setGuestHomePop(true);\r\n  };\r\n\r\n  const onTimeOut = () => {\r\n    setTimeOut(true);\r\n  };\r\n\r\n  //정렬 라디오버튼\r\n  const [CateRadio, setCateRadio] = useState(\"all\");\r\n  const itemSort = (e) => {\r\n    setCateRadio(e.target.value);\r\n  };\r\n\r\n  //검색\r\n  const [searchInput, setSearchInput] = useState(\"\");\r\n  const onSearchChange = (e) => {\r\n    setSearchInput(e.target.value);\r\n    if (e.target.value === \"\") {\r\n      setSearchAgain(!SearchAgain);\r\n    }\r\n  };\r\n\r\n  const [SearchAgain, setSearchAgain] = useState(false);\r\n  const onSearch = () => {\r\n    setSearchAgain(!SearchAgain);\r\n  };\r\n\r\n  const onToggleFavor = (e, name) => {\r\n    e.currentTarget.classList.toggle(\"true\");\r\n    firebase\r\n      .database()\r\n      .ref(\"users\")\r\n      .child(userInfo.uid)\r\n      .child(`favorite/${name}/add_favor`)\r\n      .transaction((pre) => {\r\n        return !pre;\r\n      });\r\n  };\r\n\r\n  let b_soldout;\r\n  let m_soldout;\r\n  let m_soldout2;\r\n\r\n  const [TodayLunchCheck, setTodayLunchCheck] = useState();\r\n  const [ItemList, setItemList] = useState();\r\n  const [orderTimeStart, setOrderTimeStart] = useState();\r\n  const [orderTimeEnd, setOrderTimeEnd] = useState();\r\n\r\n  const [restMin, setRestMin] = useState();\r\n  const [restSec, setRestSec] = useState();\r\n\r\n  const [ModifyState, setModifyState] = useState(false);\r\n  const onModify = () => {\r\n    setModifyState(true);\r\n  };\r\n  useEffect(() => {\r\n    if (userInfo) {\r\n      //식단체크\r\n      firebase\r\n        .database()\r\n        .ref(\"lunch\")\r\n        .once(\"value\", (snapshot) => {\r\n          if (!snapshot.val()) return;\r\n          let arr = [];\r\n          const startTime = Number(\r\n            snapshot.val().orderTimeStart.split(\":\").join(\"\")\r\n          );\r\n          let endTime = snapshot.val().orderTimeEnd;\r\n          endTime = endTime.split(\":\");\r\n          setOrderTimeStart(startTime);\r\n          setOrderTimeEnd(Number(endTime.join(\"\")));\r\n          const endSecond = Math.floor(\r\n            new Date(\r\n              curDate.year,\r\n              curDate.og_month,\r\n              curDate.og_day,\r\n              Number(endTime[0]),\r\n              Number(endTime[1])\r\n            ).getTime() / 1000\r\n          );\r\n\r\n          const curSec = Math.floor(new Date().getTime() / 1000);\r\n          const calcSec = endSecond - curSec;\r\n          setRestMin(Math.floor(calcSec / 60));\r\n          setRestSec(calcSec % 60);\r\n          snapshot.val().item.forEach((el) => {\r\n            arr.push(el);\r\n          });\r\n          setItemList(arr);\r\n        });\r\n      let lunchCheck = {};\r\n\r\n      setTodayLunchCheck(lunchCheck);\r\n\r\n      firebase\r\n        .database()\r\n        .ref(\"lunch\")\r\n        .child(`user/${userInfo.uid}/checkList/${curDate.full}`)\r\n        .once(\"value\")\r\n        .then((snapshot) => {\r\n          if (snapshot.val()) {\r\n            lunchCheck.date = snapshot.val().date;\r\n            lunchCheck.confirm = snapshot.val().confirm;\r\n            lunchCheck.item = snapshot.val().item;\r\n            setTodayLunchCheck(lunchCheck);\r\n          }\r\n        });\r\n    }\r\n    return () => {};\r\n  }, [ModifyState]);\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    if (mounted && userInfo) {\r\n      //즐찾\r\n      async function getProdItem() {\r\n        let favorItem = [];\r\n        await firebase\r\n          .database()\r\n          .ref(\"soldout\")\r\n          .once(\"value\")\r\n          .then((snapshot) => {\r\n            b_soldout = snapshot.val()?.b_soldout || \"\";\r\n            m_soldout = snapshot.val()?.MilkSoldout || \"\";\r\n            m_soldout2 = snapshot.val()?.MilkSoldout2 || \"\";\r\n          });\r\n\r\n        await firebase\r\n          .database()\r\n          .ref(\"users\")\r\n          .child(`${userInfo.uid}/favorite`)\r\n          .once(\"value\")\r\n          .then((snapshot) => {\r\n            snapshot.forEach(function (item) {\r\n              favorItem.push({\r\n                name: item.key,\r\n                add_favor: item.val().add_favor,\r\n              });\r\n            });\r\n          });\r\n\r\n        await firebase\r\n          .database()\r\n          .ref(\"products\")\r\n          .orderByChild(\"sort_num\")\r\n          .on(\"value\", (snapshot) => {\r\n            let array = [];\r\n            snapshot.forEach(function (item) {\r\n              array.push({\r\n                ...item.val(),\r\n                uid: item.key,\r\n                price: parseInt(item.val().price),\r\n                b_soldout: b_soldout,\r\n                m_soldout: m_soldout,\r\n                m_soldout2: m_soldout2,\r\n                sort_num: item.val().sort_num ? item.val().sort_num : 9999,\r\n                hidden: item.val().hidden ? item.val().hidden : false,\r\n                guest_hidden: item.val().guest_hidden\r\n                  ? item.val().guest_hidden\r\n                  : false,\r\n                jaego: item.val().jaego\r\n                  ? item.val().jaego\r\n                  : item.val().jaego === 0\r\n                  ? 0\r\n                  : \"\",\r\n              });\r\n            });\r\n            let newFavorItem = [];\r\n            array.map((el) => {\r\n              let name = el.name;\r\n              favorItem.forEach((favor) => {\r\n                if (favor.name === name) {\r\n                  newFavorItem.push({\r\n                    ...favor,\r\n                    ...el,\r\n                  });\r\n                }\r\n              });\r\n              return el;\r\n            });\r\n            //array = { ...array, ...newFavorItem };\r\n\r\n            newFavorItem.map((el) => {\r\n              let uid = el.uid;\r\n              let favor = el.add_favor;\r\n              array.forEach((el) => {\r\n                if (el.uid === uid) {\r\n                  el.add_favor = favor;\r\n                }\r\n                return el;\r\n              });\r\n            });\r\n\r\n            array.sort((a, b) => {\r\n              return a.sort_num - b.sort_num;\r\n            });\r\n\r\n            array = array.filter((el) => {\r\n              if (CateRadio === \"all\") {\r\n                return el;\r\n              }\r\n              return el.category === CateRadio;\r\n            });\r\n            array = array.filter((el) => {\r\n              return el.hidden === false;\r\n            });\r\n            if (userInfo.uid === \"cz8emz5BbZMkdJLTSEmro6DYqF32\") {\r\n              array = array.filter((el) => {\r\n                return el.guest_hidden === false;\r\n              });\r\n            }\r\n            setProdItem(array);\r\n            setProdItemCopy(array);\r\n          });\r\n      }\r\n      getProdItem();\r\n    } else {\r\n      setSearchAgain(!SearchAgain);\r\n    }\r\n    return function cleanup() {\r\n      mounted = false;\r\n    };\r\n  }, [CateRadio, SearchAgain]);\r\n\r\n  useEffect(() => {\r\n    if (ProdItemCopy && searchInput !== \"\") {\r\n      let array = _.cloneDeep(ProdItemCopy);\r\n      array.forEach(function (item) {\r\n        var dis = Hangul.disassemble(item.name, true);\r\n        var cho = dis.reduce(function (prev, elem) {\r\n          elem = elem[0] ? elem[0] : elem;\r\n          return prev + elem;\r\n        }, \"\");\r\n        item.diassembled = cho;\r\n      });\r\n      let arr = searchInput.concat();\r\n      let search = Hangul.disassemble(arr).join(\"\");\r\n      array = array.filter(function (item) {\r\n        return (\r\n          item.diassembled.includes(searchInput) ||\r\n          item.diassembled.includes(search) ||\r\n          item.name.includes(searchInput)\r\n        );\r\n      });\r\n      setProdItem(array);\r\n    }\r\n  }, [searchInput]);\r\n\r\n  const [PosX, setPosX] = useState(0);\r\n  const [PosY, setPosY] = useState(0);\r\n  const [OnModal, setOnModal] = useState(false);\r\n  const [OrderItem, setOrderItem] = useState();\r\n  const orderHandler = (e, item) => {\r\n    if (e.target.tagName !== \"svg\" && e.target.tagName !== \"path\") {\r\n      /*\r\n      if(!TodayLunchCheck){\r\n        alert('식단체크를 먼저 해야 주문이 가능합니다.');\r\n        return;\r\n      }\r\n      if(TodayLunchCheck && !TodayLunchCheck.confirm){\r\n        alert('오늘의 식단을 확인 해야 주문이 가능합니다.');\r\n        return;\r\n      }\r\n      */\r\n\r\n      if (b_soldout === false) {\r\n        item.add = \"\";\r\n      }\r\n      setOrderItem(item);\r\n      setPosX(e.pageX);\r\n      setPosY(e.pageY);\r\n      setOnModal(true);\r\n    }\r\n  };\r\n  const onFinished = () => {\r\n    setOnModal(false);\r\n  };\r\n\r\n  const TopBox = (\r\n    <>\r\n      <Search\r\n        style={{ marginBottom: \"10px\" }}\r\n        allowClear\r\n        enterButton=\"검색\"\r\n        size=\"large\"\r\n        placeholder=\"실시간 검색(초성가능)\"\r\n        value={searchInput}\r\n        onSearch={onSearch}\r\n        onChange={onSearchChange}\r\n        type=\"text\"\r\n      />\r\n      <div className=\"menuCategory\">\r\n        <Radio.Group\r\n          className=\"menuCategory\"\r\n          onChange={itemSort}\r\n          defaultValue=\"all\"\r\n          buttonStyle=\"solid\"\r\n        >\r\n          <ProdCategory />\r\n        </Radio.Group>\r\n      </div>\r\n    </>\r\n  );\r\n\r\n  const [LunchPop, setLunchPop] = useState(true);\r\n  const onConfrim = (uid) => {\r\n    let date = curDate.full;\r\n    try {\r\n      firebase.database().ref(`lunch/user/${uid}/checkList/${date}`).update({\r\n        confirm: 1,\r\n      });\r\n      setLunchPop(false);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const onLunchSubmit = (e) => {\r\n    e.preventDefault();\r\n    let list = [\r\n      ...lunchCheckBox.current.querySelectorAll(\"input[type=checkbox]:checked\"),\r\n    ];\r\n    let arr = [];\r\n    list.map((el) => {\r\n      arr.push(el.dataset.value);\r\n    });\r\n    firebase\r\n      .database()\r\n      .ref(`lunch/user/${userInfo.uid}/checkList/${curDate.full}`)\r\n      .update({\r\n        item: arr,\r\n      });\r\n    setModifyState(false);\r\n  };\r\n\r\n  console.log(TodayLunchCheck, curHourMin, orderTimeEnd, LunchPop);\r\n\r\n  return (\r\n    <>\r\n      {userInfo && userInfo.auth && userInfo.auth.includes(\"guest\") && (\r\n        <Button onClick={guestPopOn} type=\"primary\" className=\"btn-guest-home\">\r\n          <antIcon.AiOutlineHome\r\n            style={{ position: \"relative\", top: \"2px\", marginRight: \"5px\" }}\r\n          />\r\n          홈화면\r\n        </Button>\r\n      )}\r\n      {userInfo &&\r\n        userInfo.auth &&\r\n        userInfo.auth.includes(\"guest\") &&\r\n        GuestHomePop && (\r\n          <>\r\n            <GuestHome prod={ProdItem} guestPopClose={guestPopClose} />\r\n          </>\r\n        )}\r\n      {TodayLunchCheck &&\r\n        !TodayLunchCheck.confirm &&\r\n        curHourMin >= orderTimeStart &&\r\n        curHourMin < orderTimeEnd &&\r\n        LunchPop && (\r\n          <div className=\"lunch-check-popup\">\r\n            {TodayLunchCheck.item && (\r\n              <>\r\n                <dl>\r\n                  {!ModifyState && (\r\n                    <>\r\n                      <dt>{userInfo.displayName}님의 오늘식단</dt>\r\n                      <dd className=\"item-list\">\r\n                        <span>\r\n                          {TodayLunchCheck.item.map((el, idx) =>\r\n                            TodayLunchCheck.item.length == idx + 1 ? (\r\n                              <span key={idx}>{el}</span>\r\n                            ) : (\r\n                              <span key={idx}>{el},</span>\r\n                            )\r\n                          )}\r\n                        </span>\r\n                      </dd>\r\n                    </>\r\n                  )}\r\n                </dl>\r\n\r\n                <div className=\"rest-time\">\r\n                  <antIcon.AiOutlineFieldTime />\r\n                  남은시간 :{\" \"}\r\n                  <Timer onTimeOut={onTimeOut} mm={restMin} ss={restSec} />\r\n                </div>\r\n                <div\r\n                  ref={lunchCheckBox}\r\n                  className={`check-list-box ${ModifyState && \"modify\"}`}\r\n                >\r\n                  {ItemList &&\r\n                    ModifyState &&\r\n                    ItemList.map((list, l_idx) => (\r\n                      <Checkbox\r\n                        key={l_idx}\r\n                        data-value={list}\r\n                        defaultChecked={\r\n                          TodayLunchCheck.item &&\r\n                          TodayLunchCheck.item.includes(list)\r\n                            ? true\r\n                            : false\r\n                        }\r\n                      >\r\n                        {list}\r\n                      </Checkbox>\r\n                    ))}\r\n                </div>\r\n                <div className=\"btn-box\">\r\n                  {!ModifyState && (\r\n                    <>\r\n                      <Button\r\n                        disabled={TimeOut}\r\n                        style={{ marginRight: \"5px\" }}\r\n                        onClick={onModify}\r\n                      >\r\n                        수정하기\r\n                      </Button>\r\n                      <Button\r\n                        disabled={TimeOut}\r\n                        type=\"primary\"\r\n                        onClick={() => {\r\n                          onConfrim(userInfo.uid);\r\n                        }}\r\n                      >\r\n                        식단확인\r\n                      </Button>\r\n                    </>\r\n                  )}\r\n                  {ModifyState && (\r\n                    <Button type=\"primary\" onClick={onLunchSubmit}>\r\n                      적용하기\r\n                    </Button>\r\n                  )}\r\n                </div>\r\n              </>\r\n            )}\r\n            {!TodayLunchCheck.item && (\r\n              <dl>\r\n                <dt>오늘 식단을 아직 정하지 않았습니다.</dt>\r\n                <div className=\"btn-box\">\r\n                  <Button type=\"primary\">\r\n                    <Link to=\"/lunch\">체크 하러가기</Link>\r\n                  </Button>\r\n                </div>\r\n              </dl>\r\n            )}\r\n          </div>\r\n        )}\r\n      {TopBox}\r\n      {ProdItem.length > 0 ? (\r\n        <>\r\n          <ProdList>\r\n            {ProdItem.map((item, index) => (\r\n              <div\r\n                style={{ cursor: \"pointer\", position: \"relative\" }}\r\n                className={`ani-fadein list delay-${index}`}\r\n                key={index}\r\n              >\r\n                {(item.soldout === false || item.jaego === 0) && (\r\n                  <div\r\n                    style={{\r\n                      width: \"100%\",\r\n                      height: \"100%\",\r\n                      position: \"absolute\",\r\n                      left: \"0\",\r\n                      top: \"0\",\r\n                      display: \"flex\",\r\n                      fontSize: \"14px\",\r\n                      color: \"#fff\",\r\n                      justifyContent: \"center\",\r\n                      alignItems: \"center\",\r\n                      background: \"rgba(0,0,0,0.5)\",\r\n                      zIndex: \"10\",\r\n                    }}\r\n                  >\r\n                    sold out\r\n                  </div>\r\n                )}\r\n\r\n                <div className=\"img\" onClick={(e) => orderHandler(e, item)}>\r\n                  <span style={{ opacity: \"0.85\" }} className=\"kal\">\r\n                    {item.kal}kal\r\n                  </span>\r\n                  <img src={item.image} alt=\"\" />\r\n                </div>\r\n                <div\r\n                  className=\"user-box\"\r\n                  onClick={(e) => orderHandler(e, item)}\r\n                >\r\n                  <div className=\"txt\" style={{ padding: \"0 5px\" }}>\r\n                    <div className=\"flex-box between\">\r\n                      <span className=\"name\">\r\n                        {item.name}\r\n                        <span className=\"hidden\">{item.uid}</span>\r\n                        {item.jaego > 0 && item.jaego < 6 && (\r\n                          <div style={{ fontSize: \"12px\", color: \"red\" }}>\r\n                            잔여수량 : {item.jaego}\r\n                          </div>\r\n                        )}\r\n                      </span>\r\n                      <span\r\n                        className={\"ic-favor p-color \" + item.add_favor}\r\n                        onClick={(e) => {\r\n                          onToggleFavor(e, item.name);\r\n                        }}\r\n                      >\r\n                        <antIcon.AiFillStar className=\"favor\" />\r\n                        <antIcon.AiOutlineStar className=\"no-favor\" />\r\n                      </span>\r\n                    </div>\r\n                    <div className=\"flex-box between a-center\">\r\n                      <span className=\"hot\">\r\n                        {item.hot === \"etc\" ? \"\" : item.hot}\r\n                      </span>\r\n                      <span\r\n                        style={{\r\n                          textDecoration: \"line-through\",\r\n                          color: \"#888\",\r\n                        }}\r\n                        className=\"price\"\r\n                      >\r\n                        {commaNumber(item.price)}원\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </ProdList>\r\n          {OnModal && (\r\n            <OderModalPopup\r\n              onFinished={onFinished}\r\n              posx={PosX}\r\n              posy={PosY}\r\n              OrderItem={OrderItem}\r\n            />\r\n          )}\r\n        </>\r\n      ) : ProdItem.length === 0 ? (\r\n        <div style={{ paddingTop: \"15px\" }}>\r\n          <Empty\r\n            description={<span>메뉴가 없습니다.</span>}\r\n            image={Empty.PRESENTED_IMAGE_SIMPLE}\r\n          />\r\n        </div>\r\n      ) : searchInput ? (\r\n        <div style={{ paddingTop: \"15px\" }}>\r\n          <Empty\r\n            description={\r\n              <span>\r\n                검색결과가 없습니다.\r\n                <br />\r\n                ※검색어가 제대로 입력된 경우엔 검색버튼을 다시 눌러보세요.\r\n              </span>\r\n            }\r\n            image={Empty.PRESENTED_IMAGE_SIMPLE}\r\n          />\r\n        </div>\r\n      ) : (\r\n        <Loading />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Menu;\r\n","D:\\프로젝트\\sy-cafe-order\\src\\component\\Login.js",["277","278"],"import React, { useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport firebase from \"../firebase\";\r\nimport { Button, Input } from \"antd\";\r\nimport { ModalPopup } from \"./Admin/ModifyModal\";\r\nimport LogoImg from \"./LogoImg\";\r\n\r\nfunction Login() {\r\n  const { register, errors, handleSubmit } = useForm({\r\n    mode: \"onChange\",\r\n  });\r\n  const onSubmit = async (data) => {\r\n    try {\r\n      setLoading(true);\r\n      await firebase\r\n        .auth()\r\n        .signInWithEmailAndPassword(data.email, data.password);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      setErrorFromSubmit(error.message);\r\n      setLoading(false);\r\n      setTimeout(() => {\r\n        setErrorFromSubmit(\"\");\r\n      }, 5000);\r\n    }\r\n  };\r\n  const [errorFromSubmit, setErrorFromSubmit] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [InputEmail, setInputEmail] = useState(false);\r\n  const [InputPw, setInputPw] = useState(false);\r\n  const onInputEmail = (e) => {\r\n    setInputEmail(e.target.value);\r\n  };\r\n  const onInputPw = (e) => {\r\n    setInputPw(e.target.value);\r\n  };\r\n\r\n  const [PwChangeInput, setPwChangeInput] = useState(\"\");\r\n  const OnPwChangeInput = (e) => {\r\n    setPwChangeInput(e.target.value);\r\n  };\r\n  const onPwChange = () => {\r\n    const auth = firebase.auth();\r\n    const emailAddress = PwChangeInput;\r\n    console.log(emailAddress);\r\n    auth\r\n      .sendPasswordResetEmail(emailAddress)\r\n      .then(function () {\r\n        alert(\"이메일로 비밀번호 변경 링크를 발송했습니다.\");\r\n        onPwModal();\r\n      })\r\n      .catch(function (error) {\r\n        alert(\"해당 이메일로 가입된 유저가 없습니다.\");\r\n      });\r\n  };\r\n\r\n  const [PwModal, setPwModal] = useState(false);\r\n  const onPwModal = () => {\r\n    setPwModal(!PwModal);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"join-form-wrap\">\r\n        <div className=\"logo_box\">\r\n          <LogoImg />\r\n        </div>\r\n        <form className=\"join-form\" onSubmit={handleSubmit(onSubmit)}>\r\n          <div className=\"input-box\">\r\n            <input\r\n              name=\"email\"\r\n              type=\"email\"\r\n              id=\"email\"\r\n              onChange={onInputEmail}\r\n              ref={register({ required: true, pattern: /^\\S+@\\S+$/i })}\r\n            />\r\n            <label\r\n              htmlFor=\"email\"\r\n              className={\"place-holder \" + (InputEmail && \"on\")}\r\n            >\r\n              <span>이메일</span>\r\n            </label>\r\n          </div>\r\n          <div className=\"input-box\">\r\n            <input\r\n              type=\"password\"\r\n              onChange={onInputPw}\r\n              name=\"password\"\r\n              id=\"password\"\r\n              ref={register({ required: true, minLength: 6 })}\r\n            />\r\n            <label\r\n              htmlFor=\"password\"\r\n              className={\"place-holder \" + (InputPw && \"on\")}\r\n            >\r\n              <span>비밀번호</span>\r\n            </label>\r\n            {errors.password && errors.password.type === \"required\" && (\r\n              <p>비밀번호를 입력해 주세요</p>\r\n            )}\r\n            {errors.password && errors.password.type === \"minLength\" && (\r\n              <p>비밀번호는 6글자 이상이어야 합니다.</p>\r\n            )}\r\n            {errorFromSubmit && <p>{errorFromSubmit}</p>}\r\n          </div>\r\n          <input type=\"submit\" value=\"로그인\" disabled={loading} />\r\n        </form>\r\n        <div\r\n          style={{\r\n            position: \"relative\",\r\n            marginTop: \"10px\",\r\n            textAlign: \"center\",\r\n          }}\r\n        >\r\n          <a\r\n            href=\"javascript:;\"\r\n            onClick={onPwModal}\r\n            style={{ fontWeight: \"600\" }}\r\n          >\r\n            비밀번호를 잊어버렸을때\r\n          </a>\r\n          {PwModal && (\r\n            <ModalPopup>\r\n              <h3 style={{ fontWeight: \"bold\", textAlign: \"center\" }}>\r\n                비밀번호 재설정\r\n              </h3>\r\n              <Input\r\n                placeholder=\"가입했던 이메일을 입력해 주세요\"\r\n                type=\"text\"\r\n                value={PwChangeInput}\r\n                onChange={OnPwChangeInput}\r\n              />\r\n              <div className=\"flex-box j-center\" style={{ marginTop: \"10px\" }}>\r\n                <Button\r\n                  type=\"primary\"\r\n                  style={{ marginRight: \"5px\" }}\r\n                  onClick={onPwChange}\r\n                >\r\n                  이메일로 전송\r\n                </Button>\r\n                <Button onClick={onPwModal}>닫기</Button>\r\n              </div>\r\n            </ModalPopup>\r\n          )}\r\n        </div>\r\n        <div style={{ marginTop: \"35px\", textAlign: \"center\" }}>\r\n          아직 회원이 아니시라면?<br></br>\r\n          <a href=\"/join\" style={{ fontWeight: \"600\" }}>\r\n            회원가입 하러가기\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","D:\\프로젝트\\sy-cafe-order\\src\\component\\MyOrder.js",["279","280"],"import { Button } from \"antd\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Popover, message } from \"antd\";\r\nimport firebase from \"../firebase\";\r\nimport { commaNumber, notify, getFormatDate } from \"./CommonFunc\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { OrderBox } from \"./Admin/AdminOrder\";\r\nimport * as antIcon from \"react-icons/ai\";\r\nimport Loading from \"./Loading\";\r\nimport { Empty, DatePicker } from \"antd\";\r\nconst { RangePicker } = DatePicker;\r\n\r\nfunction MyOrder() {\r\n  const userInfo = useSelector((state) => state.user.currentUser);\r\n  const [OrderList, setOrderList] = useState([]);\r\n  const [Nodata, setNodata] = useState(false);\r\n\r\n  const [StartDate, setStartDate] = useState(20210101);\r\n  const [EndDate, setEndDate] = useState(21210101);\r\n\r\n  const [ReRender, setReRender] = useState(false);\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    if (mounted) {\r\n      firebase\r\n        .database()\r\n        .ref(\"order\")\r\n        .orderByChild(\"order_uid\")\r\n        .equalTo(userInfo.uid)\r\n        .on(\"value\", (snapshot) => {\r\n          let array = [];\r\n          snapshot.forEach(function (item) {\r\n            let date = item.val().order_time.split(\"-\");\r\n            date = parseInt(date[0] + \"\" + date[1] + date[2].split(\" \")[0]);\r\n            let date2 = item.val().order_time.split(\" \");\r\n            date2 = new Date(date2[0] + \"T\" + date2[1].split(\"|\")[0]).getTime();\r\n            array.push({\r\n              ...item.val(),\r\n              key: item.key,\r\n              order_date: date,\r\n              timestamp: date2,\r\n            });\r\n          });\r\n          // eslint-disable-next-line array-callback-return\r\n          array.sort((a, b) => {\r\n            if (a.timestamp < b.timestamp) {\r\n              return 1;\r\n            }\r\n            if (a.timestamp > b.timestamp) {\r\n              return -1;\r\n            }\r\n          });\r\n          array = array.filter((el) => {\r\n            return StartDate <= el.order_date && el.order_date <= EndDate;\r\n          });\r\n          array = array.slice(0, 30);\r\n          setOrderList(array);\r\n          if (array.length === 0) {\r\n            setNodata(true);\r\n          }\r\n          notify(\"주문상태가 변경되었습니다.\");\r\n        });\r\n    }\r\n    return function cleanup() {\r\n      firebase.database().ref(\"order\").off();\r\n      mounted = false;\r\n    };\r\n  }, [ReRender]);\r\n\r\n  const orderCancel = (key, uid) => {\r\n    if (window.confirm(\"주문 취소 하시겠습니까?\")) {\r\n      firebase.database().ref(\"order\").child(key).remove();\r\n      firebase\r\n        .database()\r\n        .ref(\"products\")\r\n        .child(uid)\r\n        .transaction((pre) => {\r\n          if (pre.jaego >= 0) {\r\n            pre.jaego++;\r\n            return pre;\r\n          }\r\n        });\r\n      message.success(\"주문이 취소되었습니다.\");\r\n    }\r\n  };\r\n\r\n  const stateChange = (key) => {\r\n    firebase\r\n      .database()\r\n      .ref(`order/${key}`)\r\n      .child(\"order_state\")\r\n      .transaction((pre) => {\r\n        return pre + 2;\r\n      });\r\n  };\r\n\r\n  const onDateChange = (e) => {\r\n    if (e) {\r\n      setStartDate(getFormatDate(e[0]._d).full);\r\n      setEndDate(getFormatDate(e[1]._d).full);\r\n      setReRender(!ReRender);\r\n    }\r\n  };\r\n\r\n  const dbDel = () => {\r\n    firebase\r\n      .database()\r\n      .ref(\"order\")\r\n      .once(\"value\", (data) => {\r\n        data.forEach((el) => {\r\n          if (el.val().timestamp < new Date().getTime() - 2592000000) {\r\n            firebase.database().ref(`order/${el.key}`).remove();\r\n          }\r\n        });\r\n      });\r\n  };\r\n\r\n  if (OrderList.length) {\r\n    return (\r\n      <>\r\n        {userInfo && userInfo.role > 2 && (\r\n          <Button onClick={dbDel}>old delete</Button>\r\n        )}\r\n        <div className=\"flex-box a-center\">\r\n          <RangePicker onChange={onDateChange} />\r\n          <span style={{ color: \"#999\", fontSize: \"12px\", marginLeft: \"5px\" }}>\r\n            *최근 한달안의 데이터만 검색 가능합니다.\r\n          </span>\r\n        </div>\r\n        <OrderBox className=\"order-list-box\">\r\n          {OrderList.map((list, index) => (\r\n            <div className={`user list state_${list.order_state}`} key={index}>\r\n              {list.prod_img ? (\r\n                <div className=\"order-prod-img\">\r\n                  <img src={list.prod_img} />\r\n                </div>\r\n              ) : (\r\n                <div className=\"order-prod-img no-img\">\r\n                  <antIcon.AiOutlineCoffee />\r\n                </div>\r\n              )}\r\n              <div className=\"prod\">\r\n                <div className=\"info-box\">\r\n                  <span className=\"info\">\r\n                    {list.prod_name}\r\n                    {list.prod_option ? `-${list.prod_option}` : \"\"}\r\n                  </span>\r\n                  {list.hot === \"hot\" ? (\r\n                    <span className=\"ic-hot shrink-0\"></span>\r\n                  ) : list.hot === \"ice\" ? (\r\n                    <span className=\"ic-ice shrink-0\"></span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                  {/* <span className=\"info shrink-0\">{list.amount}개</span> */}\r\n                  <div>\r\n                    {list.add && (\r\n                      <span className=\"info shrink-0\">{list.add}</span>\r\n                    )}\r\n                    {list.add2 && (\r\n                      <span className=\"info shrink-0\">{list.add2}</span>\r\n                    )}\r\n                    {list.milk && (\r\n                      <span className=\"info shrink-0\">{list.milk}</span>\r\n                    )}\r\n                  </div>\r\n                  {list.order_etc && (\r\n                    <Popover content={list.order_etc} trigger=\"click\">\r\n                      <Button type=\"default\">기타</Button>\r\n                    </Popover>\r\n                  )}\r\n                </div>\r\n                <span className=\"shrink-0\">\r\n                  {commaNumber(parseInt(list.price))}원\r\n                </span>\r\n              </div>\r\n              <div className=\"state\">\r\n                <span className=\"date\">\r\n                  {list.order_time.split(\"|\")[0]}&nbsp; (\r\n                  {list.order_time.split(\"|\")[1]})\r\n                </span>\r\n                <span className=\"setting\">\r\n                  {list.order_state === 0 && (\r\n                    <>\r\n                      <Button\r\n                        className=\"btn-cancel\"\r\n                        style={{ marginRight: \"5px\" }}\r\n                        onClick={() => {\r\n                          orderCancel(list.key, list.prod_uid);\r\n                        }}\r\n                      >\r\n                        주문취소\r\n                      </Button>\r\n                      {list.category === \"셀프\" && (\r\n                        <Button\r\n                          className=\"btn-cancel\"\r\n                          style={{ marginRight: \"5px\" }}\r\n                          onClick={() => {\r\n                            stateChange(list.key);\r\n                          }}\r\n                        >\r\n                          픽업완료\r\n                        </Button>\r\n                      )}\r\n                    </>\r\n                  )}\r\n                  {list.order_state === 0 && \"대기중\"}\r\n                  {list.order_state === 1 && \"주문접수\"}\r\n                  {list.order_state === 2 && \"완료\"}\r\n                </span>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </OrderBox>\r\n      </>\r\n    );\r\n  } else if (Nodata) {\r\n    return (\r\n      <>\r\n        {userInfo && userInfo.role > 2 && (\r\n          <Button onClick={dbDel}>old delete</Button>\r\n        )}\r\n        <Empty\r\n          description=\"주문내역이 없습니다.\"\r\n          image={Empty.PRESENTED_IMAGE_SIMPLE}\r\n        ></Empty>\r\n      </>\r\n    );\r\n  } else {\r\n    return (\r\n      <>\r\n        <Loading />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MyOrder;\r\n","D:\\프로젝트\\sy-cafe-order\\src\\component\\Loading.js",[],"D:\\프로젝트\\sy-cafe-order\\src\\component\\Nav.js",["281","282","283","284","285","286","287","288","289","290","291","292"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { clearUser } from \"../redux/actions/user_action\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Menu, Input, Button } from \"antd\";\r\nimport * as bsIcon from \"react-icons/bs\";\r\nimport * as antIcon from \"react-icons/ai\";\r\nimport * as mdIcon from \"react-icons/md\";\r\nimport * as rmIcon from \"react-icons/ri\";\r\nimport firebase from \"../firebase\";\r\nimport styled from \"styled-components\";\r\nimport moment from \"moment\";\r\nimport { OderModalPopup } from \"./OrderModal\";\r\nimport PartSelect from \"./PartSelect\";\r\nconst { SubMenu } = Menu;\r\nexport const BlackBg = styled.div`\r\n  width: 100vw;\r\n  height: 100vh;\r\n  background: rgba(0, 0, 0, 0.5);\r\n  position: fixed;\r\n  left: 0;\r\n  top: 0;\r\n  z-index: 50;\r\n  display: none;\r\n  @media all and (max-width: 760px) {\r\n    &.on {\r\n      display: block;\r\n    }\r\n  }\r\n`;\r\nfunction Nav() {\r\n  let dispatch = useDispatch();\r\n\r\n  const firebaseUserInfo = firebase.auth().currentUser;\r\n  let name, email, photoUrl, uid, emailVerified;\r\n  if (firebaseUserInfo != null) {\r\n    name = firebaseUserInfo.displayName;\r\n    email = firebaseUserInfo.email;\r\n    photoUrl = firebaseUserInfo.photoURL;\r\n    emailVerified = firebaseUserInfo.emailVerified;\r\n    uid = firebaseUserInfo.uid;\r\n  }\r\n\r\n  const currentUser = useSelector((state) => state.user.currentUser);\r\n\r\n  const [current, setCurrent] = useState(\"1\");\r\n\r\n  const handleClick = (e) => {\r\n    setCurrent(e.key);\r\n    setLeftMenu(!LeftMenu);\r\n  };\r\n\r\n  const [InfoPop, setInfoPop] = useState(false);\r\n  const onChangeInfo = () => {\r\n    setInfoPop(!InfoPop);\r\n  };\r\n\r\n  const [LeftMenu, setLeftMenu] = useState(false);\r\n  const onMenuHandler = () => {\r\n    setInfoPop(false);\r\n    setLeftMenu(!LeftMenu);\r\n  };\r\n\r\n  const onLogout = () => {\r\n    firebase.auth().signOut();\r\n  };\r\n\r\n  const timeDiff = (time) => {\r\n    let hour = parseInt(time.split(\":\")[0] * 60);\r\n    let min = parseInt(time.split(\":\")[1]);\r\n    return hour + min;\r\n  };\r\n\r\n  const [AbleTime, setAbleTime] = useState();\r\n  const [CurAbleTime, setCurAbleTime] = useState(0);\r\n  const [TimeChange, setTimeChange] = useState(false);\r\n  const timeRef = useRef(false);\r\n\r\n  const [userPart, setUserPart] = useState();\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      timeRef.current = !timeRef.current;\r\n      setTimeChange(timeRef.current);\r\n    }, 2000);\r\n    const currentDay = moment().format(\"dddd\");\r\n    const currentTime = moment().format(\"HH:mm\");\r\n    const currentTimeNum = timeDiff(currentTime);\r\n    let mounted = true;\r\n    if (mounted) {\r\n      if (!currentUser) return;\r\n      firebase\r\n        .database()\r\n        .ref(`users/${currentUser.uid}/part`)\r\n        .on(\"value\", (snapshot) => {\r\n          setUserPart(snapshot.val());\r\n        });\r\n\r\n      firebase\r\n        .database()\r\n        .ref(\"time\")\r\n        .on(\"value\", (snapshot) => {\r\n          if (!snapshot.val()) return;\r\n          setAbleTime(snapshot.val());\r\n          let able = snapshot.val();\r\n          let ableKeys = Object.keys(able);\r\n          let newAble = {};\r\n          for (let i = 0; i < ableKeys.length; i++) {\r\n            const key = ableKeys[i];\r\n            const value = able[key];\r\n            newAble[key] = timeDiff(value);\r\n          }\r\n          if (\r\n            currentTimeNum >= newAble.ableTimeStart &&\r\n            currentTimeNum < newAble.ableTimeEnd\r\n          ) {\r\n            setCurAbleTime(1);\r\n\r\n            if (\r\n              currentTimeNum >= newAble.lunchTimeStart &&\r\n              currentTimeNum < newAble.lunchTimeEnd\r\n            ) {\r\n              setCurAbleTime(2);\r\n            }\r\n            if (\r\n              currentTimeNum >= newAble.breakTimeStart &&\r\n              currentTimeNum < newAble.breakTimeEnd\r\n            ) {\r\n              setCurAbleTime(3);\r\n            }\r\n          } else {\r\n            setCurAbleTime(5);\r\n          }\r\n          if (currentDay == \"토요일\" || currentDay == \"일요일\") {\r\n            setCurAbleTime(5);\r\n          }\r\n        });\r\n    }\r\n    return function cleanup() {\r\n      firebase.database().ref(\"users\").off();\r\n      firebase.database().ref(\"time\").off();\r\n      mounted = false;\r\n    };\r\n  }, [TimeChange]);\r\n\r\n  const [submitLoading, setsubmitLoading] = useState(false);\r\n  const onSubmitInfo = async (e) => {\r\n    e.preventDefault();\r\n    let sosok = e.target.sosok.value;\r\n    let part = e.target.part.value;\r\n    firebaseUserInfo.updateProfile({\r\n      photoURL: part,\r\n    });\r\n    let call_num = e.target.call_number.value;\r\n    if (!sosok) {\r\n      alert(\"소속을 선택해 주세요.\");\r\n      return;\r\n    }\r\n    if (isNaN(call_num)) {\r\n      alert(\"숫자만 입력해 주세요\");\r\n      return;\r\n    }\r\n    if (call_num.length != 11) {\r\n      alert(\"올바른 번호가 아닙니다\");\r\n      return;\r\n    }\r\n    setsubmitLoading(true);\r\n    try {\r\n      let user = firebase.auth().currentUser;\r\n      user\r\n        .updateProfile({\r\n          phoneNumber: call_num,\r\n        })\r\n        .then(function () {\r\n          alert(\"업데이트 되었습니다.\");\r\n        })\r\n        .catch(function (error) {\r\n          console.error(error);\r\n        });\r\n      await firebase\r\n        .database()\r\n        .ref(\"lunch/user\")\r\n        .child(currentUser.uid)\r\n        .update({\r\n          part: part,\r\n        });\r\n      await firebase.database().ref(\"users\").child(currentUser.uid).update({\r\n        call_number: call_num,\r\n        part: part,\r\n        sosok: sosok,\r\n      });\r\n      setInfoPop(false);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n    setsubmitLoading(false);\r\n  };\r\n\r\n  if (currentUser) {\r\n    return (\r\n      <>\r\n        {!LeftMenu && (\r\n          <bsIcon.BsList className=\"btn-m-menu\" onClick={onMenuHandler} />\r\n        )}\r\n        {LeftMenu && (\r\n          <bsIcon.BsX className=\"btn-m-close\" onClick={onMenuHandler} />\r\n        )}\r\n        <div className={\"left-nav-menu \" + (LeftMenu && \"on\")}>\r\n          <div className=\"nav-top-box\">\r\n            {!currentUser && (\r\n              <>\r\n                <Link to=\"/login\" onClick={onMenuHandler}>\r\n                  login\r\n                </Link>\r\n                <Link to=\"/join\" onClick={onMenuHandler}>\r\n                  join\r\n                </Link>\r\n              </>\r\n            )}\r\n            {currentUser && (\r\n              <>\r\n                {InfoPop && (\r\n                  <OderModalPopup\r\n                    className=\"call_modify\"\r\n                    style={{\r\n                      top: \"180px\",\r\n                      left: \"155px\",\r\n                      position: \"absolute\",\r\n                    }}\r\n                  >\r\n                    <form className=\"order-form-box\" onSubmit={onSubmitInfo}>\r\n                      <div\r\n                        className=\"input-box\"\r\n                        style={{ marginBottom: \"5px\" }}\r\n                      >\r\n                        <span className=\"tit\">이메일</span>\r\n                        <span>{currentUser.email}</span>\r\n                      </div>\r\n                      <div\r\n                        className=\"input-box\"\r\n                        style={{ marginBottom: \"5px\" }}\r\n                      >\r\n                        <span className=\"tit\">소속</span>\r\n                        <select name=\"sosok\" defaultValue={currentUser.sosok}>\r\n                          <option value=\"\">소속선택</option>\r\n                          <option value=\"1\">미트리</option>\r\n                          <option value=\"2\">푸드킹</option>\r\n                          <option value=\"3\">미에르</option>\r\n                        </select>\r\n                      </div>\r\n                      <div\r\n                        className=\"input-box\"\r\n                        style={{ marginBottom: \"5px\" }}\r\n                      >\r\n                        <span className=\"tit\">부서</span>\r\n                        <PartSelect userPart={userPart} />\r\n                      </div>\r\n                      <div\r\n                        className=\"input-box\"\r\n                        style={{ marginBottom: \"5px\" }}\r\n                      >\r\n                        <span className=\"tit\">휴대전화</span>\r\n                        <Input\r\n                          name=\"call_number\"\r\n                          defaultValue={currentUser.call_number}\r\n                          style={{ marginRight: \"5px\" }}\r\n                        ></Input>\r\n                        <Button\r\n                          disabled={submitLoading}\r\n                          htmlType=\"submit\"\r\n                          type=\"primary\"\r\n                        >\r\n                          수정\r\n                        </Button>\r\n                      </div>\r\n                      <span>'-'이나 공백없이 숫자만 입력해 주세요.</span>\r\n                    </form>\r\n                  </OderModalPopup>\r\n                )}\r\n                <div className=\"flex-box j-center\">\r\n                  <span\r\n                    className=\"p-color-l\"\r\n                    onClick={onChangeInfo}\r\n                    style={{\r\n                      cursor: \"pointer\",\r\n                      fontWeight: \"500\",\r\n                      marginLeft: \"5px\",\r\n                    }}\r\n                  >\r\n                    {currentUser.displayName}\r\n                  </span>\r\n                  님 반갑습니다.\r\n                  <span\r\n                    onClick={onLogout}\r\n                    className=\"p-color-l\"\r\n                    style={{\r\n                      cursor: \"pointer\",\r\n                      marginLeft: \"10px\",\r\n                    }}\r\n                  >\r\n                    logout\r\n                  </span>\r\n                </div>\r\n              </>\r\n            )}\r\n          </div>\r\n          <Menu\r\n            theme={\"light\"}\r\n            onClick={handleClick}\r\n            defaultOpenKeys={[\"sub1\"]}\r\n            selectedKeys={[current]}\r\n            mode=\"inline\"\r\n          >\r\n            <Menu.Item key=\"1\">\r\n              <Link to=\"/\">\r\n                <antIcon.AiOutlineCoffee />\r\n                메뉴판\r\n              </Link>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"2\">\r\n              <Link to=\"/myorder\">\r\n                <antIcon.AiOutlineOrderedList />\r\n                주문내역\r\n              </Link>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"3\">\r\n              <Link to=\"/mymenu\">\r\n                <antIcon.AiOutlineStar />\r\n                마이메뉴\r\n              </Link>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"7\">\r\n              <Link to=\"/lunch\">\r\n                <antIcon.AiOutlineDownSquare />\r\n                식단체크\r\n              </Link>\r\n            </Menu.Item>\r\n\r\n            <Menu.Item key=\"13\">\r\n              <Link to=\"/chair\">\r\n                <mdIcon.MdOutlineChair />\r\n                안마의자\r\n              </Link>\r\n            </Menu.Item>\r\n\r\n            <Menu.Item key=\"15\">\r\n              <Link to=\"/styler\">\r\n                <rmIcon.RiTShirtAirLine />\r\n                스타일러\r\n              </Link>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"17\">\r\n              <Link to=\"/inventory\">\r\n                <mdIcon.MdOutlineInventory />\r\n                재고체크\r\n              </Link>\r\n            </Menu.Item>\r\n            <SubMenu\r\n              key=\"sub1\"\r\n              title=\"관리자\"\r\n              icon={<antIcon.AiOutlineSetting />}\r\n            >\r\n              <Menu.Item key=\"11\">\r\n                <Link to=\"/admin/hair\">\r\n                  <antIcon.AiOutlineScissor />\r\n                  헤어관리\r\n                </Link>\r\n              </Menu.Item>\r\n\r\n              <Menu.Item key=\"14\">\r\n                <Link to=\"/chair_admin\">\r\n                  <mdIcon.MdOutlineChair />\r\n                  안마의자관리\r\n                </Link>\r\n              </Menu.Item>\r\n              <Menu.Item key=\"16\">\r\n                <Link to=\"/styler_admin\">\r\n                  <rmIcon.RiTShirtAirLine />\r\n                  스타일러관리\r\n                </Link>\r\n              </Menu.Item>\r\n              <Menu.Item key=\"8\">\r\n                <Link to=\"/admin/lunch\">\r\n                  <antIcon.AiOutlineAppstoreAdd />\r\n                  식단관리\r\n                </Link>\r\n              </Menu.Item>\r\n              <Menu.Item key=\"4\">\r\n                <Link to=\"/admin/prod\">\r\n                  <antIcon.AiOutlineAppstoreAdd />\r\n                  상품관리\r\n                </Link>\r\n              </Menu.Item>\r\n              <Menu.Item key=\"12\">\r\n                <Link to=\"/admin/prod_count\">\r\n                  <antIcon.AiOutlineAppstoreAdd />\r\n                  카페 재고관리\r\n                </Link>\r\n              </Menu.Item>\r\n              <Menu.Item key=\"5\">\r\n                <Link to=\"/admin/order\">\r\n                  <antIcon.AiOutlineAlert />\r\n                  주문관리\r\n                </Link>\r\n              </Menu.Item>\r\n              <Menu.Item key=\"6\">\r\n                <Link to=\"/admin/order_list\">\r\n                  <antIcon.AiOutlineFileDone />\r\n                  완료내역\r\n                </Link>\r\n              </Menu.Item>\r\n\r\n              <Menu.Item key=\"18\">\r\n                <Link to=\"/admin/inventory\">\r\n                  <mdIcon.MdOutlineInventory2 />\r\n                  비품관리\r\n                </Link>\r\n              </Menu.Item>\r\n              <Menu.Item key=\"0\">\r\n                <Link to=\"/admin/user_admin\">\r\n                  <antIcon.AiOutlineTeam />\r\n                  회원관리\r\n                </Link>\r\n              </Menu.Item>\r\n            </SubMenu>\r\n          </Menu>\r\n          {AbleTime && CurAbleTime && (\r\n            <div className=\"nav-time\">\r\n              <span className={\"current\" + \" state_\" + CurAbleTime}>\r\n                <span>Now</span>\r\n              </span>\r\n              <ul>\r\n                {AbleTime.ableTimeStart && (\r\n                  <li className={CurAbleTime === 1 ? \"cur\" : \"\"}>\r\n                    <span>운영시간</span> - {AbleTime.ableTimeStart}~\r\n                    {AbleTime.ableTimeEnd}\r\n                  </li>\r\n                )}\r\n                {AbleTime.lunchTimeStart && (\r\n                  <li className={CurAbleTime === 2 ? \"cur\" : \"\"}>\r\n                    <span>점심시간</span> - {AbleTime.lunchTimeStart}~\r\n                    {AbleTime.lunchTimeEnd}\r\n                  </li>\r\n                )}\r\n                {AbleTime.breakTimeStart && (\r\n                  <li className={CurAbleTime === 3 ? \"cur\" : \"\"}>\r\n                    <span>브레이크</span> - {AbleTime.breakTimeStart}~\r\n                    {AbleTime.breakTimeEnd}\r\n                  </li>\r\n                )}\r\n              </ul>\r\n            </div>\r\n          )}\r\n        </div>\r\n        <BlackBg className={LeftMenu && \"on\"} onClick={onMenuHandler} />\r\n      </>\r\n    );\r\n  } else {\r\n    return (\r\n      <>\r\n        {!LeftMenu && (\r\n          <bsIcon.BsList className=\"btn-m-menu\" onClick={onMenuHandler} />\r\n        )}\r\n        {LeftMenu && (\r\n          <bsIcon.BsX className=\"btn-m-close\" onClick={onMenuHandler} />\r\n        )}\r\n        <div className={\"left-nav-menu \" + (LeftMenu && \"on\")}>\r\n          <div className=\"nav-top-box\">\r\n            {!currentUser && (\r\n              <>\r\n                <Link to=\"/login\" onClick={onMenuHandler}>\r\n                  login\r\n                </Link>\r\n                <Link to=\"/join\" onClick={onMenuHandler}>\r\n                  join\r\n                </Link>\r\n              </>\r\n            )}\r\n            {currentUser && (\r\n              <>\r\n                <div className=\"flex-box j-center\">\r\n                  {currentUser.displayName}님 반갑습니다.\r\n                  <span\r\n                    class=\"p-color-l\"\r\n                    onClick={onLogout}\r\n                    style={{\r\n                      cursor: \"pointer\",\r\n                      marginLeft: \"10px\",\r\n                    }}\r\n                  >\r\n                    logout\r\n                  </span>\r\n                </div>\r\n              </>\r\n            )}\r\n          </div>\r\n          <Menu\r\n            theme={\"light\"}\r\n            onClick={handleClick}\r\n            defaultOpenKeys={[\"sub1\"]}\r\n            selectedKeys={[current]}\r\n            mode=\"inline\"\r\n          >\r\n            <div\r\n              style={{\r\n                height: \"100%\",\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\",\r\n              }}\r\n            >\r\n              비회원 사용불가\r\n            </div>\r\n          </Menu>\r\n          <BlackBg className={LeftMenu && \"on\"} onClick={onMenuHandler} />\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default Nav;\r\n","D:\\프로젝트\\sy-cafe-order\\src\\component\\MyMenu.js",["293","294","295","296","297","298","299","300","301"],"import React, { useState, useEffect } from \"react\";\r\nimport firebase from \"../firebase\";\r\nimport { ProdList } from \"./Admin/AdminProd\";\r\nimport OderModalPopup from \"./OrderModal\";\r\nimport * as antIcon from \"react-icons/ai\";\r\nimport { commaNumber, getFormatDate } from \"./CommonFunc\";\r\nimport { useSelector } from \"react-redux\";\r\nimport Loading from \"./Loading\";\r\n\r\nconst curDate = getFormatDate(new Date());\r\nfunction MyMenu() {\r\n  const userInfo = useSelector((state) => state.user.currentUser);\r\n\r\n  const [FavorItem, setFavorItem] = useState([]);\r\n  const [ProdItem, setProdItem] = useState([]);\r\n  const [AddFavorItem, setAddFavorItem] = useState([]);\r\n  const [SortItem, setSortItem] = useState(false);\r\n\r\n  const onToggleFavor = (e, name) => {\r\n    e.currentTarget.closest(\".list\").remove();\r\n    e.currentTarget.classList.toggle(\"true\");\r\n    firebase\r\n      .database()\r\n      .ref(\"users\")\r\n      .child(userInfo.uid)\r\n      .child(`favorite/${name}/add_favor`)\r\n      .transaction((pre) => {\r\n        return !pre;\r\n      });\r\n  };\r\n  let b_soldout;\r\n  let m_soldout;\r\n  let m_soldout2;\r\n\r\n  const [TodayLunchCheck, setTodayLunchCheck] = useState();\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    if (mounted) {\r\n      async function getProdItem() {\r\n        let favor = [];\r\n        let favorName = [];\r\n        await firebase\r\n          .database()\r\n          .ref(\"soldout\")\r\n          .once(\"value\")\r\n          .then((snapshot) => {\r\n            b_soldout = snapshot.val()?.b_soldout || \"\";\r\n            m_soldout = snapshot.val()?.MilkSoldout || \"\";\r\n            m_soldout2 = snapshot.val()?.MilkSoldout2 || \"\";\r\n          });\r\n        await firebase\r\n          .database()\r\n          .ref(`users/${userInfo.uid}/favorite`)\r\n          .orderByChild(\"count\")\r\n          .startAt(1)\r\n          .once(\"value\")\r\n          .then((snapshot) => {\r\n            snapshot.forEach(function (item) {\r\n              favorName.push(item.key);\r\n              favor.push({\r\n                name: item.key,\r\n                count: item.val().count,\r\n              });\r\n            });\r\n          });\r\n        setFavorItem(favor);\r\n        await firebase\r\n          .database()\r\n          .ref(\"products\")\r\n          .once(\"value\")\r\n          .then((snapshot) => {\r\n            let array = [];\r\n            snapshot.forEach(function (item) {\r\n              array.push({\r\n                uid: item.key,\r\n                name: item.val().name,\r\n                option: item.val().option,\r\n                kal: item.val().kal,\r\n                hot: item.val().hot,\r\n                milk: item.val().milk,\r\n                category: item.val().category,\r\n                image: item.val().image,\r\n                price: parseInt(item.val().price),\r\n                add: item.val().add,\r\n                b_soldout: b_soldout,\r\n                m_soldout: m_soldout,\r\n                m_soldout2: m_soldout2,\r\n                soldout: item.val().soldout,\r\n                sort_num: item.val().sort_num ? item.val().sort_num : 9999,\r\n                jaego: item.val().jaego\r\n                  ? item.val().jaego\r\n                  : item.val().jaego === 0\r\n                  ? 0\r\n                  : \"\",\r\n              });\r\n            });\r\n            setProdItem(array);\r\n          });\r\n        setSortItem(true);\r\n        if (FavorItem && ProdItem) {\r\n          let array = ProdItem.concat();\r\n          array = array.filter((el) => {\r\n            return favorName.includes(el.name);\r\n          });\r\n          let assignArr = [];\r\n          array.map((el) => {\r\n            favor.map((item) => {\r\n              item.name === el.name && assignArr.push(Object.assign(item, el));\r\n            });\r\n          });\r\n          assignArr.sort((a, b) => {\r\n            if (a.count > b.count) {\r\n              return -1;\r\n            }\r\n            if (a.count < b.count) {\r\n              return 1;\r\n            }\r\n            return 0;\r\n          });\r\n          assignArr = assignArr.slice(0, 10);\r\n          setProdItem(assignArr);\r\n        }\r\n      }\r\n      getProdItem();\r\n      //즐찾\r\n      async function getFavorItem() {\r\n        let addFavor = [];\r\n        let addFavorName = [];\r\n        let array = [];\r\n        await firebase\r\n          .database()\r\n          .ref(`users/${userInfo.uid}/favorite`)\r\n          .orderByChild(\"add_favor\")\r\n          .equalTo(true)\r\n          .once(\"value\")\r\n          .then((snapshot) => {\r\n            snapshot.forEach(function (item) {\r\n              addFavorName.push(item.key);\r\n              addFavor.push({\r\n                name: item.key,\r\n                add_favor: item.val().add_favor,\r\n              });\r\n            });\r\n          });\r\n        await firebase\r\n          .database()\r\n          .ref(\"products\")\r\n          .once(\"value\")\r\n          .then((snapshot) => {\r\n            snapshot.forEach(function (item) {\r\n              array.push({\r\n                uid: item.key,\r\n                name: item.val().name,\r\n                option: item.val().option,\r\n                kal: item.val().kal,\r\n                hot: item.val().hot,\r\n                milk: item.val().milk,\r\n                category: item.val().category,\r\n                image: item.val().image,\r\n                price: parseInt(item.val().price),\r\n                add: item.val().add,\r\n                b_soldout: b_soldout,\r\n                m_soldout: m_soldout,\r\n                m_soldout2: m_soldout2,\r\n                soldout: item.val().soldout,\r\n                sort_num: item.val().sort_num ? item.val().sort_num : 9999,\r\n              });\r\n            });\r\n          });\r\n\r\n        array = array.filter((el) => {\r\n          return addFavorName.includes(el.name);\r\n        });\r\n        array.map((el) => {\r\n          addFavor.map((favor) => {\r\n            favor.name === el.name && Object.assign(favor, el);\r\n          });\r\n          return addFavor;\r\n        });\r\n        array.sort((a, b) => {\r\n          return a.sort_num - b.sort_num;\r\n        });\r\n        setAddFavorItem(array);\r\n      }\r\n      getFavorItem();\r\n    }\r\n    return function cleanup() {\r\n      mounted = false;\r\n    };\r\n  }, [SortItem]);\r\n\r\n  const [PosX, setPosX] = useState(0);\r\n  const [PosY, setPosY] = useState(0);\r\n  const [OnModal, setOnModal] = useState(false);\r\n  const [OrderItem, setOrderItem] = useState();\r\n  const orderHandler = (e, item) => {\r\n    /*\r\n    if(TodayLunchCheck && !TodayLunchCheck.confirm){\r\n      alert('식단체크를 먼저 해야 주문이 가능합니다.');\r\n      return;\r\n    }\r\n    */\r\n    if (e.target.tagName !== \"svg\" && e.target.tagName !== \"path\") {\r\n      if (b_soldout === false) {\r\n        item.add = \"\";\r\n      }\r\n      setOrderItem(item);\r\n      setPosX(e.clientX);\r\n      setPosY(e.clientY);\r\n      setOnModal(true);\r\n    }\r\n  };\r\n\r\n  const onFinished = () => {\r\n    setOnModal(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"title\">즐겨찾기 메뉴</h3>\r\n      {AddFavorItem ? (\r\n        <ProdList>\r\n          {AddFavorItem.map((item, index) => (\r\n            <div\r\n              style={{ cursor: \"pointer\", position: \"relative\" }}\r\n              className={`ani-fadein list delay-${index}`}\r\n              key={index}\r\n            >\r\n              {item.soldout === false && (\r\n                <div\r\n                  style={{\r\n                    width: \"100%\",\r\n                    height: \"100%\",\r\n                    position: \"absolute\",\r\n                    left: \"0\",\r\n                    top: \"0\",\r\n                    display: \"flex\",\r\n                    fontSize: \"14px\",\r\n                    color: \"#fff\",\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"center\",\r\n                    background: \"rgba(0,0,0,0.5)\",\r\n                    zIndex: \"10\",\r\n                  }}\r\n                >\r\n                  sold out\r\n                </div>\r\n              )}\r\n              <div className=\"img\" onClick={(e) => orderHandler(e, item)}>\r\n                <span style={{ opacity: \"0.85\" }} className=\"kal\">\r\n                  {item.kal}kal\r\n                </span>\r\n                <img src={item.image} alt=\"\" />\r\n              </div>\r\n              <div className=\"user-box\" onClick={(e) => orderHandler(e, item)}>\r\n                <div className=\"txt\" style={{ padding: \"0 5px\" }}>\r\n                  <div className=\"flex-box between\">\r\n                    <span className=\"name\">\r\n                      {item.name}\r\n                      <span className=\"hidden\">{item.uid}</span>\r\n                      {item.jaego > 0 && item.jaego < 6 && (\r\n                        <div style={{ fontSize: \"12px\", color: \"red\" }}>\r\n                          품절임박 - 잔여수량 : {item.jaego}\r\n                        </div>\r\n                      )}\r\n                    </span>\r\n                    <span\r\n                      className=\"ic-favor true p-color\"\r\n                      onClick={(e) => {\r\n                        onToggleFavor(e, item.name);\r\n                      }}\r\n                    >\r\n                      <antIcon.AiFillStar className=\"favor\" />\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"flex-box between a-center\">\r\n                    <span className=\"hot\">{item.hot}</span>\r\n                    <span\r\n                      style={{\r\n                        textDecoration: \"line-through\",\r\n                        color: \"#888\",\r\n                      }}\r\n                      className=\"price\"\r\n                    >\r\n                      {commaNumber(item.price)}원\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </ProdList>\r\n      ) : (\r\n        <>\r\n          <Loading />\r\n        </>\r\n      )}\r\n      <h3 className=\"title\" style={{ marginTop: \"30px\" }}>\r\n        내가 많이 주문한 메뉴 TOP 10\r\n      </h3>\r\n      {SortItem ? (\r\n        <ProdList>\r\n          {ProdItem.map((item, index) => (\r\n            <div\r\n              style={{ cursor: \"pointer\", position: \"relative\" }}\r\n              className={`ani-fadein list delay-${index}`}\r\n              key={index}\r\n            >\r\n              {item.soldout === false && (\r\n                <div\r\n                  style={{\r\n                    width: \"100%\",\r\n                    height: \"100%\",\r\n                    position: \"absolute\",\r\n                    left: \"0\",\r\n                    top: \"0\",\r\n                    display: \"flex\",\r\n                    fontSize: \"14px\",\r\n                    color: \"#fff\",\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"center\",\r\n                    background: \"rgba(0,0,0,0.5)\",\r\n                    zIndex: \"100\",\r\n                  }}\r\n                >\r\n                  sold out\r\n                </div>\r\n              )}\r\n              <div className=\"img\" onClick={(e) => orderHandler(e, item)}>\r\n                <span style={{ opacity: \"0.85\" }} className=\"kal\">\r\n                  {item.kal}kal\r\n                </span>\r\n                <span\r\n                  style={{\r\n                    position: \"absolute\",\r\n                    left: \"0\",\r\n                    top: \"0\",\r\n                    zIndex: \"10\",\r\n                    padding: \"0 7px\",\r\n                    height: \"26px\",\r\n                    background: \"#333\",\r\n                    textAlign: \"center\",\r\n                    lineHeight: \"26px\",\r\n                    fontSize: \"12px\",\r\n                    borderBottomRightRadius: \"6px\",\r\n                    color: \"#fff\",\r\n                  }}\r\n                >\r\n                  {index + 1}위\r\n                  <span style={{ fontSize: \"11px\" }}>\r\n                    {\" \"}\r\n                    ({item.count}회 주문)\r\n                  </span>\r\n                </span>\r\n                <img src={item.image} alt=\"\" />\r\n              </div>\r\n              <div className=\"user-box\" onClick={(e) => orderHandler(e, item)}>\r\n                <div className=\"txt\" style={{ padding: \"0 5px\" }}>\r\n                  <span className=\"name\">\r\n                    {item.name}\r\n                    <span className=\"hidden\">{item.uid}</span>\r\n                    {item.jaego > 0 && item.jaego < 6 && (\r\n                      <div style={{ fontSize: \"12px\", color: \"red\" }}>\r\n                        품절임박 - 잔여수량 : {item.jaego}\r\n                      </div>\r\n                    )}\r\n                  </span>\r\n                  <div className=\"flex-box between a-center\">\r\n                    <span className=\"hot\">{item.hot}</span>\r\n                    <span\r\n                      style={{\r\n                        textDecoration: \"line-through\",\r\n                        color: \"#888\",\r\n                      }}\r\n                      className=\"price\"\r\n                    >\r\n                      {commaNumber(item.price)}원\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </ProdList>\r\n      ) : (\r\n        <>\r\n          <Loading />\r\n        </>\r\n      )}\r\n      {OnModal && (\r\n        <OderModalPopup\r\n          onFinished={onFinished}\r\n          posx={PosX}\r\n          posy={PosY}\r\n          OrderItem={OrderItem}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default MyMenu;\r\n","D:\\프로젝트\\sy-cafe-order\\src\\component\\LunchCheck.js",["302","303","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","320","321","322","323","324","325","326","327","328","329","330"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport { getFormatDate } from './CommonFunc';\r\nimport { Checkbox, Button, Modal, message } from \"antd\";\r\nimport firebase from \"../firebase\";\r\nimport { useSelector } from \"react-redux\";\r\nimport * as antIcon from \"react-icons/ai\";\r\n\r\n\r\n\r\n\r\nfunction LunchCheck() {\r\n  const userInfo = useSelector((state) => state.user.currentUser);\r\n  const curDate = getFormatDate(new Date());\r\n  const weekNum = curDate.weekNum;\r\n  let date = new Date();\r\n  let hour = date.getHours();\r\n  let min = date.getMinutes();\r\n  min = min < 10 ? '0'+min : min;\r\n  let limitTime = ''+hour+min;\r\n  new Date(date.setDate(date.getDate() - weekNum + 7));\r\n  let curWeekArr = [];\r\n  let i = 0;\r\n  while(i < 7){\r\n    curWeekArr.push(getFormatDate(new Date(date.setDate(date.getDate() - 1))));\r\n    i++;\r\n  }\r\n  curWeekArr = curWeekArr.sort((a,b) => {\r\n    if(a.full < b.full){\r\n      return -1;\r\n    }\r\n  });\r\n  curWeekArr.pop();\r\n  curWeekArr.shift();\r\n  \r\n  date = new Date();\r\n  new Date(date.setDate(date.getDate() - weekNum));\r\n  let prevWeekArr = [];\r\n  let n = 0;\r\n  while(n < 7){\r\n    prevWeekArr.push(getFormatDate(new Date(date.setDate(date.getDate() - 1))));\r\n    n++;\r\n  }\r\n  prevWeekArr = prevWeekArr.sort((a,b) => {\r\n    if(a.full < b.full){\r\n      return -1;\r\n    }\r\n  });\r\n  prevWeekArr.pop();\r\n  prevWeekArr.shift();\r\n  \r\n  date = new Date();\r\n  new Date(date.setDate(date.getDate() + (6-weekNum)));\r\n  let nextWeekArr = [];\r\n  let j = 0;\r\n  while(j < 14){\r\n    if(j==6){\r\n      nextWeekArr.push(getFormatDate(new Date(date.setDate(date.getDate() + 3))));\r\n    }else{\r\n      nextWeekArr.push(getFormatDate(new Date(date.setDate(date.getDate() + 1))));\r\n    }\r\n    \r\n    j++;\r\n  }\r\n  nextWeekArr.pop();\r\n  nextWeekArr.pop();\r\n  nextWeekArr.pop();\r\n  nextWeekArr.shift();\r\n\r\n  \r\n  const weekList = useRef();\r\n  const weekList2 = useRef();\r\n  const weekList3 = useRef();\r\n  \r\n  const [ItemList, setItemList] = useState();\r\n  const [UserList, setUserList] = useState();\r\n  const [ItemInfo, setItemInfo] = useState();\r\n  const [PrevState, setPrevState] = useState()\r\n  const [CurState, setCurState] = useState()\r\n  const [NextState, setNextState] = useState()\r\n\r\n  useEffect(() => {\r\n\r\n      firebase.database().ref('lunch/item')\r\n      .on('value', (snapshot) => {\r\n        let arr = [];\r\n        snapshot.forEach(el => {\r\n          arr.push(el.val())\r\n        })\r\n        setItemList(arr)\r\n      });\r\n      firebase.database().ref('lunch/info')\r\n      .on('value', (snapshot) => {\r\n        setItemInfo(snapshot.val())        \r\n      });\r\n      firebase.database().ref(`lunch/user/${userInfo.uid}/checkList`)\r\n      .on('value', (snapshot) => {\r\n        let arr = [];\r\n        snapshot.forEach(el => {\r\n          console.log(el.val())\r\n          arr.push({\r\n            date: el.val().date,\r\n            item: el.val().item,\r\n            confirm: el.val().confirm ? el.val().confirm : '',\r\n            admin_check: el.val().admin_check ? el.val().admin_check : false,\r\n          })\r\n        })\r\n        setUserList(arr);\r\n        prevWeekArr.map((el,idx) => {\r\n          arr.map((list,idx) => {\r\n            if(el.full == list.date){\r\n              el.item = list.item ? list.item.join(',') : '';\r\n              el.confirm = list.confirm;\r\n            }\r\n          })\r\n        })\r\n        curWeekArr.map((el,idx) => {\r\n          arr.map((list,idx) => {\r\n            if(el.full == list.date){\r\n              el.item = list.item ? list.item.join(',') : '';\r\n              el.confirm = list.confirm;\r\n              el.admin_check = list.admin_check;\r\n            }\r\n          })\r\n        })\r\n        nextWeekArr.map((el,idx) => {\r\n          arr.map((list,idx) => {\r\n            if(el.full == list.date){\r\n              el.item = list.item ? list.item.join(',') : '';\r\n              el.confirm = list.confirm;\r\n            }\r\n          })\r\n        })\r\n        \r\n        \r\n        setPrevState(prevWeekArr);\r\n        setCurState(curWeekArr);\r\n        setNextState(nextWeekArr);\r\n      })\r\n      \r\n    \r\n  \r\n\r\n    return () => {\r\n      firebase.database().ref('lunch/item').off();\r\n      firebase.database().ref(`lunch/user/${userInfo.uid}/checkList`).off();\r\n    }\r\n  }, []);\r\n\r\n\r\n  const [LunchImg, setLunchImg] = useState()\r\n  const [LunchImgVisible, setLunchImgVisible] = useState(false)\r\n  useEffect(() => {\r\n    firebase.database().ref('lunch/img')\r\n    .on(\"value\",data => {\r\n      setLunchImg(data.val())\r\n    })\r\n    return () => {\r\n      firebase.database().ref('lunch/img').off()\r\n    }\r\n  }, [])\r\n  const onLunchImg = () => {\r\n    setLunchImgVisible(true)\r\n  }\r\n  const LunchImgCancel = () => {\r\n    setLunchImgVisible(false)\r\n  }\r\n\r\n  const onsubmit = () => {\r\n    let list = [...weekList.current.querySelectorAll('li'),...weekList2.current.querySelectorAll('li'),...weekList3.current.querySelectorAll('li')];    \r\n    let checkList = {};\r\n    list.map(el => {\r\n      let check = [...el.querySelectorAll('input[type=checkbox]:checked')];\r\n      let confirm = el.querySelector('input[type=hidden]');\r\n      \r\n      check = check.map(el=>el.dataset.value)\r\n      checkList[el.dataset.date] = {\r\n        item: check,\r\n        date:el.dataset.date,\r\n        confirm:confirm.value\r\n      }        \r\n    })\r\n    \r\n    firebase.database().ref(`lunch/user/${userInfo.uid}`)\r\n    .update({\r\n      checkList,\r\n      name : userInfo.displayName,\r\n      part : userInfo.photoURL\r\n    })\r\n    message.success('적용되었습니다 :)');\r\n    setModifyState(false)\r\n  }\r\n\r\n  const onTodayCheck = (date) => {\r\n    firebase.database().ref(`lunch/user/${userInfo.uid}/checkList/${date}`)\r\n    .update({\r\n      confirm:1\r\n    })\r\n  }\r\n\r\n  const [ModifyState, setModifyState] = useState(false)\r\n  const onModify = () => {\r\n    setModifyState(true)\r\n  }\r\n\r\n  const onCancel = () => {\r\n    setModifyState(false)\r\n  }\r\n  \r\n\r\n  return (\r\n    <>\r\n      <div className=\"item-info-box\">\r\n        {ItemInfo && \r\n          <pre>{ItemInfo}</pre>\r\n        }\r\n      </div>\r\n      <ul className=\"week_list\" ref={weekList}>\r\n        {PrevState && PrevState.map((el,idx) => (\r\n          <li key={idx} data-date={el.full}>\r\n            <input type=\"hidden\" name=\"check\" value={el.confirm ? el.confirm : \"\"} />\r\n              <span className=\"date\">\r\n                {`${el.month}.${el.day}(${el.week})`}\r\n              </span>\r\n              {!ModifyState &&\r\n                <>\r\n                  <div className=\"item-info\">\r\n                    {`${el.item ? el.item : ''}`}\r\n                  </div>\r\n                  <div className=\"confirm-info\">\r\n                  {el.full != curDate.full &&\r\n                    <>\r\n                      {el.confirm ? <span>확인완료</span> : <span>미확인</span>} \r\n                    </>\r\n                  }\r\n                  </div>\r\n                </> \r\n              }\r\n            <div className={`check-list-box ${ModifyState && 'modify'}`}>\r\n              {ItemList && ModifyState && \r\n              ItemList.map((list,l_idx) => (\r\n                <>\r\n                {userInfo.auth && userInfo.auth == 'alba' && ItemList.length == l_idx+1 ? (\r\n                  <></>\r\n                ) : (\r\n                  <Checkbox key={l_idx} data-value={list} disabled defaultChecked={el.item && el.item.includes(list) ? true : false}>{list}</Checkbox>\r\n                )}\r\n                </>\r\n              ))                  \r\n              }\r\n            </div>  \r\n          </li>\r\n        ))}\r\n      </ul>\r\n      <ul className=\"week_list\" ref={weekList2}>\r\n        {CurState && CurState.map((el,idx) => (\r\n          <li key={idx} data-date={el.full} className={el.full == curDate.full ? 'today' : ''}>\r\n            <span className=\"date\">\r\n                {`${el.month}.${el.day}(${el.week})`}\r\n            </span>\r\n            {!ModifyState &&\r\n              <>\r\n              <div className=\"item-info\">\r\n                    {`${el.item ? el.item : ''}`}\r\n                  </div>\r\n                \r\n              <div className=\"confirm-info\">\r\n              {el.confirm && <span>확인완료</span>}\r\n              {el.admin_check && <>(관리자)</>}\r\n              {el.full != curDate.full && !el.confirm &&\r\n                <span>미확인</span>\r\n              }\r\n              </div>\r\n                \r\n              {el.full == curDate.full &&\r\n                <>\r\n                {!el.confirm && \r\n                <>\r\n                  <Button type=\"primary\" disabled={!el.item ? true : limitTime < 930 ? false : true}  onClick={()=>{onTodayCheck(el.full)}}>\r\n                    {el.item ? '식단확인' : '확인불가'}\r\n                  </Button>\r\n                </>\r\n                }\r\n                </>\r\n              }\r\n              </> \r\n            } \r\n            <div className={`check-list-box ${ModifyState && 'modify'}`}>\r\n              {ItemList && ModifyState && \r\n              ItemList.map((list,l_idx) => (\r\n                <>\r\n                  {userInfo.auth && userInfo.auth == 'alba' && ItemList.length == l_idx+1 ? (\r\n                  <></>\r\n                ) : (\r\n                  <Checkbox key={l_idx} data-value={list} disabled={\r\n                    el.full > curDate.full ? \r\n                    false : el.full == curDate.full && limitTime < 930 ? false : true\r\n                  } defaultChecked={el.item && el.item.includes(list) ? true : false}>{list}</Checkbox>\r\n                )}\r\n              </>\r\n              ))            \r\n              }\r\n            </div>\r\n            <input type=\"hidden\" name=\"check\" value={el.confirm ? el.confirm : \"\"} />            \r\n          </li>\r\n        ))}\r\n      </ul>  \r\n\r\n      <ul className=\"week_list next\" ref={weekList3}>\r\n        {NextState && NextState.map((el,idx) => (\r\n          <li key={idx} data-date={el.full}>\r\n          <input type=\"hidden\" name=\"check\" value={el.confirm ? el.confirm : \"\"} />\r\n            <span className=\"date\">\r\n              {`${el.month}.${el.day}(${el.week})`}\r\n            </span>\r\n            {!ModifyState &&\r\n              <>\r\n                <div className=\"item-info\">\r\n                    {`${el.item ? el.item : ''}`}\r\n                  </div>\r\n                <div className=\"confirm-info\">\r\n                {el.full != curDate.full &&\r\n                  <>\r\n                    {el.confirm ? <span>확인완료</span> : <span>미확인</span>} \r\n                  </>\r\n                }\r\n                </div>\r\n              </> \r\n            }\r\n          <div className={`check-list-box ${ModifyState && 'modify'}`}>\r\n            {ItemList && ModifyState && \r\n            ItemList.map((list,l_idx) => (\r\n              <>\r\n                {userInfo.auth && userInfo.auth == 'alba' && ItemList.length == l_idx+1 ? (\r\n                  <></>\r\n                ) : (\r\n                <Checkbox key={l_idx} data-value={list} defaultChecked={el.item && el.item.includes(list) ? true : false}>{list}</Checkbox>    \r\n                )}\r\n              </>\r\n            ))                  \r\n            }\r\n          </div>  \r\n        </li>\r\n        ))}\r\n      </ul>  \r\n     \r\n      <div className=\"lunch-btn-box\">\r\n        {LunchImg && \r\n          <>\r\n            <Button style={{marginRight:\"5px\"}} onClick={onLunchImg}>\r\n              식단표\r\n            </Button>\r\n            <Modal title=\"식단표\" \r\n            visible={LunchImgVisible} \r\n            footer={null}\r\n            width=\"auto\"\r\n            centered\r\n            className=\"lunch-img-modal\"\r\n            onCancel={LunchImgCancel}>\r\n              <img src={LunchImg.img.url} />\r\n            </Modal>\r\n          </>\r\n        }\r\n        {!ModifyState &&\r\n          <Button type=\"primary\" onClick={onModify}>수정하기</Button>\r\n        }\r\n        {ModifyState &&\r\n          <>\r\n          <Button type=\"primary\" onClick={onsubmit}>적용하기</Button>\r\n          <Button style={{marginLeft:\"5px\"}} onClick={onCancel}>취소</Button>\r\n          </>\r\n        }\r\n      </div>\r\n\r\n      \r\n    </>\r\n  )\r\n}\r\n\r\nexport default LunchCheck\r\n","D:\\프로젝트\\sy-cafe-order\\src\\component\\Test.js",["331","332"],"import React, { useState, useEffect } from \"react\";\r\nimport SignaturePad from \"signature_pad\";\r\n\r\nfunction Test() {\r\n  useEffect(() => {\r\n    var canvas = document.getElementById(\"signature-pad\");\r\n    var signaturePad = new SignaturePad(canvas, {\r\n      backgroundColor: \"rgb(255, 255, 255)\" // necessary for saving image as JPEG; can be removed is only saving as PNG or SVG\r\n    });\r\n\r\n    return () => {};\r\n  }, []);  \r\n  return (\r\n    <>\r\n      <canvas\r\n        id=\"signature-pad\"\r\n        className=\"signature-pad\"\r\n        width={400}\r\n        height={200}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Test\r\n","D:\\프로젝트\\sy-cafe-order\\src\\component\\Admin\\AdminOrder.js",["333","334"],"import React, { useState, useEffect } from \"react\";\r\nimport { Button, message, Radio } from \"antd\";\r\nimport styled from \"styled-components\";\r\nimport firebase from \"../../firebase\";\r\nimport { commaNumber, notify, getFormatDate } from \"../CommonFunc\";\r\nimport { Howl } from \"howler\";\r\nimport { BsPhone } from \"react-icons/bs\";\r\nimport axios from \"axios\";\r\nimport src1 from \"../../jumun.mp3\";\r\nimport src2 from \"../../jumun2.mp3\";\r\nimport src3 from \"../../jumun3.mp3\";\r\nimport src4 from \"../../jumun4.mp3\";\r\nimport src5 from \"../../pling.mp3\";\r\nimport src6 from \"../../dding.mp3\";\r\nimport src7 from \"../../alert.mp3\";\r\n\r\nexport const OrderBox = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  .list {\r\n    &.user {\r\n      position: relative;\r\n      padding-left: 80px;\r\n      .order-prod-img {\r\n        width: 55px;\r\n        height: 55px;\r\n        border-radius: 50%;\r\n        overflow: hidden;\r\n        position: absolute;\r\n        left: 15px;\r\n        top: 50%;\r\n        transform: translateY(-50%);\r\n        &.no-img {\r\n          border: 1px solid #ededed;\r\n        }\r\n        img {\r\n          height: 100%;\r\n          position: absolute;\r\n          left: 50%;\r\n          transform: translateX(-50%);\r\n        }\r\n      }\r\n      .btn-cancel {\r\n        margin-right: 5px;\r\n      }\r\n    }\r\n    .ic-hot,\r\n    .ic-ice {\r\n      display: inline-block;\r\n      width: 12px;\r\n      height: 12px;\r\n      border-radius: 50%;\r\n      opacity: 0.4;\r\n      margin-right: 10px;\r\n      position: relative;\r\n      top: 1px;\r\n    }\r\n    .ic-hot {\r\n      background: #f02424;\r\n    }\r\n    .ic-ice {\r\n      background: #1890ff;\r\n    }\r\n    color: #888;\r\n    &.state_0 {\r\n      .ic-hot,\r\n      .ic-ice {\r\n        opacity: 0.85;\r\n      }\r\n      color: #555;\r\n      border-color: #e6f7ff;\r\n      .info {\r\n        color: #111;\r\n        font-weight: 500;\r\n      }\r\n    }\r\n    &.state_1 {\r\n      .ic-hot,\r\n      .ic-ice {\r\n        opacity: 1;\r\n      }\r\n      .info {\r\n        color: #111;\r\n        font-weight: 500;\r\n      }\r\n    }\r\n    .from {\r\n      border-bottom: 1px solid #ddd;\r\n      height: 30px;\r\n    }\r\n    .shrink-0 {\r\n      flex-shrink: 0;\r\n    }\r\n    diplay: flex;\r\n    flex-direction: column;\r\n    padding: 10px;\r\n    border: 1px solid #ddd;\r\n    border-radius: 10px;\r\n    width: calc(50% - 10px);\r\n    margin: 5px;\r\n    .from {\r\n      margin-bottom: 5px;\r\n    }\r\n    .date {\r\n      font-size: 12px;\r\n    }\r\n    .info-box {\r\n      display: flex;\r\n      min-height: 30px;\r\n      align-items: center;\r\n      .info {\r\n        margin-right: 7px;\r\n      }\r\n      .ant-btn {\r\n        height: 28px;\r\n        padding: 0 7px;\r\n        line-height: 1;\r\n        span {\r\n          height: 100%;\r\n          line-height: 28px;\r\n          font-size: 12px;\r\n        }\r\n      }\r\n    }\r\n    & > div {\r\n      display: flex;\r\n      justify-content: space-between;\r\n      align-items: center;\r\n      width: 100%;\r\n      padding: 0 4px;\r\n    }\r\n  }\r\n  @media all and (max-width: 1200px) {\r\n    .list {\r\n      width: 100%;\r\n      margin: 5px 0;\r\n      &.user {\r\n        padding-left: 76px;\r\n        .order-prod-img {\r\n          width: 52px;\r\n          height: 52px;\r\n          border-radius: 50%;\r\n          overflow: hidden;\r\n          position: absolute;\r\n          left: 13px;\r\n        }\r\n        .btn-cancel {\r\n          height: 28px;\r\n          font-size: 12px;\r\n          padding: 0 10px;\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nfunction AdminOrder() {\r\n  const [SoundSelect, setSoundSelect] = useState();\r\n  useEffect(() => {\r\n    firebase\r\n      .database()\r\n      .ref(\"order_sound\")\r\n      .child(\"sound\")\r\n      .once(\"value\")\r\n      .then((snapshot) => {\r\n        setSoundSelect(snapshot.val());\r\n      });\r\n  }, []);\r\n  const onSoundChange = (e) => {\r\n    setSoundSelect(e.target.value);\r\n    SoundSelect && Sound.play();\r\n    firebase.database().ref(\"order_sound\").update({ sound: e.target.value });\r\n  };\r\n\r\n  const Sound = new Howl({\r\n    src: [SoundSelect],\r\n  });\r\n\r\n  const [OrderList, setOrderList] = useState([]);\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    if (mounted) {\r\n      firebase\r\n        .database()\r\n        .ref(\"order\")\r\n        .orderByChild(\"order_state\")\r\n        .endAt(1)\r\n        .on(\"value\", (snapshot) => {\r\n          let array = [];\r\n          snapshot.forEach(function (item) {\r\n            // if(item.val().category !== '셀프'){\r\n            //   array.push({\r\n            //     ...item.val(),\r\n            //     key: item.key,\r\n            //   });\r\n            // }\r\n            array.push({\r\n              ...item.val(),\r\n              key: item.key,\r\n            });\r\n          });\r\n          // eslint-disable-next-line array-callback-return\r\n          array.sort((a, b) => {\r\n            if (a.timestamp > b.timestamp) {\r\n              return 1;\r\n            }\r\n            if (a.timestamp < b.timestamp) {\r\n              return -1;\r\n            }\r\n          });\r\n          setOrderList(array);\r\n        });\r\n    }\r\n    return function cleanup() {\r\n      firebase.database().ref(\"order\").off();\r\n      mounted = false;\r\n    };\r\n  }, []);\r\n\r\n  const [OrderCount, setOrderCount] = useState();\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    if (mounted) {\r\n      firebase\r\n        .database()\r\n        .ref(\"order_count\")\r\n        .on(\"value\", (snapshot) => {\r\n          setOrderCount(snapshot.val());\r\n          if (OrderList.length > 0) {\r\n            SoundSelect && Sound.play();\r\n            notify(\"새 주문이 들어왔습니다.\");\r\n          }\r\n        });\r\n    }\r\n\r\n    return function cleanup() {\r\n      firebase.database().ref(\"order_count\").off();\r\n      mounted = false;\r\n    };\r\n  }, [OrderCount]);\r\n\r\n  const stateChange = (key) => {\r\n    firebase\r\n      .database()\r\n      .ref(`order/${key}`)\r\n      .child(\"order_state\")\r\n      .transaction((pre) => {\r\n        return pre + 1;\r\n      });\r\n  };\r\n  const stateChange2 = (key) => {\r\n    firebase\r\n      .database()\r\n      .ref(`order/${key}`)\r\n      .child(\"order_state\")\r\n      .transaction((pre) => {\r\n        return pre + 1;\r\n      });\r\n  };\r\n\r\n  const kakaoSend = (key) => {\r\n    let time = getFormatDate(new Date(key.order_time.split(\"|\")[0]));\r\n    time = time.full + time.hour + time.min + time.sec;\r\n    let url =\r\n      \"https://metree.co.kr/_sys/_xml/order_kakao.php?order_tel=\" +\r\n      key.order_phone +\r\n      \"&goods_name=\" +\r\n      key.prod_name +\r\n      \"&order_time=\" +\r\n      time;\r\n\r\n    //window.open(url,'kakao',\"height=1,width=1\");\r\n\r\n    fetch(url)\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(response.statusText);\r\n        }\r\n        message.success(\"카톡알림이 발송되었습니다.\");\r\n        return response;\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n\r\n    return;\r\n  };\r\n\r\n  const orderCancel = (key, uid) => {\r\n    if (window.confirm(\"주문 취소 하시겠습니까?\")) {\r\n      firebase.database().ref(\"order\").child(key).remove();\r\n      firebase\r\n        .database()\r\n        .ref(\"products\")\r\n        .child(uid)\r\n        .transaction((pre) => {\r\n          if (pre.jaego >= 0) {\r\n            pre.jaego++;\r\n            return pre;\r\n          }\r\n        });\r\n      message.success(\"주문이 취소되었습니다.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"title\">주문관리</h3>\r\n      <div style={{ marginBottom: \"15px\" }}>\r\n        <Radio.Group onChange={onSoundChange} value={SoundSelect}>\r\n          <Radio.Button value=\"\">무음</Radio.Button>\r\n          <Radio.Button value={src1}>주문-여자</Radio.Button>\r\n          <Radio.Button value={src2}>주문-남자</Radio.Button>\r\n          <Radio.Button value={src3}>주문-여자아이</Radio.Button>\r\n          <Radio.Button value={src4}>주문-남자아이</Radio.Button>\r\n          <Radio.Button value={src5}>효과음1</Radio.Button>\r\n          <Radio.Button value={src6}>효과음2</Radio.Button>\r\n          <Radio.Button value={src7}>효과음3</Radio.Button>\r\n        </Radio.Group>\r\n      </div>\r\n      <OrderBox className=\"order-list-box\">\r\n        {OrderList.map((list, index) => (\r\n          <div\r\n            className={`list state_${list.order_state} ${\r\n              list.category === \"셀프\" ? \"self\" : \"\"\r\n            }`}\r\n            key={index}\r\n          >\r\n            <span style={{ display: \"none\" }}>{list.key}</span>\r\n            <div className=\"from\">\r\n              <span className=\"flex-box a-center\">\r\n                {list.order_name}\r\n                <span\r\n                  style={{\r\n                    marginLeft: \"5px\",\r\n                    display: \"flex\",\r\n                    alignItems: \"center\",\r\n                    fontWeight: \"500\",\r\n                  }}\r\n                >\r\n                  <BsPhone style={{ marginRight: \"3px\" }} />\r\n                  {list.order_phone &&\r\n                    list.order_phone.substr(list.order_phone.length - 4, 4)}\r\n                </span>\r\n              </span>\r\n              <span style={{ flexShrink: \"0\" }}>{list.order_part}</span>\r\n            </div>\r\n            <div className=\"prod\">\r\n              <div className=\"info-box\">\r\n                <span className=\"info\">\r\n                  {list.category === \"셀프\" && <>(셀프)</>}\r\n                  {list.prod_name}\r\n                  {list.prod_option ? `-${list.prod_option}` : \"\"}\r\n                </span>\r\n                {list.hot === \"hot\" ? (\r\n                  <span className=\"ic-hot shrink-0\"></span>\r\n                ) : list.hot === \"ice\" ? (\r\n                  <span className=\"ic-ice shrink-0\"></span>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n                {/* <span className=\"info shrink-0\">{list.amount}개</span> */}\r\n                {list.add && <span className=\"info shrink-0\">{list.add}</span>}\r\n                {list.add2 && list.add2[0] && (\r\n                  <span className=\"info shrink-0\">{list.add2[0]}</span>\r\n                )}\r\n                {list.add2 && list.add2[1] && (\r\n                  <span className=\"info shrink-0\">{list.add2[1]}</span>\r\n                )}\r\n                {list.milk && (\r\n                  <span className=\"info shrink-0\">{list.milk}</span>\r\n                )}\r\n              </div>\r\n              <span className=\"shrink-0\">\r\n                {commaNumber(parseInt(list.price))}원\r\n              </span>\r\n            </div>\r\n            <div style={{ color: \"red\", fontWeight: \"500\" }}>\r\n              {list.order_etc && list.order_etc}\r\n            </div>\r\n            <div className=\"state\">\r\n              <span className=\"date\">{list.order_time}</span>\r\n              <div>\r\n                {list.order_state === 0 && (\r\n                  <>\r\n                    <Button\r\n                      style={{ marginRight: \"5px\" }}\r\n                      onClick={() => {\r\n                        orderCancel(list.key, list.prod_uid);\r\n                      }}\r\n                    >\r\n                      주문취소\r\n                    </Button>\r\n                    <Button\r\n                      onClick={() => {\r\n                        stateChange(list.key);\r\n                      }}\r\n                    >\r\n                      주문접수\r\n                    </Button>\r\n                  </>\r\n                )}\r\n                {list.order_state === 1 && (\r\n                  <Button\r\n                    onClick={() => {\r\n                      stateChange2(list.key);\r\n                      kakaoSend(list);\r\n                    }}\r\n                  >\r\n                    완료처리\r\n                  </Button>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </OrderBox>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default AdminOrder;\r\n","D:\\프로젝트\\sy-cafe-order\\src\\component\\LogoImg.js",["335","336"],"import { useEffect, useState } from \"react\";\r\nimport logo from \"../img/logo.png\";\r\nimport styled from \"styled-components\";\r\nconst ImgBox = styled.img`\r\n  max-width: 150px;\r\n`;\r\n\r\nexport default function LogoImg() {\r\n  return <ImgBox className=\"top-logo\" src={logo} alt=\"\" />;\r\n}\r\n","D:\\프로젝트\\sy-cafe-order\\src\\component\\AuthPop.js",["337","338","339","340"],"import React, {useState,useEffect} from 'react';\r\nimport { useSelector } from \"react-redux\";\r\nimport { getFormatDate } from '../component/CommonFunc';\r\n\r\nfunction AuthPop({authPopToggle}) {\r\n  const userInfo = useSelector((state) => state.user.currentUser);\r\n  let date = getFormatDate(new Date());\r\n  const [curTime, setCurTime] = useState()\r\n  useEffect(() => {  \r\n    const dateFull = setInterval(() => {\r\n      date = getFormatDate(new Date())\r\n      setCurTime(`${date.full_} ${date.hour}:${date.min}:${date.sec}`);\r\n    }, 1000);\r\n    return (() => clearInterval(dateFull))\r\n  }, [])\r\n  \r\n  return (\r\n    <div className=\"auth_pop\">\r\n      <div className=\"bg\" onClick={authPopToggle}>\r\n      </div>\r\n      {userInfo &&\r\n        <div className=\"auth_card\">\r\n          {\r\n            userInfo.welfare_able === false ? \r\n            (<div className='able_box disable'>\r\n              이용불가\r\n            </div>)\r\n             : \r\n            (<div className='able_box able'>\r\n             이용가능\r\n           </div>)\r\n          }\r\n          <h3>{userInfo.displayName}</h3>\r\n          <div className='info'>\r\n            <dl>\r\n              <dt>소속</dt>\r\n              <dd>{\r\n                userInfo.sosok == '1' ? '미트리(주)' :\r\n                userInfo.sosok == '2' ? '주식회사 푸드킹' : '미에르(주)'\r\n              }</dd>\r\n            </dl>\r\n            <dl>\r\n              <dt>본부</dt>\r\n              <dd>{userInfo.photoURL}</dd>\r\n            </dl>\r\n            {userInfo.welfare_range &&\r\n            <dl>\r\n              <dt>가족복지 대상자</dt>\r\n              <dd>{userInfo.welfare_range}</dd>\r\n            </dl>\r\n            }\r\n          </div>          \r\n          <div className='time'>\r\n            {curTime ? curTime : `${date.full_} ${date.hour}:${date.min}:${date.sec}`}\r\n          </div>\r\n          <div className='logo'>\r\n            <img src={\r\n              `https://firebasestorage.googleapis.com/v0/b/cafe-order-226e3.appspot.com/o/logo%2Fmetree_meure_logo.png?alt=media&token=bebed254-5816-41d9-9147-4d2eb7681423`\r\n            }\r\n            />\r\n          </div>\r\n        </div>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AuthPop","D:\\프로젝트\\sy-cafe-order\\src\\component\\Admin\\UserAdmin.js",["341","342","343","344","345"],"import React, { useState, useEffect } from \"react\";\r\nimport firebase from \"../../firebase\";\r\nimport { Table, Button, Space, Form } from \"antd\";\r\nimport { OderModalPopup } from \"../OrderModal\";\r\n\r\nfunction UserAdmin() {\r\n  const [TotalUser, setTotalUser] = useState();\r\n  const [ReRender, setReRender] = useState(false);\r\n\r\n  useEffect(() => {\r\n    let userArr = [];\r\n    firebase\r\n      .database()\r\n      .ref(\"users\")\r\n      .once(\"value\", (snapshot) => {\r\n        snapshot.forEach((el) => {\r\n          let obj = {};\r\n          obj = el.val();\r\n          obj.uid = el.key;\r\n          userArr.push(obj);\r\n        });\r\n        setTotalUser(userArr);\r\n      });\r\n    return () => {};\r\n  }, []);\r\n\r\n  const deleteUser = (uid) => {\r\n    const confirm = window.confirm(\"해당 유저를 DB에서 삭제하시겠습니까?\");\r\n    if (confirm) {\r\n      firebase.database().ref(`users/${uid}`).remove();\r\n      firebase.database().ref(`users/lunch/user/${uid}`).remove();\r\n      alert(\"삭제되었습니다.\");\r\n      setReRender(!ReRender);\r\n    }\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: \"이름\",\r\n      dataIndex: \"name\",\r\n      key: \"name\",\r\n    },\r\n    {\r\n      title: \"부서\",\r\n      dataIndex: \"part\",\r\n      key: \"part\",\r\n    },\r\n    {\r\n      title: \"uid\",\r\n      dataIndex: \"uid\",\r\n      key: \"uid\",\r\n    },\r\n    {\r\n      title: \"이메일\",\r\n      dataIndex: \"email\",\r\n    },\r\n    {\r\n      title: \"전화번호\",\r\n      dataIndex: \"call_number\",\r\n      key: \"call_number\",\r\n    },\r\n    {\r\n      title: \"role\",\r\n      dataIndex: \"role\",\r\n      key: \"role\",\r\n    },\r\n    {\r\n      title: \"auth\",\r\n      dataIndex: \"auth\",\r\n      key: \"auth\",\r\n    },\r\n    {\r\n      title: \"관리\",\r\n      align: \"center\",\r\n      dataIndex: \"uid\",\r\n      key: \"uid\",\r\n      render: (uid) => (\r\n        <>\r\n          <Space>\r\n            {/* <Button className=\"sm\" id=\"btnModify\" onClick={(e)=>{modifyUser(e,uid)}}>수정</Button> */}\r\n            <Button\r\n              className=\"sm\"\r\n              onClick={() => {\r\n                deleteUser(uid);\r\n              }}\r\n            >\r\n              삭제\r\n            </Button>\r\n          </Space>\r\n        </>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const data = TotalUser;\r\n\r\n  const [ModifyPop, setModifyPop] = useState(false);\r\n  const [ModifyData, setModifyData] = useState();\r\n  const [PosX, setPosX] = useState(0);\r\n  const [PosY, setPosY] = useState(0);\r\n\r\n  const onClosePop = () => {\r\n    console.log(2);\r\n  };\r\n\r\n  const modifyUser = (e, uid) => {\r\n    setPosX(e.clientX);\r\n    setPosY(e.clientY);\r\n    setModifyPop(true);\r\n  };\r\n\r\n  const onSubmitInfo = () => {\r\n    console.log(1);\r\n  };\r\n\r\n  window.addEventListener(\"click\", (e) => {\r\n    if (\r\n      e.target.id == \"btnModify\" ||\r\n      e.target.parentElement.id == \"btnModify\"\r\n    ) {\r\n      setModifyPop(false);\r\n    } else {\r\n      e.stopPropagation();\r\n    }\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <Table\r\n        columns={columns}\r\n        dataSource={data}\r\n        pagination={{ pageSize: 100 }}\r\n        rowKey={(item) => {\r\n          return item.uid;\r\n        }}\r\n      />\r\n      {ModifyPop && (\r\n        <OderModalPopup\r\n          className=\"call_modify\"\r\n          style={{\r\n            top: `${PosY}px`,\r\n            left: `${PosX}px`,\r\n            transform: \"translate(-110%,-50%)\",\r\n            position: \"fixed\",\r\n          }}\r\n        >\r\n          <form className=\"order-form-box\" onSubmit={onSubmitInfo}>\r\n            {ModifyData && <>{ModifyData.name}</>}\r\n            <Button>확인</Button>\r\n          </form>\r\n          <div className=\"flex-box j-center\">\r\n            <Button type=\"primary\" onClick={onClosePop}>\r\n              닫기\r\n            </Button>\r\n          </div>\r\n        </OderModalPopup>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default UserAdmin;\r\n","D:\\프로젝트\\sy-cafe-order\\src\\component\\Admin\\AdminProd.js",["346","347","348","349"],"import React, { useState, useEffect } from \"react\";\r\nimport ImgUpload from \"./ImgUpload\";\r\nimport {\r\n  Form,\r\n  Button,\r\n  Input,\r\n  Radio,\r\n  Checkbox,\r\n  Row,\r\n  Divider,\r\n  Switch,\r\n  TimePicker,InputNumber\r\n} from \"antd\";\r\nimport firebase from \"../../firebase\";\r\nimport styled from \"styled-components\";\r\nimport ModifyModal from \"./ModifyModal\";\r\nimport uuid from \"react-uuid\";\r\nimport ProdCategory from \"./ProdCategory\";\r\nimport LastOrderTime from \"./option/LastOrderTime\";\r\n\r\nexport const ProdList = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  .list {\r\n    animation-delay: 1s;\r\n    margin: 12px 8px;\r\n    width: calc(20% - 16px);\r\n    display: flex;\r\n    flex-direction: column;\r\n    border-radius: 7px;    \r\n    overflow: hidden;\r\n    transition: all 0.2s;\r\n    &:hover {\r\n      img{\r\n        transform: translate(-50%, -50%) scale(1.07);\r\n      }\r\n      box-shadow: 0px 0px 4px 1px rgba(0, 0, 0, 0.25);\r\n    }\r\n    .img {\r\n      height: 0;\r\n      border-top-left-radius: 7px;\r\n      border-top-right-radius: 7px;\r\n      overflow: hidden;\r\n      width: 100%;\r\n      padding-bottom: 100%;\r\n      overflow: hidden;\r\n      position: relative;\r\n    }\r\n    img {\r\n      height: 100%;\r\n      position: absolute;\r\n      left: 50%;\r\n      top: 50%;\r\n      transition:all 0.2s;\r\n      transform: translate(-50%, -50%);\r\n    }\r\n    .kal {\r\n      position: absolute;\r\n      right: 0;\r\n      bottom: 0;\r\n      background: rgba(255, 255, 255, 0.85);\r\n      display: inline-block;\r\n      z-index: 1;\r\n      padding: 3px 6px;\r\n      font-size: 12px;\r\n      border-top-left-radius: 5px;\r\n    }\r\n  }\r\n  .txt {\r\n    display: flex;\r\n    flex: 1;\r\n    width: 100%;\r\n    flex-direction: column;\r\n    justify-content: space-between;\r\n    margin-bottom: 4px;\r\n    .name {\r\n      font-weight: bold;\r\n      font-size: 14px;\r\n      margin: 3px 0 2px 0;\r\n      display: -webkit-box;\r\n      -webkit-line-clamp: 2; \r\n      -webkit-box-orient: vertical;\r\n      overflow:hidden;\r\n      max-height: 46px;\r\n    }\r\n    .ic-favor {\r\n      margin-top: 5px;\r\n      margin-left: 5px;\r\n      flex-shrink: 0;\r\n      z-index: 10;\r\n      width: 18px;\r\n      height: 18px;\r\n      opacity: 0.3;\r\n      transition: all 0.2s;\r\n      &:hover{opacity:1}\r\n      svg {\r\n        width: 100%;\r\n        height: 100%;\r\n        display: none;\r\n      }\r\n      .no-favor {\r\n        display: block;        \r\n      }\r\n      .favor {\r\n        display: none;\r\n      }\r\n      &.true {\r\n        opacity: 1;\r\n\r\n        .no-favor {\r\n          display: none;\r\n        }\r\n        .favor {\r\n          display: block;\r\n        }\r\n      }\r\n    }\r\n    .hot {\r\n      font-size: 13px;\r\n    }\r\n    .price {\r\n      font-size: 13px;\r\n      color: #1672c9;\r\n    }\r\n  }\r\n  .user-box {\r\n    display: flex;\r\n    flex-direction: column;\r\n    flex: 1;\r\n    align-items: center;\r\n    padding: 7px 5px;\r\n  }\r\n  .admin {\r\n    display: flex;\r\n    button {\r\n      margin: 2px;\r\n    }\r\n  }\r\n  .admin-box {\r\n    display: flex;\r\n    flex-direction: column;\r\n    flex: 1;\r\n    align-items: center;\r\n    padding: 7px;\r\n  }\r\n  @media all and (max-width: 1400px) {\r\n    .list {\r\n      width: calc(20% - 16px);\r\n    }\r\n  }\r\n  @media all and (max-width: 1024px) {\r\n    .list {\r\n      width: calc(33.33% - 16px);\r\n    }\r\n  }\r\n  @media all and (max-width: 500px) {\r\n    .list {\r\n      width: calc(50% - 16px);\r\n    }\r\n  }\r\n`;\r\n\r\nfunction AdminProd() {\r\n  const [ItemChange, setItemChange] = useState(0);\r\n  const [ProdItem, setProdItem] = useState([]);\r\n\r\n  //정렬 라디오버튼\r\n  const [CateRadio, setCateRadio] = useState(\"all\");\r\n  const itemSort = (e) => {\r\n    setCateRadio(e.target.value);\r\n  };\r\n\r\n  const [Soldout, setSoldout] = useState();\r\n  const SoldoutToggle = () => {\r\n    setSoldout(!Soldout);\r\n    firebase\r\n      .database()\r\n      .ref(\"soldout\")\r\n      .child(\"b_soldout\")\r\n      .transaction((pre) => {\r\n        return !pre;\r\n      });\r\n  };\r\n\r\n  const [MilkSoldout, setMilkSoldout] = useState();\r\n  const MilkSoldoutToggle = () => {\r\n    setMilkSoldout(!MilkSoldout);\r\n    firebase\r\n      .database()\r\n      .ref(\"soldout\")\r\n      .child(\"MilkSoldout\")\r\n      .transaction((pre) => {\r\n        return !pre;\r\n      });\r\n  };\r\n  const [MilkSoldout2, setMilkSoldout2] = useState();\r\n  const MilkSoldoutToggle2 = () => {\r\n    setMilkSoldout2(!MilkSoldout2);\r\n    firebase\r\n      .database()\r\n      .ref(\"soldout\")\r\n      .child(\"MilkSoldout2\")\r\n      .transaction((pre) => {\r\n        return !pre;\r\n      });\r\n  };  \r\n\r\n  const [AbleTime, setAbleTime] = useState()\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    if (mounted) {\r\n      firebase\r\n      .database()\r\n      .ref(\"time\")\r\n      .on(\"value\", (snapshot) => {\r\n        setAbleTime(snapshot.val());\r\n      });      \r\n    }\r\n    return () => {\r\n      mounted = false;\r\n    }\r\n  }, [])  \r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    if (mounted) {\r\n      firebase\r\n        .database()\r\n        .ref(\"soldout\")\r\n        .once(\"value\")\r\n        .then((snapshot) => {    \r\n          let soldoutArr = [];      \r\n            soldoutArr.push({\r\n              b_soldout:snapshot.val().b_soldout,\r\n              MilkSoldout:snapshot.val().MilkSoldout,\r\n              MilkSoldout2:snapshot.val().MilkSoldout2\r\n            })\r\n            setSoldout(snapshot.val().b_soldout);            \r\n            setMilkSoldout(snapshot.val().MilkSoldout);            \r\n            setMilkSoldout2(snapshot.val().MilkSoldout2);            \r\n        });        \r\n      firebase\r\n        .database()\r\n        .ref(\"products\")\r\n        .once(\"value\")\r\n        .then((snapshot) => {\r\n          let array = [];\r\n          snapshot.forEach(function (item) {\r\n            array.push({\r\n              uid: item.key,\r\n              name: item.val().name,\r\n              kal: item.val().kal,\r\n              hot: item.val().hot,\r\n              limit: item.val().limit,\r\n              category: item.val().category,\r\n              image: item.val().image,\r\n              price: item.val().price,\r\n              soldout: true,\r\n            });\r\n          });\r\n          array = array.filter((el) => {\r\n            if (CateRadio === \"all\") {\r\n              return el;\r\n            }\r\n            return el.category === CateRadio;\r\n          });\r\n          setProdItem(array);\r\n        });\r\n    }\r\n    return function cleanup() {\r\n      mounted = false;\r\n    };\r\n  }, [ItemChange, CateRadio]);\r\n\r\n  const [ImgFile, setImgFile] = useState();\r\n  const onImgFile = (e) => {\r\n    setImgFile(e.target.files[0]);\r\n  };\r\n\r\n  // submit\r\n  const onSubmitProd = async (values) => {\r\n    values.guest_hidden = values.guest_hidden ? values.guest_hidden : ''\r\n    if (isNaN(values.price)) {\r\n      alert(\"가격은 숫자만 입력해 주세요\");\r\n      return;\r\n    }\r\n    if (!ImgFile) {\r\n      alert(\"이미지를 올려주세요\");\r\n      return;\r\n    }\r\n    const file = ImgFile;\r\n    const metadata = ImgFile.type;\r\n    try {\r\n      let uploadTaskSnapshot = await firebase\r\n        .storage()\r\n        .ref(\"products\")\r\n        .child(`prod_image/${uuid()}`)\r\n        .put(file, metadata);\r\n      let downloadURL = await uploadTaskSnapshot.ref.getDownloadURL();\r\n      if (!values.add) {\r\n        values.add = \"\";\r\n      }\r\n      if (!values.milk) {\r\n        values.milk = \"\";\r\n      }\r\n      if (!values.limit) {\r\n        values.limit = false;\r\n      }\r\n      if (!values.option) {\r\n        values.option = \"\";\r\n      }\r\n      values.sort_num = parseInt(values.sort_num);\r\n      values.sort_num >= 0 ? values.sort_num = values.sort_num : values.sort_num = 9999;\r\n      await firebase\r\n        .database()\r\n        .ref(\"products\")\r\n        .child(uuid())\r\n        .set({\r\n          ...values,\r\n          image: downloadURL,\r\n        });\r\n      setItemChange((pre) => pre + 1);\r\n      alert(\"상품을 등록했습니다.\");\r\n    } catch (error) {\r\n      alert(error);\r\n    }\r\n  };\r\n\r\n  // 모달팝업 호출\r\n  const [Puid, setPuid] = useState();\r\n  const [Pimg, setPimg] = useState();\r\n  const [OnModal, setOnModal] = useState(false);\r\n  const [PosX, setPosX] = useState(0);\r\n  const [PosY, setPosY] = useState(0);\r\n  const onProdModify = (e, uid, img) => {\r\n    setPosX(e.pageX);\r\n    setPosY(e.pageY);\r\n    setPuid(uid);\r\n    setPimg(img);\r\n    setOnModal(true);\r\n  };\r\n\r\n  const onProdDelete = async (uid) => {\r\n    const delConfirm = window.confirm(\"삭제하시겠습니까?\");\r\n    try {\r\n      if (delConfirm) {\r\n        await firebase.database().ref(\"products\").child(uid).remove();\r\n        setItemChange((pre) => pre + 1);\r\n        alert(\"상품을 삭제했습니다.\");\r\n      }\r\n    } catch (error) {\r\n      alert(error);\r\n    }\r\n  };\r\n\r\n  const onFinished = () => {\r\n    setOnModal(false);\r\n    setItemChange((pre) => pre + 1);\r\n  };\r\n\r\n  const [ProdRegist, setProdRegist] = useState(false);\r\n  const ProdRegistToggle = () => {\r\n    setProdRegist(!ProdRegist);\r\n  };\r\n  const [TimeRegist, setTimeRegist] = useState(false);\r\n  const TimeRegistToggle = () => {\r\n    setTimeRegist(!TimeRegist);\r\n  };  \r\n\r\n  const format = 'HH:mm';\r\n  const onTimeSet = () => {\r\n    let time1_1 = document.querySelectorAll('.time1 input')[0].value;\r\n    let time1_2 = document.querySelectorAll('.time1 input')[1].value;\r\n    let time2_1 = document.querySelectorAll('.time2 input')[0].value;\r\n    let time2_2 = document.querySelectorAll('.time2 input')[1].value;\r\n    let time3_1 = document.querySelectorAll('.time3 input')[0].value;\r\n    let time3_2 = document.querySelectorAll('.time3 input')[1].value;\r\n    let time4_1 = document.querySelectorAll('.time4 input')[0].value;\r\n    let time4_2 = document.querySelectorAll('.time4 input')[1].value;\r\n    let body = {}\r\n    body.ableTimeStart = time1_1;\r\n    body.ableTimeEnd = time1_2;\r\n    body.disableTimeStart = time2_1;\r\n    body.disableTimeEnd = time2_2;\r\n    body.lunchTimeStart = time3_1;\r\n    body.lunchTimeEnd = time3_2;\r\n    body.breakTimeStart = time4_1;\r\n    body.breakTimeEnd = time4_2;\r\n    \r\n    firebase.database().ref('time').update(body)\r\n\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"flex-box a-center\" style={{ marginBottom: \"10px\" }}>\r\n        <h3 className=\"title\" style={{ margin: \"0 10px 0 0\" }}>\r\n        운영시간 설정\r\n        </h3>\r\n        <Switch\r\n          onChange={TimeRegistToggle}\r\n          checkedChildren=\"on\"\r\n          unCheckedChildren=\"off\"\r\n        />\r\n      </div> \r\n      {AbleTime && TimeRegist && (\r\n      <div style={{marginBottom:\"20px\"}}>\r\n        <div className=\"time-seting\">\r\n          <div className=\"tit\">\r\n            운영시간\r\n          </div>\r\n          <TimePicker.RangePicker className=\"time1\" format={format} />\r\n          <div className=\"tit\">\r\n            주문불가 시간\r\n          </div>\r\n          <TimePicker.RangePicker className=\"time2\" format={format} />     \r\n        </div>\r\n        <div className=\"time-seting\">\r\n          <div className=\"tit\">\r\n            점심시간\r\n          </div>\r\n          <TimePicker.RangePicker className=\"time3\" format={format} />\r\n          <div className=\"tit\">\r\n            브레이크 타임\r\n          </div>\r\n          <TimePicker.RangePicker className=\"time4\" format={format} />        \r\n        </div>\r\n        <Button\r\n              htmlType=\"button\"\r\n              style={{ width: \"100%\",maxWidth:\"250px\" }}\r\n              type=\"primary\"\r\n              size=\"large\"\r\n              onClick={onTimeSet}\r\n            >\r\n              시간설정 적용하기\r\n            </Button>\r\n      </div>\r\n      )}\r\n      <div className=\"flex-box a-center\" style={{ marginBottom: \"10px\" }}>\r\n        <h3 className=\"title\" style={{ margin: \"0 10px 0 0\" }}>\r\n          상품등록\r\n        </h3>\r\n        <Switch\r\n          onChange={ProdRegistToggle}\r\n          checkedChildren=\"on\"\r\n          unCheckedChildren=\"off\"\r\n        />\r\n      </div>            \r\n      {ProdRegist && (\r\n        <Form className=\"admin-prod-form\" onFinish={onSubmitProd}>\r\n          <div\r\n            className=\"ant-row ant-form-item ant-form-item-has-success\"\r\n            style={{ alignItems: \"center\" }}\r\n          >\r\n            <div className=\"ant-col ant-form-item-label\">\r\n              <label htmlFor=\"category\" className=\"ant-form-item-required\">\r\n                이미지\r\n              </label>\r\n            </div>\r\n            <ImgUpload onImgFile={onImgFile} />\r\n          </div>\r\n          <Form.Item\r\n            name=\"category\"\r\n            label=\"카테고리\"\r\n            rules={[{ required: true, message: \"카테고리를 선택해 주세요\" }]}\r\n          >\r\n            <Radio.Group>\r\n              <Radio.Button value=\"커피\">커피</Radio.Button>\r\n              <Radio.Button value=\"라떼\">라떼</Radio.Button>\r\n              <Radio.Button value=\"에이드\">에이드</Radio.Button>\r\n              <Radio.Button value=\"차\">차</Radio.Button>\r\n              <Radio.Button value=\"프로틴\">프로틴</Radio.Button>\r\n              <Radio.Button value=\"스낵\">스낵</Radio.Button>\r\n              <Radio.Button value=\"셀프\">셀프</Radio.Button>\r\n            </Radio.Group>\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"name\"\r\n            label=\"상품명\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"상품명을 입력해 주세요\",\r\n              },\r\n            ]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"option\"\r\n            label=\"옵션\"    \r\n          >\r\n            <Input placeholder=\"옵션명을 ,(콤마)로 구분해서 적어주세요\" />\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"hot\"\r\n            label=\"온도\"\r\n            rules={[{ required: true, message: \"온도를 선택해 주세요\" }]}\r\n          >\r\n            <Radio.Group>\r\n              <Radio.Button value=\"hot & ice\">hot & ice</Radio.Button>\r\n              <Radio.Button value=\"hot only\">hot only</Radio.Button>\r\n              <Radio.Button value=\"ice only\">ice only</Radio.Button>\r\n              <Radio.Button value=\"etc\">etc</Radio.Button>\r\n            </Radio.Group>\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"kal\"\r\n            label=\"칼로리\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"칼로리를 입력해 주세요\",\r\n              },\r\n            ]}\r\n          >\r\n            <Input className=\"sm-input\" />\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"price\"\r\n            label=\"가격\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"가격을 입력해 주세요\",\r\n              },\r\n            ]}\r\n          >\r\n            <Input className=\"sm-input\" type=\"text\" />\r\n          </Form.Item>\r\n\r\n          <Form.Item name=\"add\" label=\"추가\">\r\n            <Checkbox.Group>\r\n              <Row>\r\n                {/* <Checkbox value=\"버블\" style={{ lineHeight: \"32px\" }}>\r\n                  버블\r\n                </Checkbox> */}\r\n                <Checkbox value=\"샷\" style={{ lineHeight: \"32px\" }}>\r\n                  샷\r\n                </Checkbox>\r\n                <Checkbox value=\"연하게\" style={{ lineHeight: \"32px\" }}>\r\n                  연하게\r\n                </Checkbox>\r\n              </Row>\r\n            </Checkbox.Group>\r\n          </Form.Item>\r\n          <Form.Item name=\"milk\" label=\"우유 유무\">\r\n            <Checkbox.Group>\r\n              <Row>\r\n                <Checkbox value=\"1\" style={{ lineHeight: \"32px\" }}>\r\n                  우유\r\n                </Checkbox>\r\n              </Row>\r\n            </Checkbox.Group>\r\n          </Form.Item>\r\n          <Form.Item label=\"손님숨김\" name=\"guest_hidden\" valuePropName=\"checked\"> \r\n              <Checkbox style={{ lineHeight: \"32px\" }} />                  \r\n          </Form.Item>\r\n          <Form.Item label=\"1개제한\" name=\"limit\" valuePropName=\"checked\"> \r\n              <Checkbox style={{ lineHeight: \"32px\" }} />                  \r\n          </Form.Item>\r\n          <Form.Item name=\"sort_num\" label=\"순서\">\r\n            <Input className=\"sm-input\" type=\"number\" />\r\n          </Form.Item>\r\n\r\n          <div className=\"ant-row ant-form-item soldout-switch\">\r\n            {/* <div className=\"ant-col ant-form-item-label\">\r\n              <label htmlFor=\"price\">버블품절</label>\r\n            </div>\r\n            <div className=\"ant-col ant-form-item-control\">\r\n              <div className=\"ant-form-item-control-input\">\r\n                <div className=\"ant-form-item-control-input-content\">\r\n                  {Soldout === true && (\r\n                    <>\r\n                      <Switch\r\n                        onChange={SoldoutToggle}\r\n                        checkedChildren=\"판매\"\r\n                        unCheckedChildren=\"품절\"\r\n                        defaultChecked\r\n                      />\r\n                    </>\r\n                  )}\r\n                  {Soldout === false && (\r\n                    <>\r\n                      <Switch\r\n                        onChange={SoldoutToggle}\r\n                        checkedChildren=\"판매\"\r\n                        unCheckedChildren=\"품절\"\r\n                      />\r\n                    </>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div> */}            \r\n            <div className=\"ant-col ant-form-item-label\">\r\n              <label htmlFor=\"price\">락토프리 품절</label>\r\n            </div>\r\n            <div className=\"ant-col ant-form-item-control\">\r\n              <div className=\"ant-form-item-control-input\">\r\n                <div className=\"ant-form-item-control-input-content\">\r\n                  {MilkSoldout2 === true && (\r\n                    <>\r\n                      <Switch\r\n                        onChange={MilkSoldoutToggle2}\r\n                        checkedChildren=\"판매\"\r\n                        unCheckedChildren=\"품절\"\r\n                        defaultChecked\r\n                      />\r\n                    </>\r\n                  )}\r\n                  {MilkSoldout2 === false && (\r\n                    <>\r\n                      <Switch\r\n                        onChange={MilkSoldoutToggle2}\r\n                        checkedChildren=\"판매\"\r\n                        unCheckedChildren=\"품절\"\r\n                      />\r\n                    </>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"ant-col ant-form-item-label\">\r\n              <label htmlFor=\"price\">저지방 품절</label>\r\n            </div>\r\n            <div className=\"ant-col ant-form-item-control\">\r\n              <div className=\"ant-form-item-control-input\">\r\n                <div className=\"ant-form-item-control-input-content\">\r\n                  {MilkSoldout === true && (\r\n                    <>\r\n                      <Switch\r\n                        onChange={MilkSoldoutToggle}\r\n                        checkedChildren=\"판매\"\r\n                        unCheckedChildren=\"품절\"\r\n                        defaultChecked\r\n                      />\r\n                    </>\r\n                  )}\r\n                  {MilkSoldout === false && (\r\n                    <>\r\n                      <Switch\r\n                        onChange={MilkSoldoutToggle}\r\n                        checkedChildren=\"판매\"\r\n                        unCheckedChildren=\"품절\"\r\n                      />\r\n                    </>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div\r\n            style={{ width: \"100%\", maxWidth: \"250px\", textAlign: \"center\" }}\r\n          >\r\n            <Button\r\n              htmlType=\"submit\"\r\n              style={{ width: \"100%\" }}\r\n              type=\"primary\"\r\n              size=\"large\"\r\n            >\r\n              등록하기\r\n            </Button>\r\n          </div>\r\n        </Form>\r\n      )}\r\n      <Divider />\r\n      <h3 className=\"title\">상품리스트</h3>\r\n      <div className=\"menuCategory\">\r\n        <Radio.Group\r\n          className=\"menuCategory\"\r\n          onChange={itemSort}\r\n          defaultValue=\"all\"\r\n          buttonStyle=\"solid\"\r\n        >\r\n          <ProdCategory />\r\n        </Radio.Group>\r\n      </div>\r\n      <ProdList>\r\n        {ProdItem.map((item, index) => (\r\n          <div className=\"list\" key={index}>\r\n            <div className=\"img\">\r\n              <span className=\"kal\">{item.kal}kal</span>\r\n              <img src={item.image} alt=\"\" />\r\n            </div>\r\n            <div className=\"admin-box\">\r\n              <div className=\"txt\">\r\n                <span className=\"name\">{item.name}\r\n                  <span className=\"hidden\">{item.uid}</span>\r\n                </span>\r\n                <div className=\"flex-box between\">\r\n                  <span className=\"hot\">{item.hot}</span>\r\n                  <span className=\"price\">{item.price}원</span>\r\n                </div>\r\n              </div>\r\n              <div className=\"admin\">\r\n                <Button onClick={(e) => onProdModify(e, item.uid, item.image)}>\r\n                  수정\r\n                </Button>\r\n                <Button onClick={() => onProdDelete(item.uid)}>삭제</Button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </ProdList>\r\n      {OnModal && (\r\n        <ModifyModal\r\n          puid={Puid}\r\n          pimg={Pimg}\r\n          onFinished={onFinished}\r\n          posx={PosX}\r\n          posy={PosY}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default AdminProd;\r\n","D:\\프로젝트\\sy-cafe-order\\src\\component\\Admin\\LunchAdmin.js",["350","351","352","353","354","355","356","357","358","359","360","361","362","363","364","365","366"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Input,\r\n  Button,\r\n  DatePicker,\r\n  Checkbox,\r\n  Upload,\r\n  message,\r\n  TimePicker,\r\n} from \"antd\";\r\nimport firebase from \"../../firebase\";\r\nimport { getFormatDate } from \"../CommonFunc\";\r\nimport moment from \"moment\";\r\nimport { UploadOutlined } from \"@ant-design/icons\";\r\nimport { OderModalPopup } from \"../OrderModal\";\r\nimport dayjs from \"dayjs\";\r\nimport uuid from \"react-uuid\";\r\nconst { TextArea } = Input;\r\n\r\nfunction LunchAdmin() {\r\n  const curDate = getFormatDate(new Date());\r\n  const [ItemList, setItemList] = useState();\r\n  const [CheckInfoTxt, setCheckInfoTxt] = useState();\r\n  const [TblItem, setTblItem] = useState();\r\n  const [CheckList, setCheckList] = useState();\r\n  const [ItemSum, setItemSum] = useState();\r\n\r\n  const [SearchDate, setSearchDate] = useState(curDate);\r\n  const [CheckLength, setCheckLength] = useState();\r\n\r\n  const [Ruser, setRuser] = useState();\r\n  const [NonChecker, setNonChecker] = useState();\r\n\r\n  const [Render, setRender] = useState(true);\r\n\r\n  const [Filter, setFilter] = useState();\r\n  const onFilterChange = (e) => {\r\n    setFilter(e);\r\n    setRender(!Render);\r\n  };\r\n\r\n  const [orderTimeStart, setorderTimeStart] = useState();\r\n  const [orderTimeEnd, setorderTimeEnd] = useState();\r\n  const onTimeRange = (e, type) => {\r\n    if (type == 1) {\r\n      setorderTimeStart(e.target.value);\r\n    } else {\r\n      setorderTimeEnd(e.target.value);\r\n    }\r\n  };\r\n\r\n  const [DefaultImg, setDefaultImg] = useState();\r\n  useEffect(() => {\r\n    let r_user = [];\r\n    firebase\r\n      .database()\r\n      .ref(\"users\")\r\n      .once(\"value\", (snapshot) => {\r\n        snapshot.forEach((el) => {\r\n          if (el.val().role == \"0\") {\r\n            r_user.push({\r\n              name: el.val().name,\r\n              part: el.val().part,\r\n              role: el.val().role,\r\n              uid: el.key,\r\n            });\r\n          }\r\n        });\r\n        let itemArr = [];\r\n        let itemObj = {};\r\n        firebase\r\n          .database()\r\n          .ref(\"lunch/item\")\r\n          .once(\"value\", (snapshot) => {\r\n            snapshot.forEach((el) => {\r\n              itemArr.push(el.val());\r\n            });\r\n            itemArr.map((el) => {\r\n              itemObj[el] = 0;\r\n            });\r\n            setTblItem(itemArr);\r\n            itemArr = itemArr.join(\",\");\r\n            setItemList(itemArr);\r\n          });\r\n        firebase\r\n          .database()\r\n          .ref(\"lunch\")\r\n          .on(\"value\", (snapshot) => {\r\n            setCheckInfoTxt(snapshot.val().info);\r\n            setorderTimeStart(snapshot.val().orderTimeStart);\r\n            setorderTimeEnd(snapshot.val().orderTimeEnd);\r\n          });\r\n        firebase\r\n          .database()\r\n          .ref(\"lunch/user\")\r\n          .once(\"value\", (snapshot) => {\r\n            let arr = [];\r\n            let listDate = SearchDate.full ? SearchDate.full : curDate.full;\r\n            snapshot.forEach((el) => {\r\n              let elItemArr;\r\n              if (el.val().checkList && el.val().checkList[listDate]) {\r\n                elItemArr = el.val().checkList[listDate].item;\r\n              }\r\n              if (elItemArr) {\r\n                elItemArr.map((el) => {\r\n                  itemObj[el] += 1;\r\n                });\r\n                arr.push({\r\n                  uid: el.key,\r\n                  name: el.val().name,\r\n                  part: el.val().part,\r\n                  item: elItemArr,\r\n                  confirm: el.val().checkList[listDate].confirm,\r\n                  admin_check: el.val().checkList[listDate].admin_check,\r\n                });\r\n              }\r\n            });\r\n            if (Filter && Filter.length > 0) {\r\n              arr = arr.filter((el) => {\r\n                let res;\r\n                let count = 0;\r\n                Filter.map((item) => {\r\n                  el.item.includes(item)\r\n                    ? (count = count + 1)\r\n                    : (count = count);\r\n                });\r\n                return count > 0 ? el : \"\";\r\n              });\r\n            }\r\n            arr.sort((a, b) => {\r\n              return a.name < b.name ? -1 : a.name > b.name ? 1 : 0;\r\n            });\r\n            setCheckLength(arr.length);\r\n            setCheckList(arr);\r\n            setItemSum(itemObj);\r\n            let checker = [];\r\n            let allName = [];\r\n            let nonChecker = [];\r\n            r_user &&\r\n              r_user.map((el) => {\r\n                allName.push(el.name);\r\n                arr.map((list) => {\r\n                  if (list.uid.includes(el.uid)) {\r\n                    checker.push(list.name);\r\n                  }\r\n                });\r\n              });\r\n            nonChecker = allName.filter((el) => {\r\n              return !checker.includes(el);\r\n            });\r\n            setNonChecker(nonChecker);\r\n          });\r\n      });\r\n\r\n    return () => {\r\n      firebase.database().ref(\"lunch/info\").off();\r\n    };\r\n  }, [SearchDate, Render]);\r\n\r\n  useEffect(() => {\r\n    firebase\r\n      .database()\r\n      .ref(\"lunch/img\")\r\n      .on(\"value\", (data) => {\r\n        setDefaultImg(data.val());\r\n      });\r\n    return () => {\r\n      firebase.database().ref(\"lunch/img\").off();\r\n    };\r\n  }, []);\r\n\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      if (uploadImg) {\r\n        let uploadTask = await firebase\r\n          .storage()\r\n          .ref(`lunch_img/lunchImg`)\r\n          .put(uploadImg.originFileObj, uploadImg.type);\r\n        uploadTask.ref.getDownloadURL().then((url) => {\r\n          let uploadURL = {\r\n            name: uploadImg.originFileObj.name,\r\n            url: url,\r\n          };\r\n          firebase.database().ref(\"lunch/img\").update({\r\n            img: uploadURL,\r\n          });\r\n        });\r\n      }\r\n\r\n      let arr;\r\n      arr = e.target.item.value.split(\",\");\r\n      firebase.database().ref(\"lunch\").update({\r\n        item: arr,\r\n        info: e.target.check_info_txt.value,\r\n        orderTimeStart,\r\n        orderTimeEnd,\r\n      });\r\n\r\n      message.success(\"설정이 저장되었습니다 :)\");\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const onSelectDate = (date, dateString) => {\r\n    setSearchDate(getFormatDate(date._d));\r\n    setRender(!Render);\r\n  };\r\n\r\n  const disabledDate = (current) => {\r\n    return current && current > moment().add(14, \"days\");\r\n  };\r\n\r\n  const onConfrim = (user) => {\r\n    let date = SearchDate.full;\r\n    try {\r\n      firebase\r\n        .database()\r\n        .ref(`lunch/user/${user.uid}/checkList/${date}`)\r\n        .update({\r\n          confirm: 1,\r\n          admin_check: true,\r\n        });\r\n      setRender(!Render);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const [ModifyData, setModifyData] = useState();\r\n  const [ModifyCheck, setModifyCheck] = useState();\r\n  const onModifyCheck = (e) => {\r\n    setModifyCheck(e);\r\n  };\r\n  const onModify = (el) => {\r\n    setModifyData(el);\r\n  };\r\n\r\n  const onModifySubmit = (el) => {\r\n    let itemList = ModifyCheck ? ModifyCheck : el.item;\r\n    firebase\r\n      .database()\r\n      .ref(`lunch/user/${el.uid}/checkList/${SearchDate.full}`)\r\n      .update({\r\n        item: itemList,\r\n      });\r\n    setModifyData();\r\n    setModifyCheck();\r\n    setRender(!Render);\r\n  };\r\n\r\n  const onModifyClose = () => {\r\n    setModifyData();\r\n    setModifyCheck();\r\n  };\r\n\r\n  const [uploadImg, setuploadImg] = useState();\r\n  const onImgUpload = (e) => {\r\n    setuploadImg(e.file);\r\n  };\r\n\r\n  const onImgRemove = () => {\r\n    const ref = firebase.storage().ref(`lunch_img`);\r\n    ref.listAll().then((dir) => {\r\n      const images = dir._delegate.items;\r\n      images.map((el) => {\r\n        let path = el._location.path_;\r\n        firebase\r\n          .storage()\r\n          .ref(`${path}`)\r\n          .delete()\r\n          .then(() => {})\r\n          .catch((error) => console.error(error));\r\n      });\r\n    });\r\n\r\n    firebase.database().ref(`lunch/img`).remove();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {ItemList && (\r\n        <>\r\n          <form onSubmit={onSubmit}>\r\n            <h3 className=\"title\" style={{ margin: \"0 0 5px 0\" }}>\r\n              식단 항목1\r\n            </h3>\r\n            <div className=\"flex-box\">\r\n              <Input name=\"item\" defaultValue={ItemList} />\r\n            </div>\r\n            <h3 className=\"title\" style={{ margin: \"15px 0 5px 0\" }}>\r\n              항목 설명글\r\n            </h3>\r\n            {CheckInfoTxt && (\r\n              <div className=\"flex-box\">\r\n                <TextArea name=\"check_info_txt\" defaultValue={CheckInfoTxt} />\r\n              </div>\r\n            )}\r\n            <h3 className=\"title\" style={{ margin: \"15px 0 5px 0\" }}>\r\n              일반식 식단표\r\n            </h3>\r\n            <div className=\"flex-box\">\r\n              {DefaultImg ? (\r\n                <>\r\n                  <Upload\r\n                    fileList={[\r\n                      {\r\n                        uid: \"1\",\r\n                        name: DefaultImg.img.name,\r\n                        status: \"done\",\r\n                        url: DefaultImg.img.url,\r\n                      },\r\n                    ]}\r\n                    listType=\"picture\"\r\n                    name=\"uploadImg\"\r\n                    onChange={onImgUpload}\r\n                    onRemove={onImgRemove}\r\n                  >\r\n                    <Button icon={<UploadOutlined />}>이미지 업로드</Button>\r\n                  </Upload>\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <Upload\r\n                    listType=\"picture\"\r\n                    name=\"uploadImg\"\r\n                    onChange={onImgUpload}\r\n                    onRemove={onImgRemove}\r\n                  >\r\n                    <Button icon={<UploadOutlined />}>이미지 업로드</Button>\r\n                  </Upload>\r\n                </>\r\n              )}\r\n            </div>\r\n            <h3 className=\"title\" style={{ margin: \"15px 0 5px 0\" }}>\r\n              식단 주문 시간\r\n            </h3>\r\n            <input\r\n              type=\"time\"\r\n              onChange={(e) => onTimeRange(e, 1)}\r\n              defaultValue={orderTimeStart}\r\n            />\r\n            <span style={{ margin: \"0 4px\" }}>~</span>\r\n            <input\r\n              type=\"time\"\r\n              onChange={(e) => onTimeRange(e, 2)}\r\n              defaultValue={orderTimeEnd}\r\n            />\r\n            <div style={{ textAlign: \"center\" }}>\r\n              <Button\r\n                htmlType=\"submit\"\r\n                type=\"primary\"\r\n                size=\"large\"\r\n                style={{ marginTop: \"10px\" }}\r\n              >\r\n                설정저장\r\n              </Button>\r\n            </div>\r\n          </form>\r\n        </>\r\n      )}\r\n      <h3 className=\"title\" style={{ margin: \"20px 0 5px 0\" }}>\r\n        식단체크\r\n      </h3>\r\n      <div className=\"flex-box a-center\">\r\n        <DatePicker\r\n          format=\"YYYY-MM-DD\"\r\n          defaultValue={moment()}\r\n          style={{ marginRight: \"10px\" }}\r\n          disabledDate={disabledDate}\r\n          onChange={onSelectDate}\r\n        />\r\n        <Checkbox.Group style={{ width: \"100%\" }} onChange={onFilterChange}>\r\n          {TblItem &&\r\n            TblItem.map((el, idx) => (\r\n              <Checkbox key={idx} value={el}>\r\n                {el}\r\n              </Checkbox>\r\n            ))}\r\n        </Checkbox.Group>\r\n      </div>\r\n\r\n      <table className=\"fl-table tbl-lunch-check\" style={{ marginTop: \"12px\" }}>\r\n        <thead>\r\n          <tr key=\"0\">\r\n            <th scope=\"col\">날짜</th>\r\n            <th scope=\"col\">이름</th>\r\n            <th scope=\"col\">부서</th>\r\n            {TblItem && TblItem.map((el) => <th scope=\"col\">{el}</th>)}\r\n            <th scope=\"col\">확인여부</th>\r\n            <th scope=\"col\">수정</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {CheckList &&\r\n            CheckList.map((el, idx) => (\r\n              <tr key={idx + 1}>\r\n                <td>{SearchDate.full_}</td>\r\n                <td>{el.name}</td>\r\n                <td>{el.part}</td>\r\n                {TblItem &&\r\n                  TblItem.map((list, l_idx) => (\r\n                    <td>{el.item.includes(list) && 1}</td>\r\n                  ))}\r\n                <td className={el.admin_check ? \"admin_check\" : \"\"}>\r\n                  {el.confirm ? (\r\n                    \"O\"\r\n                  ) : (\r\n                    <Button\r\n                      onClick={() => {\r\n                        onConfrim(el);\r\n                      }}\r\n                    >\r\n                      확인\r\n                    </Button>\r\n                  )}\r\n                </td>\r\n                <td style={{ position: \"relative\" }}>\r\n                  <Button\r\n                    className=\"sm\"\r\n                    style={{ marginRight: \"5px\" }}\r\n                    onClick={() => onModify(el)}\r\n                  >\r\n                    수정\r\n                  </Button>\r\n                  {ModifyData && el.uid === ModifyData.uid && (\r\n                    <OderModalPopup\r\n                      className=\"lunch-check-modify\"\r\n                      style={{\r\n                        maxWidth: \"100px\",\r\n                        flexDirection: \"column\",\r\n                        position: \"absolute\",\r\n                        top: \"10px\",\r\n                        left: \"-130px\",\r\n                      }}\r\n                    >\r\n                      <h3>\r\n                        {ModifyData.name}({ModifyData.part})\r\n                      </h3>\r\n                      <Checkbox.Group\r\n                        defaultValue={el.item}\r\n                        style={{ width: \"100%\" }}\r\n                        onChange={onModifyCheck}\r\n                      >\r\n                        {TblItem &&\r\n                          TblItem.map((el, idx) => (\r\n                            <Checkbox key={idx} value={el}>\r\n                              {el}\r\n                            </Checkbox>\r\n                          ))}\r\n                      </Checkbox.Group>\r\n                      <div style={{ marginTop: \"10px\" }}>\r\n                        <Button\r\n                          type=\"primary\"\r\n                          style={{ marginRight: \"5px\" }}\r\n                          onClick={() => onModifySubmit(el)}\r\n                        >\r\n                          수정\r\n                        </Button>\r\n                        <Button onClick={onModifyClose}>닫기</Button>\r\n                      </div>\r\n                    </OderModalPopup>\r\n                  )}\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          {/* <tr>\r\n            <td>{SearchDate.full_}</td>\r\n            <td>합계</td>\r\n            <td>{CheckLength}</td>\r\n            {TblItem && TblItem.map((el,idx) => (\r\n              <td>\r\n                {ItemSum && ItemSum[el]}\r\n              </td>\r\n            ))}\r\n            <td></td>\r\n          </tr> */}\r\n        </tbody>\r\n      </table>\r\n      <table className=\"fl-table tbl-lunch-check\" style={{ marginTop: \"10px\" }}>\r\n        <thead>\r\n          <tr key=\"0\">\r\n            <th scope=\"col\">날짜</th>\r\n            <th scope=\"col\">인원</th>\r\n            {TblItem && TblItem.map((el) => <th scope=\"col\">{el}</th>)}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td>{SearchDate.full_}</td>\r\n            <td>{CheckLength}</td>\r\n            {TblItem &&\r\n              TblItem.map((el, idx) => <td>{ItemSum && ItemSum[el]}</td>)}\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n      {NonChecker && (\r\n        <>\r\n          <div style={{ marginTop: \"15px\", fontSize: \"12px\" }}>\r\n            <span>없는 사람 : </span>\r\n            {NonChecker.map((el, idx) =>\r\n              parseInt(NonChecker.length - 1) == idx ? el : el + \", \"\r\n            )}\r\n          </div>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default LunchAdmin;\r\n","D:\\프로젝트\\sy-cafe-order\\src\\component\\CommonFunc.js",["367","368","369","370"],"export const commaNumber = (x) => {\r\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n}\r\n\r\nexport const getFormatDate = (date) => {\r\n    let year = date.getFullYear();\r\n    let month = date.getMonth() + 1;\r\n    month = month >= 10 ? month : '0' + month;\r\n    let og_month = date.getMonth();\r\n    let day = date.getDate();\r\n    day = day >= 10 ? day : '0' + day;    \r\n    let og_day = date.getDate();\r\n    let weeek = date.getDay();\r\n    let weekArr = ['일','월','화','수','목','금','토'];\r\n    let hour = date.getHours();\r\n    hour = hour >= 10 ? hour : '0' + hour; \r\n    let min = date.getMinutes();\r\n    min = min >= 10 ? min : '0' + min; \r\n    let sec = date.getSeconds();\r\n    let timestamp = date.getTime();\r\n    let obj = {\r\n        'year':year,\r\n        'month':month,\r\n        'day':day,\r\n        'og_month':og_month,\r\n        'og_day':og_day,\r\n        'week':weekArr[weeek],\r\n        'weekNum':weeek,\r\n        'hour':hour,\r\n        'min':min,\r\n        'sec':sec,\r\n        'full': year + '' + month + '' + day,\r\n        'full_': year + '-' + month + '-' + day,\r\n        'timestamp': timestamp\r\n    }\r\n\r\n    return obj;  \r\n}\r\n\r\n\r\nexport const curWeek = (date) => {\r\n    let curDate = new Date(date);\r\n    let day = curDate.getDay();\r\n    let last = 5 - day;\r\n    let firstDate = getFormatDate(new Date(curDate.setDate(curDate.getDate() - day + 1))).full;\r\n    curDate = new Date(date);\r\n    let lastDate = getFormatDate(new Date(curDate.setDate(curDate.getDate() + last))).full;\r\n    let dateObj = {\r\n        firstDate,\r\n        lastDate\r\n    }\r\n    return dateObj\r\n}\r\n\r\nexport const getNotificationPermission = () => {\r\n    // 브라우저 지원 여부 체크\r\n    if (!(\"Notification\" in window)) {\r\n        alert(\"데스크톱 알림을 지원하지 않는 브라우저입니다.\");\r\n    }\r\n    // 데스크탑 알림 권한 요청\r\n    Notification.requestPermission();\r\n}\r\n\r\n// 알림 띄우기\r\nexport function notify(msg) {\r\n    var options = {\r\n        body: msg\r\n    }\r\n    var notification = new Notification(\"주문알림\", options);\r\n    \r\n    setTimeout(function(){\r\n        notification.close();\r\n    }, 3000);\r\n  }\r\n\r\n\r\n\r\n  //객체배열추출\r\n  export function getArr(obj) {\r\n    let arr = [];\r\n    for (let key in obj){\r\n        arr.push(obj[key]);\r\n    }\r\n    return arr;\r\n}\r\n\r\n\r\nexport function getMax(arr,target){\r\n    let abs = 0;\r\n    let arr2 = []\r\n    for (var i = 0; i < arr.length; i++)\r\n    {\r\n        abs = target - arr[i] > 0 && target - arr[i];\r\n        abs && arr2.push(abs);        \r\n    }\r\n    let res = Math.min.apply(null,arr2);\r\n    return arr[res];\r\n}\r\n\r\n\r\n//판매시간 체크\r\nexport function getAbleTime(timeSale,curTime) {\r\n    let ableTime = true;\r\n    let posibleTime = '';\r\n    timeSale.forEach((el,idx)=>{\r\n      let copyEl = el.concat();\r\n      copyEl = copyEl.map(el=>{\r\n            el = el.split(':')\r\n            el = el.slice(0,2).join(':');\r\n            return el\r\n        })\r\n        \r\n      if(idx == 0){\r\n        posibleTime += copyEl.join(' ~ ');\r\n      }\r\n      if(idx == 1){\r\n        posibleTime += ' 그리고 '+copyEl.join(' ~ ');\r\n      }\r\n    })\r\n    let saleTimeCheck1 = true;\r\n    let saleTimeCheck2;\r\n    saleTimeCheck2 = timeSale[1] ? true : false;\r\n    timeSale.forEach((el,idx)=>{\r\n      if(el){\r\n        let curTimeMin = curTime.hour*60 + parseInt(curTime.min);\r\n        let start = el[0].split(\":\");\r\n        start.pop();\r\n        start = start[0]*60 + parseInt(start[1]);\r\n        let end = el[1].split(\":\");\r\n        end.pop();\r\n        end = end[0]*60 + parseInt(end[1]);\r\n        if(idx == 0){\r\n          saleTimeCheck1 = false;\r\n          if(curTimeMin >= start && curTimeMin <= end) {\r\n            saleTimeCheck1 = true;\r\n          }\r\n        }\r\n        if(idx == 1){\r\n          saleTimeCheck2 = false;\r\n          if(curTimeMin >= start && curTimeMin <= end) {\r\n            saleTimeCheck2 = true\r\n          }\r\n        }\r\n      }\r\n    }) \r\n    if(!saleTimeCheck1 && !saleTimeCheck2){\r\n      ableTime = false;\r\n    } \r\n    return {ableTime,posibleTime};\r\n  }","D:\\프로젝트\\sy-cafe-order\\src\\component\\Admin\\AdminProdCount.js",[],"D:\\프로젝트\\sy-cafe-order\\src\\component\\Admin\\HairAdmin.js",["371","372","373","374","375","376","377","378","379","380","381"],"import React, { useState, useEffect } from \"react\";\r\nimport firebase from \"../../firebase\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Input, DatePicker, Button, Table, Radio, Select, message } from 'antd';\r\nimport * as antIcon from \"react-icons/ai\";\r\nimport { getFormatDate, commaNumber } from '../CommonFunc';\r\nimport moment from 'moment';\r\nimport { OderModalPopup } from \"../OrderModal\";\r\nimport { CSVLink } from \"react-csv\";\r\nimport _ from 'lodash';\r\nconst curDate = getFormatDate(new Date());\r\nconst { TextArea } = Input;\r\nconst { RangePicker } = DatePicker;\r\nconst { Option } = Select;\r\n\r\nfunction HairAdmin() {\r\n  const userInfo = useSelector((state) => state.user.currentUser);\r\n  const [MyHairData, setMyHairData] = useState();\r\n  const [MetreeData, setMetreeData] = useState();\r\n  const [FoodkingData, setFoodkingData] = useState();\r\n  const [MeureData, setMeureData] = useState();\r\n  const [Rerender, setRerender] = useState(false);\r\n  const [SearchDate, setSearchDate] = useState([curDate,curDate]);\r\n\r\n  const [TotalPrice, setTotalPrice] = useState(0);\r\n  const [MeTotalPrice, setMeTotalPrice] = useState(0);\r\n  const [FdTotalPrice, setFdTotalPrice] = useState(0);\r\n  const [ErTotalPrice, setErTotalPrice] = useState(0);\r\n  const [TypeTotalPrice, setTypeTotalPrice] = useState(0);\r\n\r\n  const [PersnalData, setPersnalData] = useState();\r\n  const [TotalPersnalData, setTotalPersnalData] = useState();\r\n  const [MePersonalData, setMePersonalData] = useState();\r\n  const [FdPersonalData, setFdPersonalData] = useState();\r\n  const [ErPersonalData, setErPersonalData] = useState();\r\n\r\n  const [HairData, setHairData] = useState();\r\n\r\n  const [CheckInfoTxt, setCheckInfoTxt] = useState(null);\r\n  \r\n  const excelHeaders = [\r\n    {label: \"이용일\", key:\"date\"},\r\n    {label: \"작성일\", key:\"timestamp\"},\r\n    {label: \"소속\", key:\"sosok\"},\r\n    {label: \"부서\", key:\"part\"},\r\n    {label: \"이름\", key:\"name\"},\r\n    {label: \"이용자와의관계\", key:\"relation\"},\r\n    {label: \"서비스명\", key:\"service\"},\r\n    {label: \"가격\", key:\"price\"}\r\n  ]\r\n  const [excelData, setExcelData] = useState()\r\n  const [excelDataCopy, setExcelDataCopy] = useState()\r\n  useEffect(() => {\r\n    firebase.database().ref('hair/info')\r\n      .on('value', (snapshot) => {\r\n        setCheckInfoTxt(snapshot.val())        \r\n    });\r\n\r\n    let hairArr = [];\r\n    let totalPrice = 0;    \r\n    let meTotalPrice = 0;    \r\n    let fdTotalPrice = 0;    \r\n    let erTotalPrice = 0;    \r\n    let personalArr = [];\r\n    let startDate = SearchDate[0].full.substr(0,6);\r\n    let endDate = SearchDate[1].full.substr(0,6);\r\n    firebase\r\n    .database()\r\n    .ref(`hair/list`)\r\n    .once(\"value\", (snapshot) => {\r\n      snapshot.forEach(el=>{\r\n        let obj = el.val();\r\n        let personalObj = {};\r\n        let personalPrice = 0;\r\n        let dateArr = [];\r\n        let relArr = [];\r\n        let serArr = [];\r\n        let priceArr = [];\r\n        for (let key in obj) {\r\n          let name = obj[key].name;\r\n          let str = obj[key].date.full.toString().substr(0,6);\r\n          if(startDate <= str && str <= endDate){\r\n            personalPrice += parseInt(obj[key].price);\r\n            totalPrice += parseInt(obj[key].price);\r\n            if(obj[key].sosok === '1'){\r\n              meTotalPrice += parseInt(obj[key].price);\r\n            }\r\n            if(obj[key].sosok === '2'){\r\n              fdTotalPrice += parseInt(obj[key].price);\r\n            }\r\n            if(obj[key].sosok === '3'){\r\n              erTotalPrice += parseInt(obj[key].price);\r\n            }\r\n            obj[key].distance =  obj[key].timestamp - new Date(`${obj[key].date.full_} ${obj[key].date.hour}:${obj[key].date.min}`).getTime();\r\n            obj[key].distance = Math.floor(obj[key].distance/1000/60/60/24)\r\n            dateArr.push(obj[key].date)\r\n            // dateArr.sort((a,b)=>{\r\n            //   return a.full - b.full\r\n            // })\r\n            relArr.push(obj[key].relation)\r\n            serArr.push(obj[key].service)\r\n            priceArr.push(obj[key].price)            \r\n            personalObj = {\r\n              date : dateArr,\r\n              name : name,\r\n              part : obj[key].part,\r\n              sosok : obj[key].sosok,\r\n              timestamp : obj[key].timestamp,\r\n              relation : relArr, \r\n              service : serArr, \r\n              price : priceArr, \r\n              total_price: personalPrice,\r\n            }\r\n            hairArr.push(obj[key]);\r\n          }\r\n        }\r\n        personalArr.push(personalObj);\r\n        setPersnalData(personalArr);\r\n        setTotalPersnalData(personalArr);\r\n        let mePersnalArr = personalArr.concat().filter(el=>{\r\n          return el.sosok === '1';\r\n        });\r\n        let fdPersnalArr = personalArr.concat().filter(el=>{\r\n          return el.sosok === '2';\r\n        });\r\n        let erPersnalArr = personalArr.concat().filter(el=>{\r\n          return el.sosok === '3';\r\n        });\r\n        setMePersonalData(mePersnalArr);\r\n        setFdPersonalData(fdPersnalArr);        \r\n        setErPersonalData(erPersnalArr);        \r\n        setTotalPrice(totalPrice);\r\n        setTypeTotalPrice(totalPrice);\r\n        setMeTotalPrice(meTotalPrice);\r\n        setFdTotalPrice(fdTotalPrice);\r\n        setErTotalPrice(erTotalPrice);\r\n      })      \r\n      hairArr.sort((a,b)=>{\r\n        return b.date.full - a.date.full\r\n      })\r\n      setMyHairData(hairArr);\r\n      setHairData(hairArr);\r\n      let metreeArr = hairArr.concat().filter(el => {\r\n        return el.sosok === '1'\r\n      });\r\n      setMetreeData(metreeArr);\r\n      let foodkingArr = hairArr.concat().filter(el => {\r\n        return el.sosok === '2'\r\n      })\r\n      setFoodkingData(foodkingArr);\r\n      let meureArr = hairArr.concat().filter(el => {\r\n        return el.sosok === '3'\r\n      })\r\n      setMeureData(meureArr);\r\n\r\n      let excelArr = _.cloneDeep(hairArr).map(el => {\r\n        el.date = el.date.full_;\r\n        el.timestamp = getFormatDate(new Date(el.timestamp)).full_;\r\n        el.price = commaNumber(el.price);\r\n        el.sosok = el.sosok == 1 ? \"미트리\" : el.sosok == 2 ? \"푸드킹\" : \"미에르\"\r\n        el.signature = \"\";\r\n        el.uid = \"\";\r\n        el.user_uid = \"\";\r\n        return el;\r\n      });      \r\n      setExcelData(excelArr)\r\n      setExcelDataCopy(excelArr)\r\n\r\n    });\r\n    return () => {\r\n      firebase.database().ref(`users/${userInfo.uid}`).off();\r\n      firebase.database().ref('hair/info').off();\r\n    }\r\n  }, [Rerender,SearchDate]);\r\n  \r\n\r\n  const onDelete = (uid,date,user_uid) => {\r\n    let curDate = getFormatDate(new Date());\r\n    let thisDate = getFormatDate(new Date(date));\r\n    let year = thisDate.year;\r\n    let month = thisDate.og_month;\r\n    let day = thisDate.og_day;\r\n    month++;\r\n    day = 15;\r\n    if(month === 12){\r\n      month = 0;\r\n      year++;\r\n    }\r\n    thisDate = getFormatDate(new Date(year,month,day));\r\n    if(curDate.full>thisDate.full){\r\n      window.alert('삭제는 작성일 기준 익월 15일까지 가능합니다.');\r\n      return;\r\n    }\r\n    let agree = window.confirm('삭제하면 복구가 불가능합니다. 삭제하시겠습니까?');\r\n    if(agree){\r\n      firebase.database().ref(`hair/list/${user_uid}/${uid}`).remove();\r\n      setRerender(!Rerender)\r\n    }\r\n  }\r\n\r\n  const [ModifyPop, setModifyPop] = useState(false);\r\n  const [ModifyData, setModifyData] = useState();\r\n  const onModify = (uid,date,user_uid) => {\r\n    firebase.database().ref(`hair/list/${user_uid}/${uid}`)\r\n    .once(\"value\", (snapshot => {\r\n      setModifyData(snapshot.val());\r\n      return;\r\n    }))\r\n    let curDate = getFormatDate(new Date());\r\n    let thisDate = getFormatDate(new Date(date));\r\n    let year = thisDate.year;\r\n    let month = thisDate.og_month;\r\n    let day = thisDate.og_day;\r\n    month++;\r\n    day = 15;\r\n    if(month === 12){\r\n      month = 0;\r\n      year++;\r\n    }\r\n    thisDate = getFormatDate(new Date(year,month,day));\r\n    if(curDate.full>thisDate.full){\r\n      window.alert('수정은 작성일 기준 익월 15일까지 가능합니다.');\r\n      return;\r\n    }\r\n    setModifyPop(true)\r\n  }\r\n  const modifyOff = () => {\r\n    setModifyData('');\r\n    setModifyPop(false)\r\n  }\r\n\r\n  const onSubmitModify = (e) => {\r\n    e.preventDefault();\r\n    let date = e.target.date.value;\r\n    let year = date.substr(0,4);\r\n    let month = date.substr(5,2);\r\n    month = parseInt(month) - 1;\r\n    let day = date.substr(8,2);\r\n    date = getFormatDate(new Date(year,month,day))\r\n    firebase\r\n    .database()\r\n    .ref(\"hair/list\")\r\n    .child(`${ModifyData.user_uid}/${ModifyData.uid}`)\r\n    .update({\r\n      date:date,\r\n      price: e.target.price.value,\r\n      relation: e.target.querySelector('.ant-select-selection-item').title,\r\n      service: e.target.service.value,\r\n    });\r\n    setRerender(!Rerender)\r\n    modifyOff()\r\n  }\r\n\r\n\r\n  const onSelectDate = (date, dateString) => {\r\n    let arr = [];\r\n    arr.push(getFormatDate(date[0]._d))\r\n    arr.push(getFormatDate(date[1]._d))\r\n    setSearchDate(arr)\r\n  }\r\n  const disabledDate = (current) => {\r\n    return current && current > moment();\r\n  }\r\n\r\n  const [sosokType, setsosokType] = useState('1')\r\n  const onSosokChange = (e) => {\r\n    let excelArr = excelDataCopy;\r\n    const type = e.target.value;\r\n    setsosokType(type);\r\n    if(type === '1'){      \r\n      setHairData(MyHairData);\r\n      setTypeTotalPrice(TotalPrice);\r\n      setPersnalData(TotalPersnalData);\r\n    }\r\n    if(type === '2'){\r\n      excelArr = excelArr.filter(el => el.sosok === '미트리');\r\n      setHairData(MetreeData);\r\n      setTypeTotalPrice(MeTotalPrice);\r\n      setPersnalData(MePersonalData);\r\n    }\r\n    if(type === '3'){\r\n      excelArr = excelArr.filter(el => el.sosok === '푸드킹');\r\n      setHairData(FoodkingData);\r\n      setTypeTotalPrice(FdTotalPrice);\r\n      setPersnalData(FdPersonalData);\r\n    }\r\n    if(type === '4'){\r\n      excelArr = excelArr.filter(el => el.sosok === '미에르');\r\n      setHairData(MeureData);\r\n      setTypeTotalPrice(ErTotalPrice);\r\n      setPersnalData(ErPersonalData);\r\n    }\r\n    setExcelData(excelArr);\r\n    \r\n\r\n\r\n  }\r\n  \r\n    const columns = [\r\n      {\r\n        title: '이용일',\r\n        dataIndex: 'date',\r\n        key: 'date',\r\n        align: 'center',\r\n        sorter: {\r\n          compare: (a, b) => a.date.full - b.date.full,\r\n          multiple: 3,\r\n        },\r\n        render: data => data ? data.full_ : '',\r\n      },\r\n      {\r\n        title: '작성일',\r\n        dataIndex: 'date,timestamp',\r\n        key: 'timestamp',\r\n        align: 'center',\r\n        sorter: {\r\n          compare: (a, b) => a.timestamp - b.timestamp,\r\n          multiple: 2,\r\n        },\r\n        render: (text,row) => row['distance'] > 4 ? <span style={{background:\"#e12424\",color:\"#fff\"}}>{getFormatDate(new Date(row['timestamp'])).full_}</span> : (\r\n          <>\r\n          {getFormatDate(new Date(row['timestamp'])).full_}\r\n          </>\r\n          ),\r\n      },\r\n      {\r\n        title: '소속',\r\n        dataIndex: 'sosok',\r\n        key: 'sosok',\r\n        align: 'center',\r\n        sorter: {\r\n          compare: (a, b) => a.sosok - b.sosok,\r\n          multiple: 1,\r\n        },\r\n        render: data => {\r\n          let txt\r\n          if(data == 1){\r\n            txt = \"미트리\";\r\n          }\r\n          if(data == 2){\r\n            txt = \"푸드킹\";\r\n          }\r\n          if(data == 3){\r\n            txt = \"미에르\";\r\n          }\r\n          return txt\r\n        }\r\n      },\r\n      {\r\n        title: '부서',\r\n        dataIndex: 'part',\r\n        key: 'part',\r\n        align: 'center',\r\n      },\r\n      {\r\n        title: '이름',\r\n        dataIndex: 'name',\r\n        key: 'name',\r\n        align: 'center',\r\n      },\r\n      {\r\n        title: '이용자와의 관계',\r\n        dataIndex: 'relation',\r\n        key: 'relation',\r\n        align: 'center',\r\n      },\r\n      {\r\n        title: '서비스명',\r\n        dataIndex: 'service',\r\n        key: 'service',\r\n        align: 'center'\r\n      },\r\n      {\r\n        title: '가격',\r\n        dataIndex: 'price',\r\n        key: 'price',\r\n        align: 'center',\r\n        render: data => data ? `${commaNumber(data)}원` : ''\r\n      },\r\n      {\r\n        title: '서명',\r\n        dataIndex: 'signature',\r\n        key: 'signature',\r\n        align: 'center',\r\n        render: data => data ? <img style={{height:\"40px\"}} src={data} /> : '',\r\n      },\r\n      {\r\n        title: '관리',\r\n        dataIndex: ['uid','timestamp','user_uid','date'],\r\n        key: 'uid',\r\n        align: 'center',\r\n        render: (text,row) => row['uid'] ? (\r\n          <>\r\n            <Button style={{marginRight:\"5px\"}} onClick={()=>{onModify(row['uid'],row['timestamp'],row['user_uid'])}}>수정</Button>\r\n            <Button onClick={()=>{onDelete(row['uid'],row['timestamp'],row['user_uid'])}}>삭제</Button>            \r\n          </>\r\n          ) : '',\r\n      }\r\n      \r\n    ]\r\n\r\n   \r\n    const onSubmit = async (e) => {\r\n      e.preventDefault();\r\n      try {\r\n        firebase.database().ref('hair')\r\n        .update({\r\n          info:e.target.check_info_txt.value\r\n        })\r\n        .then(res => {\r\n          message.success(\"저장되었습니다.\")\r\n        })\r\n      }catch (error) {\r\n        console.error(error);\r\n      }\r\n    }\r\n\r\n    \r\n    \r\n  return (\r\n    <>\r\n      <form onSubmit={onSubmit}>\r\n      <h3 className=\"title\" style={{ margin: \"15px 0 5px 0\" }}>\r\n        공지사항\r\n      </h3>\r\n      <div className=\"flex-box\">\r\n        {CheckInfoTxt &&\r\n          <TextArea name=\"check_info_txt\" defaultValue={CheckInfoTxt} />  \r\n        }\r\n        {!CheckInfoTxt &&\r\n          <TextArea name=\"check_info_txt\" defaultValue=\"\" /> \r\n        }\r\n        <Button\r\n          htmlType=\"submit\"\r\n          type=\"primary\"\r\n          size=\"large\" \r\n          style={{flex:\"1\",marginLeft:\"10px\",height:\"auto\"}}               \r\n        >\r\n          저장\r\n        </Button>\r\n      </div>\r\n      </form>\r\n      \r\n      <RangePicker \r\n        picker=\"month\" \r\n        style={{marginTop:\"20px\"}}\r\n        defaultValue={[moment(),moment()]}\r\n        disabledDate={disabledDate} onChange={onSelectDate}\r\n      />\r\n      <Radio.Group value={sosokType} onChange={onSosokChange} style={{ marginBottom: 16,marginLeft:\"10px\" }}>\r\n        <Radio.Button value=\"1\">전체</Radio.Button>\r\n        <Radio.Button value=\"2\">미트리</Radio.Button>\r\n        <Radio.Button value=\"3\">푸드킹</Radio.Button>\r\n        <Radio.Button value=\"4\">미에르</Radio.Button>\r\n      </Radio.Group>\r\n      <h3 className=\"title\">개인별 합계</h3>\r\n      {PersnalData &&\r\n        <table className=\"fl-table\" style={{marginBottom:\"20px\",width:\"25%\"}}>\r\n          <thead>\r\n            <tr style={{borderBottom:'1px solid #ddd',borderTop:'2px solid #555'}}>\r\n              <th scope=\"col\">이름</th>\r\n              <th scope=\"col\">합계</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n          {PersnalData && PersnalData.map((el) => (\r\n            <>\r\n              {el.date && el.date.map((list,_idx) => (\r\n                <>                      \r\n                  <tr key={_idx} style={{borderBottom:'1px solid #ddd'}}>\r\n                    {_idx == 0 &&\r\n                    <th scope=\"row\" rowSpan={el.date.length} style={{background:'#f1f1f1'}}>\r\n                      {el.name}\r\n                    </th>\r\n                    }\r\n                    {_idx == 0 &&\r\n                    <>\r\n                      <th scope=\"row\" rowSpan={el.date.length}>\r\n                        {commaNumber(el.total_price)}\r\n                      </th>\r\n                    </>\r\n                    }\r\n                  </tr>\r\n                </>\r\n              ))}     \r\n            </>\r\n          ))\r\n          }\r\n          </tbody>\r\n        </table>\r\n      }\r\n\r\n      <h3 className=\"title\">개인별 내역</h3>\r\n      {PersnalData &&\r\n        <table className=\"fl-table\" style={{marginBottom:\"20px\"}}>\r\n          <thead>\r\n            <tr style={{borderBottom:'1px solid #ddd',borderTop:'2px solid #555'}}>\r\n              <th scope=\"col\">이름(소속/부서)</th>\r\n              <th scope=\"col\">이용일</th>\r\n              <th scope=\"col\">관계</th>\r\n              <th scope=\"col\">서비스</th>\r\n              <th scope=\"col\">가격</th>\r\n              <th scope=\"col\">총 이용횟수</th>\r\n              <th scope=\"col\">합계</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n          {PersnalData && PersnalData.map((el) => (\r\n            <>\r\n              {el.date && el.date.map((list,_idx) => (\r\n                <>                      \r\n                  <tr key={_idx} style={{borderBottom:'1px solid #ddd'}}>\r\n                    {_idx == 0 &&\r\n                    <th scope=\"row\" rowSpan={el.date.length} style={{background:'#f1f1f1'}}>\r\n                      {el.name}/\r\n                      {el.sosok === '1' ? \"미트리\" :\r\n                       el.sosok === '2' ? \"푸드킹\" : \r\n                       el.sosok === '3' ? \"미에르\" : \"\" \r\n                      }/\r\n                      {el.part}\r\n                    </th>\r\n                    }\r\n                    <td>{list.full_}</td>\r\n                    <td>{el.relation[_idx]}</td>\r\n                    <td> {el.service[_idx]}</td>\r\n                    <td>{commaNumber(el.price[_idx])}</td>\r\n                    {_idx == 0 &&\r\n                    <>\r\n                      <td rowSpan={el.date.length}>{el.date.length}회</td>\r\n                      <th scope=\"row\" rowSpan={el.date.length}>\r\n                        {commaNumber(el.total_price)}\r\n                      </th>\r\n                    </>\r\n                    }\r\n                  </tr>\r\n                </>\r\n              ))}     \r\n            </>\r\n          ))\r\n          }\r\n          </tbody>\r\n        </table>\r\n      }\r\n      <div className=\"flex-box\" style={{marginBottom:\"8px\",marginTop:\"25px\"}}>\r\n      <h3 className=\"title\">전체 내역</h3>      \r\n      {excelData &&\r\n        <Button style={{marginLeft:\"10px\"}}>\r\n          <CSVLink \r\n            headers={excelHeaders} \r\n            data={excelData} \r\n            filename={`metree-hair${curDate.full}.csv`} \r\n            target=\"_blank\"\r\n          >\r\n            <antIcon.AiOutlineFileExcel style={{position:\"relative\",top:\"3px\",fontSize:\"17px\",marginRight:\"3px\"}} />전체내역 엑셀 다운로드\r\n          </CSVLink>\r\n        </Button>\r\n        }\r\n      </div>\r\n      {MyHairData &&\r\n        <>          \r\n          <Table \r\n          size=\"small\"\r\n          pagination={{\r\n            pageSize:20\r\n          }}\r\n          align=\"center\" columns={columns} dataSource={HairData} \r\n          footer={() => (\r\n            <>\r\n              <div style={{textAlign:\"center\",fontWeight:\"600\"}}>가격 합계 : {commaNumber(TypeTotalPrice)}원</div>\r\n            </>\r\n          )}\r\n          /> \r\n\r\n        </>\r\n      }\r\n      {\r\n        ModifyPop && ModifyData &&\r\n        <>\r\n          <OderModalPopup className=\"call_modify\" style={{\r\n            top:\"50%\",\r\n            left:\"50%\",\r\n            transform:\"translate(-50%,-50%)\",\r\n            position:\"fixed\",\r\n          }}>\r\n            <form className=\"order-form-box\" onSubmit={onSubmitModify}>\r\n              <div className=\"input-box\" style={{marginBottom:\"5px\"}}>\r\n                <span className=\"tit\">이용날짜</span>\r\n                <DatePicker name=\"date\" defaultValue={moment(ModifyData.date.full_)} />\r\n              </div>\r\n              <div className=\"input-box\" style={{marginBottom:\"5px\"}}>\r\n                <span className=\"tit\">관계</span>\r\n                <Select name=\"relation\" defaultValue={ModifyData.relation} style={{ width: 120 }}>\r\n                  <Option value=\"본인\">본인</Option>\r\n                  <Option value=\"배우자\">배우자</Option>\r\n                  <Option value=\"자녀\">자녀</Option>\r\n                </Select>\r\n              </div>\r\n              <div className=\"input-box\" style={{marginBottom:\"5px\"}}>\r\n                <span className=\"tit\">서비스명</span>\r\n                <Input name=\"service\" defaultValue={ModifyData.service} />\r\n              </div>\r\n              <div className=\"input-box\" style={{marginBottom:\"5px\"}}>\r\n                <span className=\"tit\">가격</span>\r\n                <Input prefix=\"￦\" type=\"number\" name=\"price\" defaultValue={ModifyData.price} />\r\n              </div>\r\n              <div className=\"btn-box\">\r\n                <Button type=\"primary\" htmlType=\"submit\">수정하기</Button>\r\n                <Button onClick={modifyOff} style={{marginLeft:\"5px\"}}>닫기</Button>\r\n              </div>\r\n            </form>\r\n          </OderModalPopup>\r\n        </>\r\n      }\r\n\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default HairAdmin\r\n","D:\\프로젝트\\sy-cafe-order\\src\\component\\Research\\ResearchWrite.js",["382","383","384","385","386","387","388","389","390","391"],"import React, { useState, useRef, useEffect } from 'react'\r\nimport { useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Form, Input, Button, Space, Radio, Checkbox, Upload, Switch, DatePicker, Select, Row, Col } from 'antd';\r\nimport { MinusCircleOutlined, PlusOutlined, UploadOutlined } from '@ant-design/icons';\r\nimport uuid from \"react-uuid\";\r\nimport firebase from \"../../firebase\";\r\nimport { getFormatDate } from \"../CommonFunc\";\r\nimport { OderModalPopup } from \"../OrderModal\";\r\nimport moment from 'moment';\r\nconst { RangePicker } = DatePicker;\r\nfunction ResearchWrite() {\r\n  const userInfo = useSelector((state) => state.user.currentUser);\r\n\r\n  const [TotalUser, setTotalUser] = useState()\r\n  const [TempList, setTempList] = useState()\r\n  useEffect(() => {\r\n    let userArr = [];\r\n    firebase\r\n    .database()\r\n    .ref(\"users\")\r\n    .once(\"value\", (snapshot) => {\r\n      snapshot.forEach(el=>{\r\n        userArr.push({\r\n          uid:el.key,\r\n          auth:el.val().auth ? el.val().auth : \"\",\r\n          name:el.val().name,\r\n          part:el.val().part,\r\n          role:el.val().role\r\n        })\r\n      })\r\n      userArr.sort((a,b)=>{\r\n        return a.part < b.part ? -1 : 1 \r\n      })\r\n      console.log(userArr)\r\n      setTotalUser(userArr);\r\n    });\r\n\r\n    let arr = [];\r\n    firebase.database().ref(`research_temp/${userInfo.uid}`)\r\n    .once(\"value\")\r\n    .then((snapshot) => {\r\n      snapshot.forEach(el=>{\r\n        arr.push(el.val())          \r\n      })\r\n      arr = arr.sort((a,b)=>{\r\n        return b.timestamp - a.timestamp\r\n      })\r\n      setTempList(arr)\r\n    })\r\n\r\n    return () => {\r\n      \r\n    }\r\n  }, [])\r\n\r\n  const btnToList = useRef();\r\n\r\n  const uid = uuid();\r\n\r\n  const disabledDate = (current) => {\r\n    return current && current < moment().subtract(1, 'days');\r\n  }\r\n\r\n  const [DateLimitState, setDateLimitState] = useState(false)\r\n  const dateLimit = () => {\r\n    setDateLimitState(!DateLimitState)\r\n  }  \r\n\r\n  const finishDataSave = (values) => {\r\n    let uploadURL = [];            \r\n    const getImgUrl = async () => {\r\n    values.upload && values.upload.map(el=>{\r\n    let getImg = async () => {\r\n    let uploadTask = await firebase\r\n        .storage()\r\n        .ref(\"research\")\r\n        .child(`image/${uid}/${uuid()}`)          \r\n        .put(el.originFileObj, el.type);\r\n          uploadTask.ref.getDownloadURL()\r\n          .then(url => {\r\n            uploadURL.push({\r\n              name:el.originFileObj.name,\r\n              url:url\r\n            });\r\n            firebase.database().ref('research')\r\n            .child(uid)\r\n            .update({\r\n              image: uploadURL\r\n            });                       \r\n          });\r\n        }\r\n        getImg();\r\n      })\r\n    }\r\n    getImgUrl(); \r\n      firebase.database().ref('research')\r\n      .child(uid)\r\n      .update({\r\n        title:values.title,\r\n        type:values.type,\r\n        option:values.option_list ? values.option_list : '',\r\n        member:values.member ? values.member : false,\r\n        member_check:values.member_check ? values.member_check : '',\r\n        etc:values.etc ? values.etc : '',\r\n        uid:uid,\r\n        alba:values.alba ? values.alba : false,\r\n        intern:values.intern ? values.intern : false,\r\n        secret:values.secret ? values.secret : false,\r\n        date:getFormatDate(new Date()).full_,\r\n        timestamp:new Date().getTime(),\r\n        limit_start:values.time_limit ? values.time_limit[0]._d.getTime() : 0,\r\n        limit_end:values.time_limit ? values.time_limit[1]._d.getTime() : 99999999999999,\r\n      });\r\n    }      \r\n\r\n \r\n  \r\n  const onFinish = async (values) => {\r\n    if(values.temp){\r\n      let uid = uuid();\r\n      firebase.database().ref(`research_temp/${userInfo.uid}`)\r\n      .child(uid)\r\n      .update({\r\n        title:values.title,\r\n        type:values.type,\r\n        option:values.option_list ? values.option_list : '',\r\n        member:values.member ? values.member : false,\r\n        member_check:values.member_check ? values.member_check : '',\r\n        etc:values.etc ? values.etc : '',\r\n        uid:uid,\r\n        alba:values.alba ? values.alba : false,\r\n        intern:values.intern ? values.intern : false,\r\n        secret:values.secret ? values.secret : false,\r\n        date:getFormatDate(new Date()).full_,\r\n        timestamp:new Date().getTime(),\r\n        limit_start:values.time_limit ? values.time_limit[0]._d.getTime() : 0,\r\n        limit_end:values.time_limit ? values.time_limit[1]._d.getTime() : 99999999999999,\r\n      });\r\n      btnToList.current && btnToList.current.click();\r\n    }else{\r\n      if(values.type != 2){\r\n        let listLength = values.option_list.length;\r\n        let count = 0;\r\n\r\n        values.option_list.map(el=>{\r\n          el.option_photo = el.option_photo ? el.option_photo : \"\";\r\n          el.option_a = el.option_a ? el.option_a : \"\";\r\n          el.option_type = el.option_type ? el.option_type : \"\";\r\n          let urlArr = [];  \r\n          count++;    \r\n          const getOptionImgUrl = (photo) => {\r\n              if(!photo){\r\n                if(count == listLength){\r\n                  finishDataSave(values);\r\n                  btnToList.current && btnToList.current.click();\r\n                }\r\n              }else{\r\n              photo.map((list,idx)=>{\r\n              let getImg = async () => {\r\n              let uploadTask = await firebase\r\n                  .storage()\r\n                  .ref(\"research\")\r\n                  .child(`image/${uid}/${uuid()}`)          \r\n                  .put(list.originFileObj, list.type);\r\n                    uploadTask.ref.getDownloadURL()\r\n                    .then(url => {\r\n                      urlArr.push({\r\n                        uid:idx,\r\n                        status:\"done\",\r\n                        name:list.originFileObj.name,\r\n                        url:url\r\n                      });\r\n                      firebase.database().ref('research')\r\n                      .child(`${uid}/option/${idx}`)\r\n                      .update({\r\n                        option_photo: urlArr\r\n                      });                \r\n                      el.option_photo = urlArr ? urlArr : '';                \r\n                      if(count == listLength){\r\n                        finishDataSave(values);\r\n                        btnToList.current && btnToList.current.click();\r\n                      }\r\n                    });\r\n                  }\r\n                  getImg();              \r\n                })\r\n              }          \r\n            }\r\n          getOptionImgUrl(el.option_photo);\r\n          el.option_photo = el.option_photo ? el.option_photo : '';\r\n        })\r\n      }else{\r\n        finishDataSave(values);\r\n        btnToList.current && btnToList.current.click();\r\n      }\r\n    }\r\n      \r\n  };\r\n\r\n\r\n\r\n  const [TypeState, setTypeState] = useState()\r\n  const typeOptions = [\r\n    {label: '선다형', value: 1},\r\n    {label: '서술형', value: 2},\r\n    {label: '복합형', value: 3}\r\n  ]\r\n  const onChangeType = (e) => {\r\n    setTypeState(e.target.value)\r\n  }\r\n\r\n  const normFile = (e) => {\r\n    if (Array.isArray(e)) {\r\n      return e;\r\n    }\r\n    return e && e.fileList;\r\n  };\r\n\r\n  const onSelectChange = (e) => {\r\n    console.log(e)\r\n  }\r\n\r\n\r\n  const [onMember, setonMember] = useState(false)\r\n  const onMemberChange = (e) => {\r\n    console.log(TotalUser)\r\n    setonMember(!onMember)\r\n  }\r\n\r\n\r\n  const onTempSubmit = (e) => {\r\n    e.preventDefault();\r\n    console.log(document.forms.dynamic_form_nest_item)\r\n  }\r\n\r\n  const [TempState, setTempState] = useState(false)\r\n  const onTempPop = () => {\r\n    setTempState(!TempState)\r\n  }\r\n\r\n\r\n  return (\r\n    <>     \r\n      <Form name=\"dynamic_form_nest_item\" className=\"research-form\" onFinish={onFinish} autoComplete=\"off\">\r\n        <Form.Item\r\n          name=\"title\"\r\n          rules={[{ required: true, message: '제목을 입력해 주세요.'}]}\r\n        >\r\n          <Input placeholder=\"제목\" />\r\n        </Form.Item> \r\n        <Form.Item \r\n          name=\"type\"\r\n          label=\"유형 선택\"\r\n          rules={[{ required: true, message: '타입을 선택해 주세요.'}]}\r\n        >\r\n          <Radio.Group\r\n            options={typeOptions}\r\n            onChange={onChangeType}\r\n            value={TypeState}\r\n            optionType=\"button\"\r\n          />\r\n        </Form.Item>\r\n        {TypeState && TypeState == 1 &&\r\n          <Form.List name=\"option_list\">\r\n            {(fields, { add, remove }) => (\r\n              <>\r\n                {fields.map(({ key, name, fieldKey, ...restField }) => (\r\n                  <Space key={key} style={{ display: 'flex', marginBottom: 5 }} align=\"baseline\">\r\n                    <Form.Item\r\n                      {...restField}\r\n                      name={[name, 'option']}\r\n                      fieldKey={[fieldKey, 'option']}\r\n                      rules={[{ required: true, message: '항목을 입력해 주세요.' }]}\r\n                    >\r\n                      <Input placeholder=\"항목\" />\r\n                    </Form.Item>                  \r\n                    <MinusCircleOutlined onClick={() => remove(name)} />\r\n                  </Space>\r\n                ))}\r\n                <Form.Item>\r\n                  <Button type=\"dashed\" onClick={() => add()} block icon={<PlusOutlined />}>\r\n                    Add field\r\n                  </Button>\r\n                </Form.Item>\r\n              </>\r\n            )}\r\n          </Form.List>\r\n        }\r\n        {TypeState && TypeState == 3 &&\r\n          <Form.List name=\"option_list\">\r\n            {(fields, { add, remove }) => (\r\n              <>\r\n                {fields.map(({ key, name, fieldKey, ...restField }) => (\r\n                  <Space key={key} style={{ display: 'flex', marginBottom: 5 }} align=\"baseline\">\r\n                    <Form.Item\r\n                      {...restField}\r\n                      name={[name, 'option_q']}\r\n                      fieldKey={[fieldKey, 'option_q']}\r\n                      rules={[{ required: true, message: '질문을 입력해 주세요.' }]}\r\n                    >\r\n                      <Input placeholder=\"질문\" />\r\n                    </Form.Item>     \r\n                    <Form.Item \r\n                      label=\"유형선택\"\r\n                      {...restField}\r\n                      name={[name, 'option_type']}\r\n                      fieldKey={[fieldKey, 'option_type']}\r\n                    >\r\n                      <Select defaultValue=\"0\" onChange={onSelectChange}>\r\n                        <Select.Option value=\"0\">서술형</Select.Option>\r\n                        <Select.Option value=\"1\">체크형</Select.Option>\r\n                        <Select.Option value=\"2\">선택형</Select.Option>\r\n                      </Select>\r\n                    </Form.Item> \r\n                    <Form.Item\r\n                      {...restField}\r\n                      name={[name, 'option_a']}\r\n                      fieldKey={[fieldKey, 'option_a']}\r\n                    >\r\n                      <Input placeholder=\"항목이 있을때만 ,로 구분 하여 작성\" />\r\n                    </Form.Item> \r\n                    <Form.Item\r\n                      {...restField}\r\n                      name={[name, 'option_photo']}\r\n                      label=\"이미지 업로드\"\r\n                      fieldKey={[fieldKey, 'option_photo']}\r\n                      getValueFromEvent={normFile}                      \r\n                    >\r\n                      <Upload name=\"logo\" listType=\"picture\">\r\n                        <Button icon={<UploadOutlined />}>Click to upload</Button>\r\n                      </Upload>\r\n                    </Form.Item>\r\n                    <MinusCircleOutlined onClick={() => remove(name)} />\r\n                  </Space>\r\n                ))}\r\n                <Form.Item>\r\n                  <Button type=\"dashed\" onClick={() => add()} block icon={<PlusOutlined />}>\r\n                    Add field\r\n                  </Button>\r\n                </Form.Item>\r\n              </>\r\n            )}\r\n          </Form.List>\r\n        }        \r\n        <Form.Item\r\n          name=\"upload\"\r\n          label=\"이미지 업로드\"\r\n          valuePropName=\"fileList\"\r\n          getValueFromEvent={normFile}\r\n        >\r\n          <Upload name=\"logo\" listType=\"picture\">\r\n            <Button icon={<UploadOutlined />}>Click to upload</Button>\r\n          </Upload>\r\n        </Form.Item>\r\n        <div className=\"flex-box\">\r\n          <Form.Item\r\n            name=\"alba\"\r\n            valuePropName=\"checked\"\r\n            style={{marginRight:\"13px\"}}\r\n          >\r\n            <Checkbox>알바 제외</Checkbox>\r\n          </Form.Item> \r\n          <Form.Item\r\n            name=\"intern\"\r\n            valuePropName=\"checked\"\r\n            style={{marginRight:\"13px\"}}\r\n          >\r\n            <Checkbox>인턴 제외</Checkbox>\r\n          </Form.Item> \r\n          <Form.Item\r\n            name=\"secret\"\r\n            valuePropName=\"checked\"            \r\n            style={{marginRight:\"13px\"}}\r\n          >\r\n            <Checkbox>결과 비공개</Checkbox>\r\n          </Form.Item>          \r\n          <Form.Item\r\n            name=\"member\"\r\n            valuePropName=\"checked\"\r\n            onChange={onMemberChange}\r\n          >\r\n            <Checkbox>제외 선택</Checkbox>\r\n          </Form.Item> \r\n        </div>\r\n        {onMember && TotalUser &&\r\n          <>\r\n            <Form.Item name=\"member_check\">\r\n              <Checkbox.Group>\r\n                <Row>                \r\n                {TotalUser.map((el,idx)=>(\r\n                  <Col span={4}>\r\n                    <Checkbox key={idx} value={el.uid}>{el.name}({el.part})</Checkbox>\r\n                  </Col>\r\n                ))}\r\n                </Row>\r\n              </Checkbox.Group>\r\n            </Form.Item>\r\n          </>\r\n        }\r\n        <Form.Item\r\n          name=\"etc\"          \r\n          rules={[{ required: true}]}\r\n        >\r\n          <Input.TextArea placeholder=\"설명\" />\r\n        </Form.Item> \r\n        <Form.Item\r\n          label=\"날짜설정\" style={{marginBottom:\"7px\"}}\r\n        >\r\n          <Switch onChange={dateLimit} />\r\n        </Form.Item>\r\n        {DateLimitState &&\r\n          <Form.Item\r\n            name=\"time_limit\"\r\n          >\r\n            <RangePicker  \r\n              showTime \r\n              disabledDate={disabledDate} \r\n            />\r\n          </Form.Item>\r\n        }\r\n        <Form.Item\r\n          name=\"temp\"\r\n          valuePropName=\"checked\"\r\n        >\r\n          <Checkbox>임시저장</Checkbox>\r\n        </Form.Item>\r\n\r\n        <div className=\"flex-box j-center\" style={{marginTop:\"15px\",position:\"relative\"}}>\r\n          {TempList &&\r\n            <>\r\n              <Button onClick={onTempPop}>\r\n                임시저장 목록({TempList.length})            \r\n              </Button>\r\n              {TempState &&\r\n                <OderModalPopup className=\"research-temp-list\">\r\n                  <ul>\r\n                  {TempList.map((el,idx)=>(\r\n                    <li>\r\n                      <Link className=\"flex-box between\" to={{\r\n                        pathname: `/research_temp`,\r\n                        state: {\r\n                          uid:el.uid,\r\n                          temp:true\r\n                        }\r\n                      }}>\r\n                        <span className=\"subject\">{el.title}</span>\r\n                        <span className=\"date\">{el.date}</span>\r\n                      </Link>\r\n                    </li>\r\n                  ))}\r\n                  </ul>\r\n                </OderModalPopup>\r\n              }\r\n            </>\r\n          }\r\n          <Button type=\"primary\" htmlType=\"submit\" style={{width:\"100px\",marginLeft:\"5px\"}}>\r\n            등록하기\r\n          </Button>\r\n          <Button style={{marginLeft:\"5px\"}}>\r\n            <Link ref={btnToList} to=\"/research\">목록으로</Link>\r\n          </Button>\r\n        </div>    \r\n      </Form>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ResearchWrite\r\n","D:\\프로젝트\\sy-cafe-order\\src\\component\\Admin\\InvenAdmin.js",["392","393","394","395","396","397","398","399","400","401","402","403","404","405","406","407","408"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport {\r\n  Form,\r\n  Button,\r\n  Input,\r\n  Radio,\r\n  Checkbox,\r\n  Row,\r\n  Divider,\r\n  Switch,\r\n  message,\r\n  Table,\r\n  Upload,\r\n  Modal,\r\n  InputNumber,\r\n  Popconfirm,\r\n  DatePicker,\r\n} from \"antd\";\r\nimport { UploadOutlined } from \"@ant-design/icons\";\r\nimport * as antIcon from \"react-icons/ai\";\r\nimport ImgUpload from \"./ImgUpload\";\r\nimport firebase from \"../../firebase\";\r\nimport styled from \"styled-components\";\r\nimport uuid from \"react-uuid\";\r\nimport moment from \"moment\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getFormatDate, getArr, getMax } from \"../CommonFunc\";\r\nimport { CSVLink } from \"react-csv\";\r\nimport { once } from \"lodash\";\r\nimport AdminModifyModal from \"./inventory/AdminModifyModal\";\r\nimport InvenTelAdmin from \"./inventory/InvenTelAdmin\";\r\nconst { RangePicker } = DatePicker;\r\n\r\nfunction InvenAdmin() {\r\n  const nowDate = getFormatDate(new Date());\r\n  const curDate = nowDate.full;\r\n  const curMonth = curDate.substr(0, curDate.length - 2);\r\n  const db = firebase.database();\r\n  const userInfo = useSelector((state) => state.user.currentUser);\r\n  const [ProdItem, setProdItem] = useState();\r\n  const formRef = useRef();\r\n\r\n  const [Render, setRender] = useState(false);\r\n\r\n  const [submitDate, setsubmitDate] = useState(nowDate);\r\n\r\n  const onRerender = () => {\r\n    message.success(\"검색완료\");\r\n    setRender(!Render);\r\n  };\r\n\r\n  const onSubmitDate = (date, dateString) => {\r\n    let res;\r\n    res = date ? getFormatDate(new Date(date._d)) : getFormatDate(new Date());\r\n    setsubmitDate(res);\r\n  };\r\n  const [DateStart, setDateStart] = useState(curDate);\r\n  const [DateEnd, setDateEnd] = useState(curDate);\r\n  const onSearchDate = (date, dateString) => {\r\n    let start;\r\n    let end;\r\n    start = date ? getFormatDate(new Date(date[0]._d)).full : \"\";\r\n    end = date ? getFormatDate(new Date(date[1]._d)).full : \"\";\r\n    setDateStart(start);\r\n    setDateEnd(end);\r\n  };\r\n\r\n  const [SearchMonth, setSearchMonth] = useState(curMonth);\r\n  const onSearchMonth = (date, dateString) => {\r\n    let regex = /-/g;\r\n    let month = dateString.replace(regex, \"\");\r\n    setSearchMonth(month);\r\n  };\r\n\r\n  const excelList = [\r\n    { label: \"품명\", key: \"name\" },\r\n    { label: \"재고\", key: \"ea\" },\r\n    { label: \"장소\", key: \"place\" },\r\n    { label: \"비고\", key: \"etc\" },\r\n  ];\r\n\r\n  const excelHeaders = [\r\n    { label: \"등록일자\", key: \"date_\" },\r\n    { label: \"입출고일자\", key: \"real_date_\" },\r\n    { label: \"입출고\", key: \"type\" },\r\n    { label: \"사용자\", key: \"name\" },\r\n    { label: \"품명\", key: \"prod\" },\r\n    { label: \"수량\", key: \"val\" },\r\n    { label: \"출납 후 재고\", key: \"ea\" },\r\n  ];\r\n\r\n  const excelHeaders2 = [\r\n    { label: \"품명\", key: \"prod\" },\r\n    { label: \"재고\", key: \"ea\" },\r\n  ];\r\n\r\n  const excelHeaders3 = [\r\n    { label: \"품명\", key: \"prod\" },\r\n    { label: \"입고\", key: \"input\" },\r\n    { label: \"출고\", key: \"output\" },\r\n  ];\r\n\r\n  const [ModifyUid, setModifyUid] = useState(\"\");\r\n  const [ModifyData, setModifyData] = useState();\r\n\r\n  const [Category, setCategory] = useState();\r\n  const [CateList, setCateList] = useState();\r\n  const onCateInput = (e) => {\r\n    setCategory(e.target.value);\r\n  };\r\n  const onCateInit = () => {\r\n    db.ref(\"inventory\").update({\r\n      category: Category,\r\n    });\r\n    message.success(\"품목이 업데이트 되었습니다.\");\r\n  };\r\n  useEffect(() => {\r\n    db.ref(\"inventory/category\").on(\"value\", (snapshot) => {\r\n      let obj = {};\r\n      if (snapshot.val()) {\r\n        obj = {\r\n          txt: snapshot.val(),\r\n          arr: snapshot.val().split(\",\"),\r\n        };\r\n        setCateList(obj.arr);\r\n        setCategory(obj.txt);\r\n      }\r\n    });\r\n\r\n    db.ref(\"inventory/list\").on(\"value\", (snapshot) => {\r\n      let arr = [];\r\n      snapshot.forEach((item) => {\r\n        let obj = item.val();\r\n        arr.push(obj);\r\n      });\r\n      arr.sort((a, b) => {\r\n        return a.name < b.name ? -1 : a.name > b.name ? 1 : 0;\r\n      });\r\n      setProdItem(arr);\r\n    });\r\n\r\n    return () => {\r\n      db.ref(\"inventory/list\").off();\r\n    };\r\n  }, [Render]);\r\n\r\n  useEffect(() => {\r\n    ModifyUid &&\r\n      db\r\n        .ref(\"inventory/list\")\r\n        .child(ModifyUid)\r\n        .once(\"value\")\r\n        .then((item) => {\r\n          setModifyData(item.val());\r\n        });\r\n    return () => {\r\n      db.ref(\"inventory/list\").off();\r\n    };\r\n  }, [ModifyUid]);\r\n\r\n  const [ThisLogUid, setThisLogUid] = useState();\r\n  const [ThisLogData, setThisLogData] = useState();\r\n  const onLogList = (uid, prod, ea) => {\r\n    setIsLogVisible(true);\r\n    let obj = {\r\n      uid,\r\n      prod,\r\n      ea,\r\n    };\r\n    setThisLogUid(obj);\r\n  };\r\n  useEffect(() => {\r\n    ThisLogUid &&\r\n      db\r\n        .ref(\"inventory/log\")\r\n        .orderByKey()\r\n        .startAt(DateStart)\r\n        .endAt(DateEnd)\r\n        .once(\"value\")\r\n        .then((snapshot) => {\r\n          let arr = [];\r\n          snapshot.val() &&\r\n            snapshot.forEach((el) => {\r\n              let obj = getArr(el.val());\r\n              obj = obj.filter((list) => list.prod_uid === ThisLogUid.uid);\r\n              let arr2 = [];\r\n              obj.map((list) => {\r\n                var obj2 = {\r\n                  ...list,\r\n                  date_: `${list.date.full_} ${list.date.hour}:${list.date.min}`,\r\n                  real_date_: `${list.real_date.full_}`,\r\n                  name: `${list.name}(${list.part})`,\r\n                };\r\n                arr2.push(obj2);\r\n              });\r\n              arr.push(...arr2);\r\n            });\r\n          setThisLogData(arr);\r\n        });\r\n    return () => {};\r\n  }, [ThisLogUid]);\r\n\r\n  // 일변 재고조회\r\n  const [EaDate, setEaDate] = useState(curDate);\r\n  const SearchEaDate = (date, dateString) => {\r\n    let regex = /-/g;\r\n    let day = dateString.replace(regex, \"\");\r\n    setEaDate(day);\r\n  };\r\n  const [EaData, setEaData] = useState();\r\n  useEffect(() => {\r\n    let arr = [];\r\n    db.ref(\"inventory/log_date\").once(\"value\", (snapshot) => {\r\n      snapshot.forEach((el) => {\r\n        let obj = el.val();\r\n        let keys = Object.keys(obj);\r\n        if (keys.includes(EaDate)) {\r\n          arr.push(obj[EaDate]);\r\n        } else {\r\n          let idx = getMax(keys, EaDate);\r\n          if (idx) {\r\n            arr.push(obj[idx]);\r\n          }\r\n        }\r\n      });\r\n      setEaData(arr);\r\n    });\r\n\r\n    return () => {};\r\n  }, [EaDate]);\r\n  const date_columns = [\r\n    {\r\n      title: \"품명\",\r\n      dataIndex: \"prod\",\r\n      key: \"prod\",\r\n      align: \"center\",\r\n      width: 100,\r\n      render: (data) => data,\r\n    },\r\n    {\r\n      title: \"재고\",\r\n      dataIndex: \"ea\",\r\n      key: \"ea\",\r\n      align: \"center\",\r\n      width: 100,\r\n      render: (data) => (data ? data : 0),\r\n    },\r\n  ];\r\n\r\n  // 전체조회(월별)\r\n  const [TotalLogData, setTotalLogData] = useState();\r\n  useEffect(() => {\r\n    let arr = [];\r\n    db.ref(\"inventory/log_month\")\r\n      .orderByKey()\r\n      .equalTo(SearchMonth)\r\n      .on(\"value\", (snapshot) => {\r\n        snapshot.val() &&\r\n          snapshot.forEach((el) => {\r\n            let obj = getArr(el.val());\r\n            arr.push(...obj);\r\n          });\r\n        setTotalLogData(arr);\r\n      });\r\n    return () => {\r\n      db.ref(\"inventory/log_month\").off();\r\n    };\r\n  }, [SearchMonth, Render]);\r\n  const total_columns = [\r\n    {\r\n      title: \"년월\",\r\n      dataIndex: \"prod\",\r\n      key: \"prod\",\r\n      align: \"center\",\r\n      width: 100,\r\n      render: (data) =>\r\n        `${SearchMonth.substr(0, SearchMonth.length - 2)}-${SearchMonth.substr(\r\n          4,\r\n          SearchMonth.length - 2\r\n        )}`,\r\n    },\r\n    {\r\n      title: \"품명\",\r\n      dataIndex: \"prod\",\r\n      key: \"prod\",\r\n      align: \"center\",\r\n      width: 100,\r\n      render: (data) => data,\r\n    },\r\n    {\r\n      title: \"입고\",\r\n      dataIndex: \"input\",\r\n      key: \"input\",\r\n      align: \"center\",\r\n      width: 100,\r\n      render: (data) => (data ? data : 0),\r\n    },\r\n    {\r\n      title: \"출고\",\r\n      dataIndex: \"output\",\r\n      key: \"output\",\r\n      align: \"center\",\r\n      width: 100,\r\n      render: (data) => (data ? data : 0),\r\n    },\r\n  ];\r\n\r\n  const [LogListData, setLogListData] = useState();\r\n  useEffect(() => {\r\n    db.ref(`inventory/log`)\r\n      .orderByKey()\r\n      .startAt(DateStart)\r\n      .endAt(DateEnd)\r\n      .once(\"value\", (snapshot) => {\r\n        let arr = [];\r\n        if (snapshot.val()) {\r\n          snapshot.forEach((el) => {\r\n            let obj = getArr(el.val());\r\n            let arr2 = [];\r\n            obj.map((list) => {\r\n              let obj2 = {\r\n                ...list,\r\n                date_: `${list.date.full_} ${list.date.hour}:${list.date.min}`,\r\n                real_date_: `${list.real_date.full_}`,\r\n                name: `${list.name}(${list.part})`,\r\n              };\r\n              arr2.push(obj2);\r\n            });\r\n            arr.push(...arr2);\r\n          });\r\n          setLogListData(arr);\r\n        } else {\r\n          setLogListData([]);\r\n        }\r\n      });\r\n    return () => {};\r\n  }, [Render]);\r\n\r\n  const onPlus = (uid, prod, ea) => {\r\n    let val = document.querySelector(`#plus_${uid}`).value;\r\n    if (!val) {\r\n      message.error(\"입고할 개수를 입력해 주세요.\");\r\n      return;\r\n    }\r\n    let rest = parseInt(ea) + parseInt(val);\r\n    val &&\r\n      db.ref(`inventory/log/${submitDate.full}/${uuid()}`).update({\r\n        prod,\r\n        prod_uid: uid,\r\n        ea: rest,\r\n        type: \"입고\",\r\n        name: userInfo.displayName,\r\n        part: userInfo.photoURL,\r\n        sosok: userInfo.sosok,\r\n        uid: userInfo.uid,\r\n        val,\r\n        real_date: submitDate,\r\n        comment: LogMessege,\r\n        date: getFormatDate(new Date()),\r\n      });\r\n    val &&\r\n      db.ref(`inventory/list/${uid}/ea`).transaction((pre) => {\r\n        return pre + parseInt(val);\r\n      });\r\n\r\n    let monthDate = submitDate.full.substr(0, submitDate.full.length - 2);\r\n    val &&\r\n      db.ref(`inventory/log_month/${monthDate}/${uid}`).update({\r\n        prod,\r\n      });\r\n    db.ref(`inventory/log_month/${monthDate}/${uid}/input`).transaction(\r\n      (pre) => {\r\n        if (pre == \"undefined\") {\r\n          db.ref(`inventory/log_month/${monthDate}/${uid}/input`).update(\r\n            parseInt(val)\r\n          );\r\n        } else {\r\n          return pre + parseInt(val);\r\n        }\r\n      }\r\n    );\r\n\r\n    db.ref(`inventory/log_date/${uid}/${submitDate.full}`).update({\r\n      prod,\r\n      ea: rest,\r\n    });\r\n\r\n    message.success(\"업데이트 완료\");\r\n    setLogMessege(\"\");\r\n    setRender(!Render);\r\n  };\r\n  const onMinus = (uid, prod, ea) => {\r\n    let val = document.querySelector(`#minus_${uid}`).value;\r\n    if (!val) {\r\n      message.error(\"출고할 개수를 입력해 주세요.\");\r\n      return;\r\n    }\r\n    if (ea < val) {\r\n      message.error(\"남은 재고개수보다 많습니다.\");\r\n      return;\r\n    }\r\n    let rest = parseInt(ea) - parseInt(val);\r\n    val &&\r\n      db.ref(`inventory/log/${submitDate.full}/${uuid()}`).update({\r\n        ea: rest,\r\n        prod,\r\n        prod_uid: uid,\r\n        type: \"출고\",\r\n        name: userInfo.displayName,\r\n        part: userInfo.photoURL,\r\n        sosok: userInfo.sosok,\r\n        uid: userInfo.uid,\r\n        real_date: submitDate,\r\n        comment: LogMessege,\r\n        val,\r\n        date: getFormatDate(new Date()),\r\n      });\r\n\r\n    let monthDate = submitDate.full.substr(0, submitDate.full.length - 2);\r\n    db.ref(`inventory/log_month/${monthDate}/${uid}`).update({\r\n      prod,\r\n    });\r\n    db.ref(`inventory/log_month/${monthDate}/${uid}/output`).transaction(\r\n      (pre) => {\r\n        if (pre == \"undefined\") {\r\n          db.ref(`inventory/log_month/${monthDate}/${uid}/output`).update(\r\n            parseInt(val)\r\n          );\r\n        } else {\r\n          return pre + parseInt(val);\r\n        }\r\n      }\r\n    );\r\n    db.ref(`inventory/list/${uid}/ea`).transaction((pre) => {\r\n      return pre - parseInt(val);\r\n    });\r\n\r\n    db.ref(`inventory/log_date/${uid}/${submitDate.full}`).update({\r\n      prod,\r\n      ea: rest,\r\n    });\r\n    message.success(\"업데이트 완료\");\r\n    setLogMessege(\"\");\r\n    setRender(!Render);\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: \"사진\",\r\n      dataIndex: \"image\",\r\n      key: \"image\",\r\n      align: \"center\",\r\n      width: 150,\r\n      render: (data) =>\r\n        data ? <img style={{ maxHeight: \"50px\" }} src={data} /> : \"\",\r\n    },\r\n    {\r\n      title: \"품명\",\r\n      dataIndex: \"name\",\r\n      key: \"name\",\r\n      align: \"center\",\r\n      width: 200,\r\n      sorter: {\r\n        compare: (a, b) => (a.name < b.name ? -1 : a.name > b.name ? 1 : 0),\r\n        defaultSortOrder: \"ascend\",\r\n      },\r\n      render: (data) => data,\r\n    },\r\n    {\r\n      title: \"품목\",\r\n      dataIndex: \"category\",\r\n      key: \"category\",\r\n      align: \"center\",\r\n      width: 100,\r\n      render: (data) => data,\r\n    },\r\n    {\r\n      title: \"재고(알림)\",\r\n      dataIndex: [\"ea\", \"alert_ea\"],\r\n      key: \"ea\",\r\n      align: \"center\",\r\n      render: (text, row) => (\r\n        <>\r\n          <span>\r\n            {row[\"ea\"]}\r\n            {row[\"alert_ea\"] === \"\"\r\n              ? null\r\n              : row[\"alert_ea\"] === undefined\r\n              ? null\r\n              : `(${row[\"alert_ea\"]})`}\r\n          </span>\r\n        </>\r\n      ),\r\n    },\r\n    {\r\n      title: \"장소\",\r\n      dataIndex: \"place\",\r\n      key: \"place\",\r\n      align: \"center\",\r\n      render: (data) => data,\r\n    },\r\n    {\r\n      title: \"비고\",\r\n      dataIndex: \"etc\",\r\n      key: \"etc\",\r\n      align: \"center\",\r\n      render: (data) => data,\r\n    },\r\n    {\r\n      title: \"관리\",\r\n      dataIndex: [\"uid\", \"name\", \"ea\"],\r\n      key: \"uid\",\r\n      align: \"center\",\r\n      render: (text, row) => (\r\n        <>\r\n          <div style={{ marginBottom: \"5px\" }}>\r\n            <InputNumber\r\n              id={`plus_${row[\"uid\"]}`}\r\n              min={1}\r\n              max={999}\r\n              style={{ width: \"50px\" }}\r\n            />\r\n            <Button\r\n              style={{ marginRight: \"5px\", marginLeft: \"-1px\" }}\r\n              onClick={() => onPlus(row[\"uid\"], row[\"name\"], row[\"ea\"])}\r\n            >\r\n              입고\r\n            </Button>\r\n            <InputNumber\r\n              id={`minus_${row[\"uid\"]}`}\r\n              min={1}\r\n              max={999}\r\n              style={{ width: \"50px\" }}\r\n            />\r\n            <Button\r\n              style={{ marginRight: \"5px\", marginLeft: \"-1px\" }}\r\n              onClick={() => onMinus(row[\"uid\"], row[\"name\"], row[\"ea\"])}\r\n            >\r\n              출고\r\n            </Button>\r\n          </div>\r\n          <Button onClick={() => onModify(row[\"uid\"])}>내용수정</Button>\r\n          <Button\r\n            style={{ marginLeft: \"5px\" }}\r\n            onClick={() => onLogList(row[\"uid\"], row[\"name\"], row[\"ea\"])}\r\n          >\r\n            내역\r\n          </Button>\r\n          <Popconfirm\r\n            title={`${row[\"name\"]}을(를) 삭제하시겠습니까?`}\r\n            onConfirm={() => onDelete(row[\"uid\"])}\r\n            onCancel={cancel}\r\n            okText=\"네\"\r\n            cancelText=\"아니오\"\r\n          >\r\n            <Button style={{ marginLeft: \"5px\" }}>삭제</Button>\r\n          </Popconfirm>\r\n        </>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const cancel = (e) => {\r\n    message.error(\"취소되었습니다.\");\r\n  };\r\n\r\n  const columns2 = [\r\n    {\r\n      title: \"등록일자\",\r\n      dataIndex: [\"date\", \"date_\"],\r\n      key: \"date\",\r\n      align: \"center\",\r\n      width: 100,\r\n      sorter: {\r\n        compare: (a, b) => b.date.timestamp - a.date.timestamp,\r\n        multiple: 1,\r\n      },\r\n      defaultSortOrder: \"ascend\",\r\n      render: (text, row) =>\r\n        `${row[\"date\"].full_} ${row[\"date\"].hour}:${row[\"date\"].min}`,\r\n    },\r\n    {\r\n      title: \"입출고일자\",\r\n      dataIndex: [\"real_date\", \"real_date_\"],\r\n      key: \"real_date\",\r\n      align: \"center\",\r\n      width: 100,\r\n      sorter: {\r\n        compare: (a, b) => b.real_date.timestamp - a.real_date.timestamp,\r\n        multiple: 2,\r\n      },\r\n      defaultSortOrder: \"ascend\",\r\n      render: (text, row) => `${row[\"real_date_\"]}`,\r\n    },\r\n    {\r\n      title: \"입출고\",\r\n      dataIndex: \"type\",\r\n      key: \"type\",\r\n      align: \"center\",\r\n      width: 100,\r\n      render: (data) => data,\r\n    },\r\n    {\r\n      title: \"사용자\",\r\n      dataIndex: [\"name\", \"part\"],\r\n      key: \"name\",\r\n      align: \"center\",\r\n      width: 100,\r\n      render: (text, row) => `${row[\"name\"]}`,\r\n    },\r\n    {\r\n      title: \"품명\",\r\n      dataIndex: \"prod\",\r\n      key: \"prod\",\r\n      align: \"center\",\r\n      width: 120,\r\n      render: (data) => data,\r\n    },\r\n    {\r\n      title: \"수량\",\r\n      dataIndex: \"val\",\r\n      key: \"val\",\r\n      align: \"center\",\r\n      width: 40,\r\n      render: (data) => data,\r\n    },\r\n    {\r\n      title: \"비고\",\r\n      dataIndex: \"comment\",\r\n      key: \"comment\",\r\n      align: \"center\",\r\n      width: 200,\r\n      render: (data) => data,\r\n    },\r\n    {\r\n      title: \"출납 후 재고\",\r\n      dataIndex: \"ea\",\r\n      key: \"ea\",\r\n      align: \"center\",\r\n      width: 80,\r\n      render: (text, row) => (\r\n        <>\r\n          <span>{row[\"ea\"]}</span>\r\n        </>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const columns3 = [\r\n    {\r\n      title: \"등록일자\",\r\n      dataIndex: \"date\",\r\n      key: \"date\",\r\n      align: \"center\",\r\n      width: 100,\r\n      sorter: {\r\n        compare: (a, b) => a.date.timestamp - b.date.timestamp,\r\n        multiple: 2,\r\n      },\r\n      render: (data) => `${data.full_} ${data.hour}:${data.min}`,\r\n    },\r\n    {\r\n      title: \"입출고일자\",\r\n      dataIndex: \"real_date\",\r\n      key: \"real_date\",\r\n      align: \"center\",\r\n      width: 100,\r\n      sorter: {\r\n        compare: (a, b) => a.real_date.timestamp - b.real_date.timestamp,\r\n        multiple: 1,\r\n      },\r\n      render: (data) => data.full_,\r\n    },\r\n    {\r\n      title: \"입출고\",\r\n      dataIndex: \"type\",\r\n      key: \"type\",\r\n      align: \"center\",\r\n      width: 100,\r\n      render: (data) => data,\r\n    },\r\n    {\r\n      title: \"사용자\",\r\n      dataIndex: [\"name\", \"part\"],\r\n      key: \"name\",\r\n      align: \"center\",\r\n      width: 120,\r\n      render: (text, row) => `${row[\"name\"]}`,\r\n    },\r\n    {\r\n      title: \"수량\",\r\n      dataIndex: \"val\",\r\n      key: \"val\",\r\n      align: \"center\",\r\n      width: 50,\r\n      render: (data) => data,\r\n    },\r\n    {\r\n      title: \"비고\",\r\n      dataIndex: \"comment\",\r\n      key: \"comment\",\r\n      align: \"center\",\r\n      width: 200,\r\n      render: (data) => data,\r\n    },\r\n    {\r\n      title: \"출납 후 재고\",\r\n      dataIndex: \"ea\",\r\n      key: \"ea\",\r\n      align: \"center\",\r\n      width: 80,\r\n      render: (text, row) => (\r\n        <>\r\n          <span>{row[\"ea\"]}</span>\r\n        </>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const [ProdRegist, setProdRegist] = useState(false);\r\n  const ProdRegistToggle = () => {\r\n    setProdRegist(!ProdRegist);\r\n  };\r\n\r\n  const normFile = (e) => {\r\n    if (Array.isArray(e)) {\r\n      return e;\r\n    }\r\n\r\n    return e && e.fileList;\r\n  };\r\n\r\n  const onSubmitProd = async (values) => {\r\n    values.etc = values.etc ? values.etc : \"\";\r\n    values.upload = values.upload ? values.upload : \"\";\r\n    let upload = \"\";\r\n    if (values.upload) {\r\n      upload = values.upload[0];\r\n    }\r\n    let regex = /[^0-9]/g;\r\n    if (values.ea.match(regex)) {\r\n      message.error(\"재고는 숫자만 입력해 주세요\");\r\n      return;\r\n    }\r\n    try {\r\n      let downloadURL;\r\n      const uid = uuid();\r\n      if (upload != \"\") {\r\n        const file = upload.originFileObj;\r\n        const metadata = upload.type;\r\n        let uploadTaskSnapshot = await firebase\r\n          .storage()\r\n          .ref(\"inventory\")\r\n          .child(`prod_image/${uid}`)\r\n          .put(file, metadata);\r\n        downloadURL = await uploadTaskSnapshot.ref.getDownloadURL();\r\n      } else {\r\n        delete values.upload;\r\n      }\r\n      db.ref(`inventory/list`)\r\n        .child(uid)\r\n        .set({\r\n          ...values,\r\n          ea: parseInt(values.ea),\r\n          uid,\r\n          date: getFormatDate(new Date()),\r\n          image: downloadURL ? downloadURL : \"\",\r\n        });\r\n      db.ref(`inventory/log/${submitDate.full}/${uuid()}`).update({\r\n        type: \"입고\",\r\n        prod: values.name,\r\n        prod_uid: uid,\r\n        name: userInfo.displayName,\r\n        part: userInfo.photoURL,\r\n        sosok: userInfo.sosok,\r\n        uid: userInfo.uid,\r\n        val: parseInt(values.ea),\r\n        ea: parseInt(values.ea),\r\n        real_date: submitDate,\r\n        date: getFormatDate(new Date()),\r\n      });\r\n\r\n      let monthDate = submitDate.full.substr(0, submitDate.full.length - 2);\r\n      db.ref(`inventory/log_month/${monthDate}/${uid}`).update({\r\n        prod: values.name,\r\n        prod_uid: uid,\r\n        input: parseInt(values.ea),\r\n        output: 0,\r\n      });\r\n\r\n      db.ref(`inventory/log_date/${uid}/${submitDate.full}`).update({\r\n        prod: values.name,\r\n        ea: parseInt(values.ea),\r\n      });\r\n\r\n      message.success(\"상품을 등록했습니다.\");\r\n      formRef.current.resetFields();\r\n    } catch (error) {\r\n      alert(error);\r\n    }\r\n  };\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const [isLogVisible, setIsLogVisible] = useState(false);\r\n\r\n  const onCountCheck = (e) => {\r\n    let str = e.target.value;\r\n    let regex = /[^0-9]/g;\r\n    if (str.match(regex)) {\r\n      message.error(\"숫자만 입력해 주세요\");\r\n    }\r\n  };\r\n  const handleCancel = () => {\r\n    setIsModalVisible(false);\r\n    setIsLogVisible(false);\r\n    setModifyUid(\"\");\r\n    setThisLogUid(\"\");\r\n    setThisLogData(\"\");\r\n    setModifyData(\"\");\r\n  };\r\n  const onModify = (uid) => {\r\n    setModifyUid(uid);\r\n    setIsModalVisible(true);\r\n  };\r\n  const onDelete = (uid) => {\r\n    const storageRef = firebase.storage().ref(`inventory/prod_image/${uid}`);\r\n\r\n    const onResolve = (url) => {\r\n      db.ref(\"inventory/list\").child(uid).remove();\r\n      message.success(\"삭제에 성공했습니다.\");\r\n      storageRef.delete();\r\n    };\r\n    const onReject = (error) => {\r\n      db.ref(\"inventory/list\").child(uid).remove();\r\n      message.success(\"삭제에 성공했습니다.\");\r\n    };\r\n\r\n    storageRef.getDownloadURL().then(onResolve, onReject);\r\n  };\r\n\r\n  const onModifySubmit = (values) => {\r\n    const uid = ModifyData.uid;\r\n    values.unit = values.unit || \"\";\r\n    values.alert_ea = values.alert_ea || \"\";\r\n    db.ref(\"inventory/list\")\r\n      .child(uid)\r\n      .update({\r\n        ...values,\r\n      });\r\n    message.success(\"업데이트에 성공했습니다.\");\r\n    setIsModalVisible(false);\r\n    setModifyData(\"\");\r\n    setModifyUid(\"\");\r\n    setRender(!Render);\r\n  };\r\n\r\n  const [LogMessege, setLogMessege] = useState(\"\");\r\n  const onMessege = (e) => {\r\n    setLogMessege(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"flex-box a-center\" style={{ marginBottom: \"10px\" }}>\r\n        <h3 className=\"title\" style={{ margin: \"0 10px 0 0\", flexShrink: \"0\" }}>\r\n          품목등록\r\n        </h3>\r\n        <Input onChange={onCateInput} value={Category} />\r\n        <Button\r\n          type=\"primary\"\r\n          style={{ marginLeft: \"5px\" }}\r\n          onClick={onCateInit}\r\n        >\r\n          등록\r\n        </Button>\r\n      </div>\r\n      <div className=\"flex-box a-center\" style={{ marginBottom: \"10px\" }}>\r\n        <h3 className=\"title\" style={{ margin: \"0 10px 0 0\" }}>\r\n          비품등록\r\n        </h3>\r\n        <Switch\r\n          onChange={ProdRegistToggle}\r\n          checkedChildren=\"on\"\r\n          unCheckedChildren=\"off\"\r\n        />\r\n      </div>\r\n      {ProdRegist && (\r\n        <Form ref={formRef} className=\"admin-prod-form\" onFinish={onSubmitProd}>\r\n          <Form.Item\r\n            name=\"upload\"\r\n            label=\"Upload\"\r\n            valuePropName=\"fileList\"\r\n            getValueFromEvent={normFile}\r\n          >\r\n            <Upload listType=\"picture\">\r\n              <Button icon={<UploadOutlined />}>이미지 업로드</Button>\r\n            </Upload>\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"name\"\r\n            label=\"상품명\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"상품명을 입력해 주세요\",\r\n              },\r\n            ]}\r\n          >\r\n            <Input className=\"sm-input\" />\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"ea\"\r\n            label=\"재고개수\"\r\n            onChange={onCountCheck}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"재고개수를 입력해 주세요\",\r\n              },\r\n            ]}\r\n          >\r\n            <Input className=\"sm-input\" />\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"place\"\r\n            label=\"장소\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"재고개수를 입력해 주세요\",\r\n              },\r\n            ]}\r\n          >\r\n            <Input className=\"sm-input\" />\r\n          </Form.Item>\r\n          <Form.Item\r\n            label=\"품목\"\r\n            name=\"category\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"품목을 입력해 주세요\",\r\n              },\r\n            ]}\r\n          >\r\n            <Radio.Group>\r\n              {CateList &&\r\n                CateList.map((el) => (\r\n                  <>\r\n                    <Radio.Button value={el}>{el}</Radio.Button>\r\n                  </>\r\n                ))}\r\n            </Radio.Group>\r\n          </Form.Item>\r\n          <Form.Item name=\"etc\" label=\"비고\">\r\n            <Input />\r\n          </Form.Item>\r\n          <div\r\n            style={{ width: \"100%\", maxWidth: \"250px\", textAlign: \"center\" }}\r\n          >\r\n            <Button\r\n              htmlType=\"submit\"\r\n              style={{ width: \"100%\", marginBottom: \"15px\" }}\r\n              type=\"primary\"\r\n              size=\"large\"\r\n            >\r\n              등록하기\r\n            </Button>\r\n          </div>\r\n        </Form>\r\n      )}\r\n      <InvenTelAdmin />\r\n\r\n      <Divider />\r\n      <div style={{ marginBottom: \"20px\" }}>\r\n        <RangePicker\r\n          defaultValue={[\r\n            moment(DateStart, \"YYYY-MM-DD\"),\r\n            moment(DateEnd, \"YYYY-MM-DD\"),\r\n          ]}\r\n          onChange={onSearchDate}\r\n          style={{ marginRight: \"5px\" }}\r\n        />\r\n        <Button onClick={onRerender}>검색</Button>\r\n        <span style={{ fontSize: \"12px\", color: \"#888\", marginLeft: \"5px\" }}>\r\n          *날짜 검색\r\n        </span>\r\n      </div>\r\n      <div className=\"flex-box a-center\" style={{ marginBottom: \"10px\" }}>\r\n        <h3\r\n          className=\"title\"\r\n          style={{ marginBottom: \"0\", marginRight: \"10px\" }}\r\n        >\r\n          비품 리스트\r\n        </h3>\r\n        {ProdItem && (\r\n          <Button style={{ marginRight: \"5px\" }}>\r\n            <CSVLink\r\n              headers={excelList}\r\n              data={ProdItem}\r\n              filename={`metree-expendables-list-${EaDate}.csv`}\r\n              target=\"_blank\"\r\n            >\r\n              <antIcon.AiOutlineFileExcel\r\n                style={{\r\n                  position: \"relative\",\r\n                  top: \"3px\",\r\n                  fontSize: \"17px\",\r\n                  marginRight: \"3px\",\r\n                }}\r\n              />\r\n              엑셀 다운로드\r\n            </CSVLink>\r\n          </Button>\r\n        )}\r\n        <DatePicker\r\n          defaultValue={moment(DateStart, \"YYYY-MM-DD\")}\r\n          onChange={onSubmitDate}\r\n          style={{ marginRight: \"5px\" }}\r\n        />\r\n        <span style={{ fontSize: \"12px\", color: \"#888\" }}>\r\n          *실 입출고시간이 있는경우 선택\r\n        </span>\r\n      </div>\r\n      <div className=\"flex-box a-center\" style={{ marginBottom: \"10px\" }}>\r\n        <span style={{ flexShrink: \"0\", marginRight: \"5px\" }}>\r\n          입출고시 추가 메세지\r\n        </span>\r\n        <Input onChange={onMessege} value={LogMessege} />\r\n      </div>\r\n      {ProdItem && <Table columns={columns} dataSource={ProdItem} />}\r\n      <Modal\r\n        title=\"수정\"\r\n        visible={isModalVisible}\r\n        onCancel={handleCancel}\r\n        centered\r\n        footer={false}\r\n      >\r\n        {\r\n          ModifyData && (\r\n            <AdminModifyModal\r\n              ModifyData={ModifyData}\r\n              CateList={CateList}\r\n              onModifySubmit={onModifySubmit}\r\n            />\r\n          )\r\n          // 내용수정 모달\r\n        }\r\n      </Modal>\r\n      {ThisLogUid && (\r\n        <Modal\r\n          title={`${ThisLogUid.prod} 입출고 내역`}\r\n          visible={isLogVisible}\r\n          onCancel={handleCancel}\r\n          centered\r\n          width={1000}\r\n          footer={false}\r\n        >\r\n          {ThisLogData && ThisLogData.length > 0 && (\r\n            <>\r\n              <Button style={{ marginBottom: \"10px\" }}>\r\n                <CSVLink\r\n                  headers={excelHeaders}\r\n                  data={ThisLogData}\r\n                  filename={`metree-expendables-${DateStart}_${DateEnd}.csv`}\r\n                  target=\"_blank\"\r\n                >\r\n                  <antIcon.AiOutlineFileExcel\r\n                    style={{\r\n                      position: \"relative\",\r\n                      top: \"3px\",\r\n                      fontSize: \"17px\",\r\n                      marginRight: \"3px\",\r\n                    }}\r\n                  />\r\n                  엑셀 다운로드\r\n                </CSVLink>\r\n              </Button>\r\n              <Table columns={columns3} dataSource={ThisLogData} />\r\n            </>\r\n          )}\r\n        </Modal>\r\n      )}\r\n      <div\r\n        className=\"flex-box a-center\"\r\n        style={{ marginTop: \"30px\", marginBottom: \"10px\" }}\r\n      >\r\n        <h3\r\n          className=\"title\"\r\n          style={{ marginBottom: \"0\", marginRight: \"10px\" }}\r\n        >\r\n          비품 입출고 내역\r\n        </h3>\r\n        {LogListData && (\r\n          <Button>\r\n            <CSVLink\r\n              headers={excelHeaders}\r\n              data={LogListData}\r\n              filename={`metree-expendables-${DateStart}_${DateEnd}.csv`}\r\n              target=\"_blank\"\r\n            >\r\n              <antIcon.AiOutlineFileExcel\r\n                style={{\r\n                  position: \"relative\",\r\n                  top: \"3px\",\r\n                  fontSize: \"17px\",\r\n                  marginRight: \"3px\",\r\n                }}\r\n              />\r\n              엑셀 다운로드\r\n            </CSVLink>\r\n          </Button>\r\n        )}\r\n      </div>\r\n      {ProdItem && <Table columns={columns2} dataSource={LogListData} />}\r\n\r\n      <div\r\n        className=\"flex-box a-center\"\r\n        style={{ marginTop: \"30px\", marginBottom: \"10px\" }}\r\n      >\r\n        <h3\r\n          className=\"title\"\r\n          style={{ marginBottom: \"0\", marginRight: \"10px\" }}\r\n        >\r\n          월간 입출고내역\r\n        </h3>\r\n        {TotalLogData && (\r\n          <Button style={{ marginRight: \"5px\" }}>\r\n            <CSVLink\r\n              headers={excelHeaders3}\r\n              data={TotalLogData}\r\n              filename={`metree-expendables-date-${EaDate}.csv`}\r\n              target=\"_blank\"\r\n            >\r\n              <antIcon.AiOutlineFileExcel\r\n                style={{\r\n                  position: \"relative\",\r\n                  top: \"3px\",\r\n                  fontSize: \"17px\",\r\n                  marginRight: \"3px\",\r\n                }}\r\n              />\r\n              엑셀 다운로드\r\n            </CSVLink>\r\n          </Button>\r\n        )}\r\n        <DatePicker\r\n          defaultValue={moment(SearchMonth, \"YYYY-MM\")}\r\n          onChange={onSearchMonth}\r\n          picker=\"month\"\r\n          style={{ marginRight: \"5px\" }}\r\n        />\r\n        <span style={{ fontSize: \"12px\", color: \"#888\" }}>*월별 검색</span>\r\n      </div>\r\n      {TotalLogData && (\r\n        <Table columns={total_columns} dataSource={TotalLogData} />\r\n      )}\r\n\r\n      <div\r\n        className=\"flex-box a-center\"\r\n        style={{ marginTop: \"30px\", marginBottom: \"10px\" }}\r\n      >\r\n        <h3\r\n          className=\"title\"\r\n          style={{ marginBottom: \"0\", marginRight: \"10px\" }}\r\n        >\r\n          일별 재고\r\n        </h3>\r\n        {EaData && (\r\n          <Button style={{ marginRight: \"5px\" }}>\r\n            <CSVLink\r\n              headers={excelHeaders2}\r\n              data={EaData}\r\n              filename={`metree-expendables-date-${EaDate}.csv`}\r\n              target=\"_blank\"\r\n            >\r\n              <antIcon.AiOutlineFileExcel\r\n                style={{\r\n                  position: \"relative\",\r\n                  top: \"3px\",\r\n                  fontSize: \"17px\",\r\n                  marginRight: \"3px\",\r\n                }}\r\n              />\r\n              엑셀 다운로드\r\n            </CSVLink>\r\n          </Button>\r\n        )}\r\n        <DatePicker\r\n          defaultValue={moment(EaDate, \"YYYY-MM-DD\")}\r\n          onChange={SearchEaDate}\r\n          picker=\"date\"\r\n          style={{ marginRight: \"5px\" }}\r\n        />\r\n        <span style={{ fontSize: \"12px\", color: \"#888\" }}>*일별 검색</span>\r\n      </div>\r\n      {EaDate && <Table columns={date_columns} dataSource={EaData} />}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default InvenAdmin;\r\n","D:\\프로젝트\\sy-cafe-order\\src\\component\\Research\\ResearchView.js",["409","410","411","412","413","414","415","416","417","418","419","420","421","422","423"],"import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport firebase from \"../../firebase\";\r\nimport { Form, Radio, Input, Button, Table, Space, Checkbox } from 'antd';\r\nimport { useSelector } from \"react-redux\";\r\nimport Signature from \"../Signature\";\r\nimport Loading from \"../Loading\";\r\nimport { getFormatDate } from \"../CommonFunc\";\r\n\r\n\r\n\r\nfunction ResearchView(props) {\r\n  const userInfo = useSelector((state) => state.user.currentUser);\r\n  const [ResearchViewInfo, setResearchViewInfo] = useState();\r\n  const [ResultList, setResultList] = useState();\r\n  const [Ruser, setRuser] = useState();\r\n  const [Rerender, setRerender] = useState(true);\r\n  const [MyResearch, setMyResearch] = useState();\r\n\r\n  const [sigPadData, setSigPadData] = useState(null);\r\n\r\n  const onSigpad = (data) => {\r\n    setSigPadData(data);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if(userInfo){\r\n\r\n      firebase\r\n      .database()\r\n      .ref(\"research\")\r\n      .child(`${props.location.state.uid}/result/${userInfo.uid}`)\r\n      .once(\"value\", (snapshot) => {\r\n        setMyResearch(snapshot.val());\r\n      });\r\n    }\r\n\r\n    async function getResearch(){\r\n    let r_user = []\r\n    await firebase.database().ref('users')\r\n    .once('value', (snapshot) => {\r\n      snapshot.forEach(el => {\r\n        if(el.val().role >= \"0\"){\r\n            r_user.push({\r\n            name: el.val().name,\r\n            part: el.val().part,\r\n            role: el.val().role\r\n          })\r\n        }\r\n      });\r\n      setRuser(r_user);\r\n    })  \r\n    await firebase.database().ref('research')\r\n    .child(props.location.state.uid)\r\n    .once(\"value\", (snapshot) => {\r\n      console.log(snapshot.val())\r\n      setResearchViewInfo(snapshot.val())      \r\n    });    \r\n\r\n    firebase.database().ref(`research/${props.location.state.uid}/result`)\r\n    .once(\"value\", (snapshot) => {      \r\n      let resultArr = [];\r\n      snapshot.forEach(el => {\r\n        resultArr.push(el.val())\r\n      })\r\n\r\n      r_user.map(el => {\r\n        resultArr.map(list => {\r\n          if(el.name == list.name && el.part == list.part){\r\n            const optionValues = Object.values(list.option);\r\n            el.option = optionValues ? optionValues : '';\r\n            el.sign = list.sign ? list.sign : '';\r\n          }\r\n        })\r\n      })\r\n      setResultList(r_user)\r\n    })};\r\n    getResearch();\r\n    return () => {      \r\n    }\r\n  }, [Rerender])\r\n\r\n  useEffect(() => {\r\n    if(!ResultList){\r\n      setTimeout(() => {\r\n        setRerender()\r\n      },1000)\r\n    }\r\n    return () => {\r\n    }\r\n  }, [])\r\n\r\n\r\n  const [ResultOpen, setResultOpen] = useState(false);\r\n  const onResultOpen = () => {\r\n    setResultOpen(true);\r\n  }\r\n\r\n  const [Again, setAgain] = useState(false);\r\n  const onResearchAgain = () => {\r\n    setAgain(true)\r\n  }\r\n  \r\n\r\n  const onFinish = (values) => {\r\n    const optionValues = Object.values(values);\r\n    let result = {\r\n      name:userInfo.displayName,\r\n      part:userInfo.photoURL,\r\n      option:optionValues,\r\n      sign:sigPadData ? sigPadData : ''\r\n    };\r\n    firebase.database().ref(`research/${props.location.state.uid}/result/${userInfo.uid}`)\r\n    .update({...result})\r\n    setRerender(!Rerender)\r\n    setAgain(false)\r\n  }\r\n\r\n  const columns = [\r\n    {\r\n      title: '이름',\r\n      dataIndex: 'name',\r\n      key: 'name',\r\n      align: 'center'\r\n    },\r\n    {\r\n      title: '부서',\r\n      dataIndex: 'part',\r\n      key: 'part',\r\n      align: 'center',\r\n    },\r\n    {\r\n      title: '답변',\r\n      dataIndex: 'option',\r\n      key: 'option',\r\n      align: 'center',\r\n      render: data => data ? \r\n      data.map((el,idx)=>(\r\n        <>\r\n        <p style={{textAlign:\"left\",lineHeight:\"1.6\",marginBottom:\"0\"}} key={idx}>{idx+1}. {el} </p>\r\n        </>\r\n      )) : ''       \r\n      ,\r\n    },\r\n    {\r\n      title: '서명',\r\n      dataIndex: 'sign',\r\n      key: 'sign',\r\n      align: 'center',\r\n      render: data => data ? <img style={{height:\"40px\"}} src={data} /> : '',\r\n    },\r\n  ]\r\n\r\n  const [Refesh, setRefesh] = useState(false)\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      setRefesh(true)\r\n    },2000)\r\n    return () => {\r\n    }\r\n  }, [])\r\n  const onRerender = () => {\r\n    setRerender(!Rerender)\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      {ResultList && \r\n        <>\r\n        <Form\r\n        name=\"validate_other\"\r\n        onFinish={onFinish}\r\n        >\r\n          <dl className=\"board-view-basic\">\r\n            <dt>{ResearchViewInfo.title}</dt>\r\n            <dd className=\"flex-box\">\r\n              기한 :&nbsp; \r\n              {ResearchViewInfo.limit_start > 0 &&\r\n              <>\r\n              <div>\r\n                  {getFormatDate(new Date(ResearchViewInfo.limit_start)).full_}&nbsp; \r\n                  {getFormatDate(new Date(ResearchViewInfo.limit_start)).hour}: \r\n                  {getFormatDate(new Date(ResearchViewInfo.limit_start)).min}\r\n              </div>\r\n              &nbsp;~&nbsp;\r\n              <div>\r\n                {getFormatDate(new Date(ResearchViewInfo.limit_end)).full_}&nbsp; \r\n                {getFormatDate(new Date(ResearchViewInfo.limit_end)).hour}: \r\n                {getFormatDate(new Date(ResearchViewInfo.limit_end)).min}\r\n              </div>\r\n              </>\r\n              }\r\n              {ResearchViewInfo.limit_start === 0 && <>무기한</>}\r\n            </dd>\r\n            <dd>\r\n              {ResearchViewInfo.etc}\r\n              <div style={{marginTop:\"10px\"}}>\r\n                {ResearchViewInfo.image && ResearchViewInfo.image.map((el,idx) => (\r\n                  <div className=\"img\">\r\n                    <img key={idx} src={el.url} />\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </dd>            \r\n            {MyResearch && !Again ? (\r\n              <div className=\"my-answer\">\r\n                <h4>참여완료</h4>\r\n                <div>내 답변 : <span>{MyResearch.option}</span></div>\r\n                <Button style={{marginTop:\"10px\"}} onClick={onResearchAgain}>다시 참여하기</Button>\r\n              </div>\r\n            ):(\r\n            <dd>\r\n              {ResearchViewInfo.type == 1 &&\r\n                <Form.Item name=\"select_op\" label=\"선택항목\">\r\n                  <Radio.Group >\r\n                    {ResearchViewInfo.option.map((el,idx) => (\r\n                      <>\r\n                        <Radio key={idx} value={el.option}>{el.option}</Radio>\r\n                      </>\r\n                    ))}\r\n                  </Radio.Group>\r\n                </Form.Item>\r\n              }\r\n              {ResearchViewInfo.type == 2 && \r\n                <Form.Item name=\"select_op\">\r\n                  <div className=\"flex-box\">\r\n                    <span className=\"tit\">답변</span>\r\n                    <Input />\r\n                  </div>\r\n              </Form.Item>\r\n              }\r\n              {ResearchViewInfo.type == 3 && \r\n                ResearchViewInfo.option.map((el,idx)=>(\r\n                  <>\r\n                    <div style={{marginBottom:\"10px\"}}>\r\n                      <span className=\"tit\">{idx+1}. {el.option_q}</span>\r\n                      <div className=\"flex-box\" style={{marginBottom:\"10px\"}}>\r\n                      {el.option_photo && el.option_photo.map((img,_idx) => (\r\n                        <div style={{margin:\"0 5px\"}}>\r\n                          <img src={img.url} />\r\n                        </div>\r\n                      ))}\r\n                      </div>\r\n                    </div>\r\n                    {el.option_a != '' ? (\r\n                      <>\r\n                      {el.option_type == '1' &&\r\n                      <Form.Item name={`select_op_${idx}`} label=\"선택항목\" style={{marginBottom:\"20px\"}}>\r\n                        <Checkbox.Group >\r\n                          {el.option_a.split(',').map((list,_idx)=>(\r\n                            <Checkbox key={_idx} value={list}>{list}</Checkbox>\r\n                          ))}\r\n                        </Checkbox.Group>\r\n                      </Form.Item>\r\n                      }\r\n                      {el.option_type == '2' &&\r\n                      <Form.Item name={`select_op_${idx}`} label=\"선택항목\" style={{marginBottom:\"20px\"}}>\r\n                        <Radio.Group >\r\n                          {el.option_a.split(',').map((list,_idx)=>(\r\n                            <Radio key={_idx} value={list}>{list}</Radio>\r\n                          ))}\r\n                        </Radio.Group>\r\n                      </Form.Item>\r\n                      }\r\n                      </>\r\n                    ):(\r\n                      <Form.Item name={`select_op_${idx}`} style={{marginBottom:\"20px\"}}>\r\n                          <div className=\"flex-box\">\r\n                            <span className=\"tit\">답변</span>\r\n                            <Input />\r\n                          </div>\r\n                      </Form.Item>\r\n                    )}\r\n                  </>\r\n                ))\r\n              }\r\n              <div className=\"flex-box\">\r\n                <span className=\"tit\">서명</span>\r\n                <Signature onSigpad={onSigpad} />\r\n              </div>\r\n            </dd>            \r\n            )\r\n            }\r\n              \r\n             \r\n            \r\n            <div className=\"btn-box\">\r\n              <Space align=\"center\">\r\n                {!Again && MyResearch ? (\r\n                  <></>\r\n                ):(\r\n                  <Button htmlType=\"submit\" type=\"primary\">참여하기</Button>\r\n                )}\r\n                {ResearchViewInfo && userInfo && !userInfo.auth.includes('insa') ? (\r\n                  <></>\r\n                  ):(\r\n                  <>\r\n                  <Button onClick={onResultOpen}>결과보기</Button>\r\n                  <Button>\r\n                    <Link to={{\r\n                      pathname: `/research_modify`,\r\n                      state: {\r\n                        uid:ResearchViewInfo.uid\r\n                      }\r\n                    }}\r\n                      >수정\r\n                    </Link>\r\n                  </Button>\r\n                  </>\r\n                )}\r\n                <Button>\r\n                  <Link to=\"/research\">목록으로</Link>\r\n                </Button>\r\n              </Space>\r\n            </div>\r\n          </dl>\r\n        </Form>\r\n        \r\n      \r\n      {Ruser && ResultList && ResultOpen &&\r\n        <>\r\n        <Table pagination={false} align=\"center\" columns={columns} dataSource={ResultList} />        \r\n        </>\r\n      }\r\n      </>\r\n      }\r\n      {!ResultList && \r\n        <>     \r\n          {!Refesh &&\r\n          <Loading />\r\n          }\r\n          {Refesh &&\r\n            <Button className=\"pos-center\" type=\"button\" onClick={onRerender}>새로고침</Button>\r\n          }\r\n        </>\r\n      }  \r\n    </>\r\n  )\r\n}\r\n\r\nexport default ResearchView\r\n","D:\\프로젝트\\sy-cafe-order\\src\\component\\welfare\\ChairAdmin.js",["424"],"import React, { useState, useEffect } from \"react\";\r\nimport firebase from \"../../firebase\";\r\nimport { message, Button, Input, TimePicker } from \"antd\";\r\nimport { getFormatDate } from \"../CommonFunc\";\r\nimport moment from \"moment\";\r\nconst { TextArea } = Input;\r\n\r\nfunction ChairAdmin() {\r\n  const welDb = firebase.database();\r\n\r\n  const [DefaultNotice, setDefaultNotice] = useState();\r\n  const [DefaultTimeSet, setDefaultTimeSet] = useState();\r\n  useEffect(() => {\r\n    welDb.ref(\"chair/time_set\").once(\"value\", (data) => {\r\n      setDefaultTimeSet(data.val());\r\n    });\r\n\r\n    welDb.ref(\"chair/notice\").once(\"value\", (data) => {\r\n      setDefaultNotice(data.val());\r\n    });\r\n    return () => {};\r\n  }, []);\r\n\r\n  const [Notice, setNotice] = useState();\r\n  const onNotice = (e) => {\r\n    setNotice(e.target.value);\r\n  };\r\n  const onNoticeSubmit = () => {\r\n    welDb.ref(\"chair\").update({\r\n      notice: Notice,\r\n    });\r\n  };\r\n\r\n  const [TimeInterval, setTimeInterval] = useState();\r\n  const onTimeInterval = (e) => {\r\n    setTimeInterval(e.target.value);\r\n  };\r\n\r\n  const [TimeRange, setTimeRange] = useState();\r\n  const [DateRange, setDateRange] = useState();\r\n  const onTimeRange = (e) => {\r\n    if (e) {\r\n      let time = {\r\n        start: [new Date(e[0]._d).getHours(), new Date(e[0]._d).getMinutes()],\r\n        end: [new Date(e[1]._d).getHours(), new Date(e[1]._d).getMinutes()],\r\n      };\r\n      let date = {\r\n        start: getFormatDate(new Date(e[0]._d)),\r\n        end: getFormatDate(new Date(e[1]._d)),\r\n      };\r\n      setTimeRange(time);\r\n      setDateRange(date);\r\n    } else {\r\n      setTimeRange(\"\");\r\n    }\r\n  };\r\n\r\n  const onTimeSubmit = () => {\r\n    if (!TimeInterval && !DefaultTimeSet) {\r\n      message.error(\"시간간격을 입력해 주세요\");\r\n      return;\r\n    }\r\n    if (!TimeRange && !DefaultTimeSet) {\r\n      message.error(\"시작시작과 끝나는시간을 입력해 주세요\");\r\n      return;\r\n    }\r\n    welDb.ref(\"chair/time_set\").update({\r\n      interval: TimeInterval ? parseInt(TimeInterval) : DefaultTimeSet.interval,\r\n      start: TimeRange ? TimeRange.start : DefaultTimeSet.start,\r\n      end: TimeRange ? TimeRange.end : DefaultTimeSet.end,\r\n      date_start: DateRange ? DateRange.start : DefaultTimeSet.date_start,\r\n      date_end: DateRange ? DateRange.end : DefaultTimeSet.date_end,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"title\">공지사항</h3>\r\n      <div className=\"flex-box\">\r\n        {DefaultNotice && (\r\n          <TextArea\r\n            style={{ height: \"60px\" }}\r\n            onChange={onNotice}\r\n            defaultValue={DefaultNotice}\r\n          />\r\n        )}\r\n        {!DefaultNotice && (\r\n          <TextArea style={{ height: \"60px\" }} onChange={onNotice} />\r\n        )}\r\n        <Button\r\n          onClick={onNoticeSubmit}\r\n          type=\"primary\"\r\n          style={{ marginLeft: \"5px\", height: \"60px\" }}\r\n        >\r\n          적용\r\n        </Button>\r\n      </div>\r\n      {DefaultTimeSet && (\r\n        <>\r\n          <h3 className=\"title\" style={{ marginTop: \"20px\" }}>\r\n            시간 설정\r\n          </h3>\r\n          <Input\r\n            type=\"number\"\r\n            style={{ width: \"50px\" }}\r\n            onChange={onTimeInterval}\r\n            defaultValue={DefaultTimeSet.interval}\r\n          />{\" \"}\r\n          분 간격\r\n          <TimePicker.RangePicker\r\n            style={{ marginLeft: \"5px\" }}\r\n            format=\"HH:mm\"\r\n            onChange={onTimeRange}\r\n            defaultValue={[\r\n              moment(\r\n                DefaultTimeSet.date_start.hour +\r\n                  \":\" +\r\n                  DefaultTimeSet.date_start.min,\r\n                \"HH:mm\"\r\n              ),\r\n              moment(\r\n                DefaultTimeSet.date_end.hour +\r\n                  \":\" +\r\n                  DefaultTimeSet.date_end.min,\r\n                \"HH:mm\"\r\n              ),\r\n            ]}\r\n          />\r\n          <Button\r\n            onClick={onTimeSubmit}\r\n            type=\"primary\"\r\n            style={{ marginLeft: \"5px\" }}\r\n          >\r\n            적용\r\n          </Button>\r\n          <p style={{ marginTop: \"5px\", fontSize: \"12px\" }}>\r\n            * 시간설정이 변경되면 현재 예약중인 시간이 변경 될 수 있습니다.\r\n          </p>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ChairAdmin;\r\n","D:\\프로젝트\\sy-cafe-order\\src\\component\\welfare\\Chair.js",["425","426","427","428","429","430","431","432","433","434","435","436","437","438"],"import React, { useEffect, useState } from \"react\";\r\nimport firebase from \"../../firebase\";\r\nimport { useSelector } from \"react-redux\";\r\nimport {\r\n  Popover,\r\n  Popconfirm,\r\n  message,\r\n  Button,\r\n  DatePicker,\r\n  Statistic,\r\n} from \"antd\";\r\nimport * as antIcon from \"react-icons/ai\";\r\nimport * as imIcon from \"react-icons/im\";\r\nimport * as giIcon from \"react-icons/gi\";\r\nimport { getFormatDate, curWeek } from \"../CommonFunc\";\r\nimport moment from \"moment\";\r\nimport { constant } from \"lodash\";\r\nimport axios from \"axios\";\r\nimport ReservList from \"./chair/ReservList\";\r\nconst { Countdown } = Statistic;\r\n\r\nfunction Chair() {\r\n  const todayDate = getFormatDate(new Date());\r\n  const userInfo = useSelector((state) => state.user.currentUser);\r\n  const welDb = firebase.database();\r\n  const [CurDate, setCurDate] = useState(getFormatDate(new Date()));\r\n  const [TimeData, setTimeData] = useState();\r\n\r\n  const timeTable = (time, chair, start1, start2, end1, end2) => {\r\n    const first = new Date(\r\n      SearchDate.year,\r\n      SearchDate.og_month,\r\n      SearchDate.og_day,\r\n      start1,\r\n      start2\r\n    );\r\n    const last = new Date(\r\n      SearchDate.year,\r\n      SearchDate.og_month,\r\n      SearchDate.og_day,\r\n      end1,\r\n      end2\r\n    );\r\n    let timeArr = [];\r\n    let copy = timeArr.concat();\r\n    let n = 0;\r\n    let chairArr = [];\r\n    for (let i = 1; i <= chair; i++) {\r\n      chairArr.push({\r\n        room_num: i,\r\n      });\r\n    }\r\n    while (first.getTime() < last.getTime()) {\r\n      let obj = {\r\n        timeNum: n + 1,\r\n        time: getFormatDate(first),\r\n        room: chairArr,\r\n      };\r\n      first.setMinutes(first.getMinutes() + time);\r\n      timeArr.push(obj);\r\n      n++;\r\n    }\r\n    return timeArr;\r\n  };\r\n\r\n  const [Rerender, setRerender] = useState(false);\r\n  const onRerender = () => {\r\n    setRerender(!Rerender);\r\n  };\r\n  const [ListData, setListData] = useState();\r\n\r\n  const getListOff = () => {\r\n    welDb.ref(`chair/list/${CurDate.full}`).off();\r\n  };\r\n\r\n  const [DefaultNotice, setDefaultNotice] = useState();\r\n  useEffect(() => {\r\n    welDb.ref(\"chair/notice\").once(\"value\", (data) => {\r\n      setDefaultNotice(data.val());\r\n    });\r\n    return () => {};\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setInterval(() => {\r\n      setCurDate(getFormatDate(new Date()));\r\n    }, 2000);\r\n    return () => {};\r\n  }, []);\r\n\r\n  const [SearchDate, setSearchDate] = useState(CurDate);\r\n\r\n  const [MyReservation, setMyReservation] = useState();\r\n  const [ThisWeekRserv, setThisWeekRserv] = useState();\r\n  const [ThisWeekPenalty, setThisWeekPenalty] = useState();\r\n\r\n  useEffect(() => {\r\n    //이번주 예약횟수\r\n    let weekObj = curWeek(SearchDate.full_); //todayDate.timestamp\r\n    welDb\r\n      .ref(`chair/user/${userInfo.uid}/list`)\r\n      .orderByKey()\r\n      .startAt(weekObj.firstDate)\r\n      .endAt(weekObj.lastDate)\r\n      .on(\"value\", (data) => {\r\n        let curWeekSel = [];\r\n        data.forEach((el) => {\r\n          curWeekSel.push(el.val());\r\n        });\r\n        setThisWeekRserv(curWeekSel.length);\r\n      });\r\n\r\n    let penaltyCount = 0;\r\n    welDb\r\n      .ref(`chair/user/${userInfo.uid}/penalty`)\r\n      .orderByKey()\r\n      .startAt(weekObj.firstDate)\r\n      .endAt(weekObj.lastDate)\r\n      .on(\"value\", (data) => {\r\n        data.forEach((el) => {\r\n          penaltyCount += el.val();\r\n        });\r\n        setThisWeekPenalty(penaltyCount);\r\n      });\r\n\r\n    //시간설정\r\n    welDb.ref(\"chair/time_set\").once(\"value\", (data) => {\r\n      const startTime = data.val() ? data.val().start : \"\";\r\n      const endTime = data.val() ? data.val().end : \"\";\r\n      const interval = data.val() ? data.val().interval : \"\";\r\n      // 사용자 목록\r\n      welDb.ref(`chair/user/${userInfo.uid}/list`).on(\"value\", (data) => {\r\n        let userArr = [];\r\n        data.forEach((el) => {\r\n          for (let i in el.val()) {\r\n            if (el.val()[i].reserve_time > Date.now()) {\r\n              let room =\r\n                el.val()[i].room === \"room1\" ? (\r\n                  <imIcon.ImMan />\r\n                ) : el.val()[i].room === \"room2\" ? (\r\n                  <imIcon.ImWoman />\r\n                ) : el.val()[i].room === \"room3\" ? (\r\n                  <imIcon.ImManWoman />\r\n                ) : (\r\n                  <giIcon.GiLeg />\r\n                );\r\n              let obj = {\r\n                date: getFormatDate(new Date(el.val()[i].reserve_time)),\r\n                timestamp: el.val()[i].timestamp,\r\n                timeNum: el.val()[i].timeNum,\r\n                roomNum: el.val()[i].room,\r\n                room: room,\r\n              };\r\n              userArr.push(obj);\r\n            }\r\n          }\r\n        });\r\n        setMyReservation(userArr);\r\n      });\r\n\r\n      // 예약목록\r\n      let arr = [];\r\n      welDb.ref(`chair/list/${SearchDate.full}`).on(\"value\", (data) => {\r\n        let timeArr = timeTable(\r\n          interval,\r\n          3,\r\n          startTime[0],\r\n          startTime[1],\r\n          endTime[0],\r\n          endTime[1]\r\n        ); //시간표 생성\r\n        let arr2 = JSON.parse(JSON.stringify(timeArr));\r\n        data.forEach((el) => {\r\n          arr.push(el.val());\r\n        });\r\n        timeArr.map((time, idx) => {\r\n          let reservCount = 0;\r\n          arr.map((user) => {\r\n            if (user.timeNum === time.timeNum) {\r\n              for (let key in user) {\r\n                if (key != \"timeNum\" && user[key]) {\r\n                  arr2[idx][key] = user[key];\r\n                  arr2[idx].room[user[key].room - 1] = {\r\n                    ...arr2[idx].room[user[key].room - 1],\r\n                    num: \"room\" + user[key].room,\r\n                    check: true,\r\n                  };\r\n                }\r\n              }\r\n            }\r\n          });\r\n          arr2[idx].reservCount = Object.keys(arr2[idx]).length - 3;\r\n        });\r\n        setListData(arr2);\r\n      });\r\n    });\r\n\r\n    return () => {\r\n      getListOff();\r\n    };\r\n  }, [Rerender]);\r\n\r\n  const reservation = (num, time, chair) => {\r\n    let now = getFormatDate(new Date());\r\n\r\n    if (now.hour < 9) {\r\n      message.error(\"예약은 9시부터 가능합니다.\");\r\n      return;\r\n    }\r\n\r\n    if (ThisWeekRserv + ThisWeekPenalty >= 3) {\r\n      message.error(\"예약은 일주일에 3번까지 가능합니다.\");\r\n      return;\r\n    }\r\n    const type =\r\n      chair === 1\r\n        ? \"남\"\r\n        : chair === 2\r\n        ? \"여\"\r\n        : chair === 3\r\n        ? \"공용(세라젬)\"\r\n        : \"공용(발마사지)\";\r\n    const dateTime = time.full + String(time.hour) + String(time.min);\r\n\r\n    let room = \"room\" + chair;\r\n    const user = {\r\n      name: userInfo.displayName,\r\n      part: userInfo.photoURL,\r\n      user_uid: userInfo.uid,\r\n      room: chair,\r\n    };\r\n\r\n    welDb\r\n      .ref(`chair/user/${userInfo.uid}/list/${SearchDate.full}`)\r\n      .get()\r\n      .then((data) => {\r\n        if (data.exists()) {\r\n          message.error(\"예약은 하루에 한건만 가능합니다.\");\r\n        } else {\r\n          // 예약 목록\r\n          welDb.ref(`chair/list/${SearchDate.full}/${num}`).update({\r\n            [room]: user,\r\n            timeNum: num,\r\n          });\r\n\r\n          // 사용자 예약목록\r\n          welDb\r\n            .ref(`chair/user/${userInfo.uid}/list/${SearchDate.full}/${num}`)\r\n            .update({\r\n              reserve_time: time.timestamp,\r\n              timestamp: new Date().getTime(),\r\n              timeNum: num,\r\n              room,\r\n            });\r\n\r\n          // 카운팅\r\n          welDb.ref(`chair/user/${userInfo.uid}/count`).transaction((pre) => {\r\n            pre++;\r\n            return pre;\r\n          });\r\n\r\n          message.success(\"예약 되었습니다.\");\r\n\r\n          /* 카톡알림\r\n            axios.post('https://metree.co.kr/_sys/_xml/chair_api_add.php',{\r\n              name:userInfo.displayName,\r\n              call:userInfo.call_number,\r\n              date:dateTime,\r\n              type:`힐링룸(${type})`\r\n            })\r\n            .then(res=>{\r\n              message.success('예약 되었습니다.');\r\n            })\r\n            .catch(error => {\r\n              console.log(error) \r\n            });\r\n            */\r\n        }\r\n      });\r\n  };\r\n\r\n  const onCancel = (date, num, room) => {\r\n    let limitHour = 2;\r\n    let nowDate = new Date();\r\n    let nowHour = nowDate.getHours();\r\n    let nowMin = nowDate.getMinutes();\r\n    let nowCalcMin = nowHour * 60 + nowMin * 1;\r\n    let reservCalcMin = date.hour * 60 + date.min * 1;\r\n    let penalty;\r\n    const dateTime = date.full + String(date.hour) + String(date.min);\r\n    if (reservCalcMin - nowCalcMin < 120) {\r\n      penalty = window.confirm(\r\n        `예약시간 ${limitHour}시간 이내에 취소시 이용횟수 차감이 되지않습니다.\\n취소 하시겠습니까?`\r\n      );\r\n      if (penalty) {\r\n        rervCancel();\r\n        welDb\r\n          .ref(`chair/user/${userInfo.uid}/penalty/${date.full}`)\r\n          .transaction((pre) => {\r\n            pre++;\r\n            return pre;\r\n          });\r\n      } else {\r\n        return;\r\n      }\r\n    } else {\r\n      rervCancel();\r\n    }\r\n    function rervCancel() {\r\n      welDb.ref(`chair/list/${date.full}/${num}/${room}`).remove();\r\n      welDb.ref(`chair/user/${userInfo.uid}/list/${date.full}/${num}`).remove();\r\n      welDb.ref(`chair/user/${userInfo.uid}/count`).transaction((pre) => {\r\n        pre--;\r\n        return pre;\r\n      });\r\n    }\r\n\r\n    axios\r\n      .post(\"https://metree.co.kr/_sys/_xml/chair_api_del.php\", {\r\n        name: userInfo.displayName,\r\n        call: userInfo.call_number,\r\n        date: dateTime,\r\n      })\r\n      .then((res) => {\r\n        message.success(\"취소 되었습니다.\");\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n\r\n    setRerender(!Rerender);\r\n  };\r\n\r\n  // 날짜선택\r\n  const onSelectDate = (date, dateString) => {\r\n    if (date) {\r\n      setSearchDate(getFormatDate(date._d));\r\n      setRerender(!Rerender);\r\n    }\r\n  };\r\n  const disabledDate = (current) => {\r\n    return current && current >= moment().endOf(\"day\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {DefaultNotice && (\r\n        <div className=\"item-info-box\" style={{ marginBottom: \"20px\" }}>\r\n          <pre>{DefaultNotice}</pre>\r\n        </div>\r\n      )}\r\n      <div className=\"flex-box a-center\" style={{ marginBottom: \"20px\" }}>\r\n        <h3 className=\"title\" style={{ marginRight: \"10px\" }}>\r\n          날짜선택\r\n        </h3>\r\n        <DatePicker\r\n          format=\"YYYY-MM-DD\"\r\n          defaultValue={moment()}\r\n          disabledDate={disabledDate}\r\n          style={{ marginBottom: \"10px\" }}\r\n          onChange={onSelectDate}\r\n        />\r\n      </div>\r\n      {MyReservation && MyReservation.length > 0 && (\r\n        <>\r\n          <h3 className=\"title\">예정중인 내 예약목록</h3>\r\n          <ul className=\"my-reserv-list\">\r\n            {MyReservation.map((el, idx) => (\r\n              <ReservList\r\n                el={el}\r\n                idx={idx}\r\n                CurDate={CurDate}\r\n                onRerender={onRerender}\r\n                onCancel={onCancel}\r\n              />\r\n            ))}\r\n          </ul>\r\n        </>\r\n      )}\r\n      {ListData && (\r\n        <>\r\n          <div\r\n            className=\"flex-box\"\r\n            style={{ alignItems: \"baseline\", marginBottom: \"10px\" }}\r\n          >\r\n            <h3\r\n              className=\"title\"\r\n              style={{ marginTop: \"25px\", marginRight: \"7px\" }}\r\n            >\r\n              예약하기\r\n            </h3>\r\n            <span>\r\n              - 이번주<span style={{ fontSize: \"12px\" }}>(선택날짜기준)</span>{\" \"}\r\n              <span style={{ fontWeight: \"bold\" }}>\r\n                {ThisWeekRserv + ThisWeekPenalty}회\r\n              </span>{\" \"}\r\n              이용 하셨습니다.\r\n            </span>\r\n            {ThisWeekPenalty > 0 && (\r\n              <span>(취소 패널티 : {ThisWeekPenalty}회)</span>\r\n            )}\r\n          </div>\r\n          <ul className=\"flex-box reserv-info\">\r\n            <li>\r\n              <imIcon.ImMan /> 남자전용(바디프렌드)\r\n            </li>\r\n            <li>\r\n              <imIcon.ImWoman /> 여자전용(바디프렌드)\r\n            </li>\r\n            <li>\r\n              <imIcon.ImManWoman /> 남여공용(세라젬)\r\n            </li>\r\n            {/* <li>\r\n              <giIcon.GiLeg /> 남여공용(발마사지)\r\n            </li> */}\r\n            <li>\r\n              <antIcon.AiOutlineBell className=\"info-ic-reserv\" /> 예약중\r\n            </li>\r\n            <li>\r\n              <antIcon.AiOutlineBell className=\"info-ic-my\" /> 내예약\r\n            </li>\r\n          </ul>\r\n          <ul className=\"reserv-time-list\">\r\n            {ListData.map((el, idx) => (\r\n              <li\r\n                key={idx}\r\n                className={\r\n                  el.time.timestamp > CurDate.timestamp &&\r\n                  el.user &&\r\n                  el.user.user_uid === userInfo.uid\r\n                    ? \"my-reserve\"\r\n                    : el.time.timestamp > CurDate.timestamp && el.user\r\n                    ? \"reserv\"\r\n                    : el.time.timestamp < CurDate.timestamp\r\n                    ? \"timeover\"\r\n                    : \"\"\r\n                }\r\n              >\r\n                <div className={el.reservCount === 3 ? \"box full\" : \"box\"}>\r\n                  <span className=\"time fon-barlow\">\r\n                    {el.time.hour}:{el.time.min}\r\n                  </span>\r\n                  <div className=\"btn-box\">\r\n                    {el.room.map((list) => (\r\n                      <>\r\n                        <Popconfirm\r\n                          title={\r\n                            list.room_num === 1\r\n                              ? `남자방에 예약하시겠습니까?`\r\n                              : list.room_num === 2\r\n                              ? `여자방에 예약하시겠습니까?`\r\n                              : list.room_num === 3\r\n                              ? `공용방(세라젬)에 예약하시겠습니까?`\r\n                              : `발마사지를 예약하시겠습니까?`\r\n                          }\r\n                          disabled={\r\n                            el.time.timestamp < CurDate.timestamp || list.check\r\n                              ? true\r\n                              : false\r\n                          }\r\n                          onConfirm={() => {\r\n                            reservation(el.timeNum, el.time, list.room_num);\r\n                          }}\r\n                        >\r\n                          <Button\r\n                            className={\r\n                              el[list.num] &&\r\n                              el[list.num].user_uid === userInfo.uid\r\n                                ? \"my-reserv\"\r\n                                : list.check\r\n                                ? \"btn-reserv\"\r\n                                : \"\"\r\n                            }\r\n                          >\r\n                            {list.check ? (\r\n                              <Popover\r\n                                content={`${el[list.num].name}(${\r\n                                  el[list.num].part\r\n                                })`}\r\n                                trigger=\"click\"\r\n                                title=\"예약\"\r\n                              >\r\n                                <antIcon.AiOutlineBell\r\n                                  style={{ fontSize: \"16px\" }}\r\n                                />\r\n                              </Popover>\r\n                            ) : (\r\n                              <>\r\n                                {list.room_num === 1 ? (\r\n                                  <imIcon.ImMan />\r\n                                ) : list.room_num === 2 ? (\r\n                                  <imIcon.ImWoman />\r\n                                ) : list.room_num === 3 ? (\r\n                                  <imIcon.ImManWoman />\r\n                                ) : (\r\n                                  <giIcon.GiLeg />\r\n                                )}\r\n                              </>\r\n                            )}\r\n                          </Button>\r\n                        </Popconfirm>\r\n                      </>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Chair;\r\n","D:\\프로젝트\\sy-cafe-order\\src\\component\\welfare\\StylerAdmin.js",["439"],"import React, { useState, useEffect } from \"react\";\r\nimport firebase from \"../../firebase\";\r\nimport { message, Button, Input, TimePicker } from \"antd\";\r\nimport { getFormatDate } from \"../CommonFunc\";\r\nimport moment from \"moment\";\r\nconst { TextArea } = Input;\r\n\r\nfunction StylerAdmin() {\r\n  const welDb = firebase.database();\r\n\r\n  const [DefaultNotice, setDefaultNotice] = useState();\r\n  const [DefaultTimeSet, setDefaultTimeSet] = useState();\r\n  useEffect(() => {\r\n    welDb.ref(\"styler/time_set\").once(\"value\", (data) => {\r\n      setDefaultTimeSet(data.val());\r\n    });\r\n\r\n    welDb.ref(\"styler/notice\").once(\"value\", (data) => {\r\n      setDefaultNotice(data.val());\r\n    });\r\n    return () => {};\r\n  }, []);\r\n\r\n  const [Notice, setNotice] = useState();\r\n  const onNotice = (e) => {\r\n    setNotice(e.target.value);\r\n  };\r\n  const onNoticeSubmit = () => {\r\n    welDb\r\n      .ref(\"styler\")\r\n      .update({\r\n        notice: Notice,\r\n      })\r\n      .then(() => message.success(\"적용되었습니다.\"));\r\n  };\r\n\r\n  const [TimeInterval, setTimeInterval] = useState();\r\n  const onTimeInterval = (e) => {\r\n    setTimeInterval(e.target.value);\r\n  };\r\n\r\n  const [TimeRange, setTimeRange] = useState();\r\n  const [DateRange, setDateRange] = useState();\r\n  const onTimeRange = (e) => {\r\n    if (e) {\r\n      let time = {\r\n        start: [new Date(e[0]._d).getHours(), new Date(e[0]._d).getMinutes()],\r\n        end: [new Date(e[1]._d).getHours(), new Date(e[1]._d).getMinutes()],\r\n      };\r\n      let date = {\r\n        start: getFormatDate(new Date(e[0]._d)),\r\n        end: getFormatDate(new Date(e[1]._d)),\r\n      };\r\n      setTimeRange(time);\r\n      setDateRange(date);\r\n    } else {\r\n      setTimeRange(\"\");\r\n    }\r\n  };\r\n\r\n  const onTimeSubmit = () => {\r\n    if (!TimeInterval && !DefaultTimeSet) {\r\n      message.error(\"시간간격을 입력해 주세요\");\r\n      return;\r\n    }\r\n    if (!TimeRange && !DefaultTimeSet) {\r\n      message.error(\"시작시작과 끝나는시간을 입력해 주세요\");\r\n      return;\r\n    }\r\n    welDb\r\n      .ref(\"styler/time_set\")\r\n      .update({\r\n        interval: TimeInterval\r\n          ? parseInt(TimeInterval)\r\n          : DefaultTimeSet.interval,\r\n        start: TimeRange ? TimeRange.start : DefaultTimeSet.start,\r\n        end: TimeRange ? TimeRange.end : DefaultTimeSet.end,\r\n        date_start: DateRange ? DateRange.start : DefaultTimeSet.date_start,\r\n        date_end: DateRange ? DateRange.end : DefaultTimeSet.date_end,\r\n      })\r\n      .then(() => message.success(\"적용되었습니다.\"));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"title\">공지사항</h3>\r\n      <div className=\"flex-box\">\r\n        {DefaultNotice && (\r\n          <TextArea\r\n            style={{ height: \"60px\" }}\r\n            onChange={onNotice}\r\n            defaultValue={DefaultNotice}\r\n          />\r\n        )}\r\n        {!DefaultNotice && (\r\n          <TextArea style={{ height: \"60px\" }} onChange={onNotice} />\r\n        )}\r\n        <Button\r\n          onClick={onNoticeSubmit}\r\n          type=\"primary\"\r\n          style={{ marginLeft: \"5px\", height: \"60px\" }}\r\n        >\r\n          적용\r\n        </Button>\r\n      </div>\r\n      <h3 className=\"title\" style={{ marginTop: \"20px\" }}>\r\n        시간 설정\r\n      </h3>\r\n      {DefaultTimeSet && (\r\n        <Input\r\n          type=\"number\"\r\n          style={{ width: \"50px\" }}\r\n          onChange={onTimeInterval}\r\n          defaultValue={DefaultTimeSet.interval}\r\n        />\r\n      )}\r\n      {!DefaultTimeSet && (\r\n        <Input\r\n          type=\"number\"\r\n          style={{ width: \"50px\" }}\r\n          onChange={onTimeInterval}\r\n        />\r\n      )}\r\n      분 간격\r\n      {DefaultTimeSet && (\r\n        <TimePicker.RangePicker\r\n          style={{ marginLeft: \"5px\" }}\r\n          format=\"HH:mm\"\r\n          onChange={onTimeRange}\r\n          defaultValue={[\r\n            moment(\r\n              DefaultTimeSet.date_start.hour +\r\n                \":\" +\r\n                DefaultTimeSet.date_start.min,\r\n              \"HH:mm\"\r\n            ),\r\n            moment(\r\n              DefaultTimeSet.date_end.hour + \":\" + DefaultTimeSet.date_end.min,\r\n              \"HH:mm\"\r\n            ),\r\n          ]}\r\n        />\r\n      )}\r\n      {!DefaultTimeSet && (\r\n        <TimePicker.RangePicker\r\n          style={{ marginLeft: \"5px\" }}\r\n          format=\"HH:mm\"\r\n          onChange={onTimeRange}\r\n        />\r\n      )}\r\n      <Button\r\n        onClick={onTimeSubmit}\r\n        type=\"primary\"\r\n        style={{ marginLeft: \"5px\" }}\r\n      >\r\n        적용\r\n      </Button>\r\n      <p style={{ marginTop: \"5px\", fontSize: \"12px\" }}>\r\n        * 시간설정이 변경되면 현재 예약중인 시간이 변경 될 수 있습니다.\r\n      </p>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default StylerAdmin;\r\n","D:\\프로젝트\\sy-cafe-order\\src\\redux\\actions\\user_action.js",[],"D:\\프로젝트\\sy-cafe-order\\src\\component\\Research\\Research.js",["440","441","442","443","444","445","446","447","448","449","450"],"import React, { useState, useEffect } from 'react';\r\nimport { useSelector } from \"react-redux\";\r\nimport { Button } from 'antd';\r\nimport { Link } from 'react-router-dom'\r\nimport firebase from \"../../firebase\";\r\nimport { getFormatDate } from \"../CommonFunc\"\r\nconst curDate = getFormatDate(new Date());\r\n\r\nfunction Research() {\r\n  const userInfo = useSelector((state) => state.user.currentUser);\r\n  const [ResearchList, setResearchList] = useState()\r\n  const [ReRender, setReRender] = useState(false)\r\n  useEffect(() => {\r\n    let arr = [];\r\n    firebase.database().ref('research')\r\n    .once(\"value\")\r\n    .then((snapshot) => {\r\n      snapshot.forEach(el=>{\r\n        (\r\n          el.val().member_check && el.val().member_check.includes(userInfo.uid) || \r\n        el.val().alba && userInfo.auth && userInfo.auth.includes('alba') || \r\n        el.val().intern && userInfo.auth && userInfo.auth.includes('intern')\r\n        ) ? console.log() : \r\n        arr.push(el.val())\r\n      })\r\n      arr = arr.sort((a,b)=>{\r\n        return b.timestamp - a.timestamp\r\n      })\r\n      setResearchList(arr)\r\n    })\r\n    return () => {\r\n      \r\n    }\r\n  }, [ReRender])\r\n  \r\n\r\n  const onDelete = (uid) => {\r\n    let a = window.confirm('이 게시물을 삭제 하시겠습니까?')\r\n    if(a){\r\n      const ref = firebase.storage().ref(`research/image/${uid}`);\r\n      ref.listAll()\r\n      .then(dir => {\r\n        const images = dir._delegate.items;\r\n        images.map(el=>{\r\n          let path = el._location.path_;\r\n          firebase.storage().ref(`${path}`).delete()\r\n          .then(()=>{\r\n          }).catch(error=>console.error(error))\r\n        })\r\n      })\r\n      firebase.database().ref(`research/${uid}`)\r\n      .remove()\r\n      setReRender(!ReRender)\r\n    }\r\n  }\r\n  \r\n  return (\r\n    <>\r\n      <ul className=\"board-basic research\">\r\n          <li key=\"0\" className=\"tit\">\r\n            <div className=\"info-box\">\r\n              <span className=\"date limit\">기한</span>\r\n              <span className=\"state\">상태</span>\r\n              <span className=\"subject\">제목</span>\r\n            </div>\r\n            <div className=\"right-box\">\r\n              <span className=\"date\">날짜</span>\r\n              {userInfo && userInfo.auth && userInfo.auth.includes('insa') &&\r\n                <span className=\"admin\"></span>\r\n              }\r\n            </div>\r\n          </li>        \r\n          {ResearchList && ResearchList.map((el,idx) => (\r\n            <li key={idx+1} >\r\n              <div className=\"info-box\">\r\n                <span className=\"date limit\">\r\n                  {el.limit_start == 0 && \r\n                    <>\r\n                    무기한\r\n                    </>\r\n                  }\r\n                  {el.limit_start != 0 && \r\n                    <>\r\n                    {getFormatDate(new Date(el.limit_start)).full_} ~ {getFormatDate(new Date(el.limit_end)).full_}\r\n                    </>\r\n                  }\r\n                </span>\r\n                {el.limit_start < new Date().getTime() && \r\n                 el.limit_end > new Date().getTime() && \r\n                 <span className=\"state con\"><span>진행</span></span>\r\n                }\r\n                {el.limit_start > new Date().getTime() && \r\n                  <span className=\"state con yet\"><span>예정</span></span>\r\n                }\r\n                {el.limit_end < new Date().getTime() && \r\n                  <span className=\"state con end\"><span>마감</span></span>\r\n                }\r\n                <span className={`subject`}>\r\n                  <Link to={{\r\n                    pathname: `/research_view`,\r\n                    state: {\r\n                      uid:el.uid\r\n                    }\r\n                  }}\r\n                    >{el.title}\r\n                  </Link>\r\n                </span>\r\n              </div>\r\n              <div className=\"right-box\">\r\n                <span className=\"date\">{el.date}</span>\r\n                {userInfo && userInfo.auth && userInfo.auth.includes('insa') && \r\n                  <span className=\"admin\">                    \r\n                    <Button onClick={()=>{onDelete(el.uid)}}>삭제</Button>\r\n                  </span>\r\n                }\r\n              </div>\r\n            </li>\r\n          ))}\r\n      </ul>\r\n      {userInfo && userInfo.auth && userInfo.auth.includes('insa') &&\r\n      <div style={{textAlign:\"right\",marginTop:\"15px\"}}>\r\n        <Button style={{width:\"100px\"}} type=\"primary\">\r\n          <Link to=\"/research_write\">게시물 등록</Link>\r\n        </Button>\r\n      </div>\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Research\r\n","D:\\프로젝트\\sy-cafe-order\\src\\component\\Research\\ResearchTemp.js",["451","452","453","454","455","456","457","458","459","460","461"],"import React, { useState, useRef, useEffect } from 'react'\r\nimport { useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Form, Input, Button, Space, Radio, Checkbox, Upload, Switch, DatePicker, Select, Row, Col } from 'antd';\r\nimport { MinusCircleOutlined, PlusOutlined, UploadOutlined } from '@ant-design/icons';\r\nimport uuid from \"react-uuid\";\r\nimport firebase from \"../../firebase\";\r\nimport { getFormatDate } from \"../CommonFunc\";\r\nimport moment from 'moment';\r\nconst { RangePicker } = DatePicker;\r\nfunction ResearchTemp(props) {\r\n  const userInfo = useSelector((state) => state.user.currentUser);\r\n\r\n  const [TotalUser, setTotalUser] = useState()\r\n  const [ResearchViewInfo, setResearchViewInfo] = useState();\r\n  const [onMember, setOnMember] = useState(false)  \r\n  const [TypeState, setTypeState] = useState()\r\n  useEffect(() => {\r\n    let userArr = [];\r\n    firebase\r\n    .database()\r\n    .ref(\"users\")\r\n    .once(\"value\", (snapshot) => {\r\n      snapshot.forEach(el=>{\r\n        userArr.push({\r\n          uid:el.key,\r\n          auth:el.val().auth ? el.val().auth : \"\",\r\n          name:el.val().name,\r\n          part:el.val().part,\r\n          role:el.val().role\r\n        })\r\n      })\r\n      userArr.sort((a,b)=>{\r\n        return a.part < b.part ? -1 : 1 \r\n      })\r\n      setTotalUser(userArr);\r\n    });\r\n    firebase.database().ref(`research_temp/${userInfo.uid}/${props.location.state.uid}`)\r\n    .once(\"value\", snapshot => {\r\n      let res = snapshot.val();\r\n      if(snapshot.val() && snapshot.val().image){\r\n        let uploadArr = [];\r\n        snapshot.val().image.map((el,idx)=>{\r\n          uploadArr.push({\r\n            uid:idx,\r\n            name:el.name,\r\n            status:'done',\r\n            url:el.url\r\n          })\r\n        })\r\n        res.upload = uploadArr\r\n      }      \r\n      setOnMember(res.member)\r\n      setTypeState(res.type)\r\n      setResearchViewInfo(res)\r\n    })\r\n\r\n    return () => {      \r\n    }\r\n  }, [])\r\n\r\n  const btnToList = useRef();\r\n\r\n  const uid = uuid();\r\n\r\n  const disabledDate = (current) => {\r\n    return current && current < moment().subtract(1, 'days');\r\n  }\r\n\r\n  const [DateLimitState, setDateLimitState] = useState(false)\r\n  const dateLimit = () => {\r\n    setDateLimitState(!DateLimitState)\r\n  }  \r\n\r\n  let newUid = uuid();\r\n  const finishDataSave = (values) => {\r\n    \r\n    let uploadURL = values.upload ? values.upload : [];   \r\n    const getImgUrl = async () => {\r\n    values.upload && values.upload.map(el=>{\r\n    if(el.originFileObj){\r\n      let getImg = async () => {\r\n      let uploadTask = await firebase\r\n          .storage()\r\n          .ref(\"research\")\r\n          .child(`image/${uid}/${newUid}`)          \r\n          .put(el.originFileObj, el.type);\r\n            uploadTask.ref.getDownloadURL()\r\n            .then(url => {\r\n              uploadURL.push({                \r\n                name:el.originFileObj.name,\r\n                url:url\r\n              });\r\n              firebase.database().ref('research')\r\n              .child(uid)\r\n              .update({\r\n                image: uploadURL\r\n              });                       \r\n            });\r\n          }\r\n        getImg();\r\n      }else{\r\n        uploadURL = \"\"\r\n        firebase.database().ref('research')\r\n        .child(uid)\r\n        .update({\r\n          image: uploadURL\r\n        }); \r\n      }\r\n      })\r\n    }\r\n    getImgUrl(); \r\n      firebase.database().ref('research')\r\n      .child(uid)\r\n      .update({\r\n        title:values.title,\r\n        type:values.type,\r\n        option:values.option_list ? values.option_list : '',\r\n        member:values.member ? values.member : false,\r\n        member_check:values.member_check ? values.member_check : '',\r\n        etc:values.etc ? values.etc : '',\r\n        uid:uid,\r\n        alba:values.alba ? values.alba : false,\r\n        intern:values.intern ? values.intern : false,\r\n        secret:values.secret ? values.secret : false,\r\n        date:getFormatDate(new Date()).full_,\r\n        timestamp:new Date().getTime(),\r\n        limit_start:values.time_limit ? values.time_limit[0]._d.getTime() : 0,\r\n        limit_end:values.time_limit ? values.time_limit[1]._d.getTime() : 99999999999999,\r\n      });\r\n    }      \r\n\r\n \r\n  \r\n  const onFinish = async (values) => {\r\n    if(values.type != 2){\r\n      let listLength = values.option_list.length;\r\n      let count = 0;\r\n      const ref = firebase.storage().ref(`research/image/${uid}`);\r\n      ref.listAll()\r\n      .then(dir => {\r\n        const images = dir._delegate.items;\r\n        images.map(el=>{\r\n            let path = el._location.path_;\r\n            firebase.storage().ref(`${path}`).delete()\r\n            .then(()=>{\r\n            }).catch(error=>console.error(error))\r\n          })\r\n        })\r\n      let urlArr = [];\r\n      values.option_list && values.option_list.map(el=>{\r\n        el.option_photo = el.option_photo ? el.option_photo : \"\";\r\n        el.option_a = el.option_a ? el.option_a : \"\";\r\n        el.option_type = el.option_type ? el.option_type : \"\";\r\n        count++;    \r\n        const getOptionImgUrl = (photo) => {\r\n            if(!photo){\r\n              if(count == listLength){\r\n                finishDataSave(values);\r\n                btnToList.current && btnToList.current.click();\r\n              }\r\n            }else{\r\n            photo.map((list,idx)=>{\r\n              if(list.originFileObj){\r\n                let getImg = async () => {\r\n                let uploadTask = await firebase\r\n                .storage()\r\n                .ref(\"research\")\r\n                .child(`image/${uid}/${uuid()}`)          \r\n                .put(list.originFileObj, list.type);\r\n                  uploadTask.ref.getDownloadURL()\r\n                  .then(url => {\r\n                    urlArr.push({\r\n                      uid:idx,\r\n                      status:\"done\",\r\n                      name:list.originFileObj.name,\r\n                      url:url\r\n                    });\r\n                    firebase.database().ref('research')\r\n                    .child(`${uid}/option/${idx}`)\r\n                    .update({\r\n                      option_photo: urlArr\r\n                    });                \r\n                    el.option_photo = urlArr ? urlArr : '';                \r\n                    if(count == listLength){\r\n                      finishDataSave(values);\r\n                      btnToList.current && btnToList.current.click();\r\n                    }\r\n                  });\r\n                }\r\n                getImg();              \r\n              }else{\r\n                finishDataSave(values);\r\n                btnToList.current && btnToList.current.click();\r\n              }\r\n              })\r\n            }          \r\n          }\r\n        getOptionImgUrl(el.option_photo);\r\n        el.option_photo = el.option_photo ? el.option_photo : '';\r\n      })\r\n    }else{\r\n      finishDataSave(values);\r\n      btnToList.current && btnToList.current.click();\r\n    }\r\n      \r\n  };\r\n\r\n\r\n\r\n\r\n  const typeOptions = [\r\n    {label: '선다형', value: 1},\r\n    {label: '서술형', value: 2},\r\n    {label: '복합형', value: 3}\r\n  ]\r\n  const onChangeType = (e) => {\r\n    setTypeState(e.target.value)\r\n  }\r\n\r\n  const normFile = (e) => {\r\n    console.log(e)\r\n    if (Array.isArray(e)) {\r\n      return e;\r\n    }\r\n    return e && e.fileList;\r\n  };\r\n\r\n  const onSelectChange = (e) => {\r\n    console.log(e)\r\n  }\r\n\r\n\r\n\r\n  const onMemberChange = (e) => {\r\n    setOnMember(!onMember)\r\n  }\r\n\r\n\r\n  return (\r\n    <>     \r\n      {ResearchViewInfo &&\r\n      <Form name=\"dynamic_form_nest_item\" className=\"research-form\" onFinish={onFinish} autoComplete=\"off\"\r\n        initialValues={{\r\n          title:ResearchViewInfo.title,\r\n          type:ResearchViewInfo.type,\r\n          upload:ResearchViewInfo.upload,\r\n          alba:ResearchViewInfo.alba,\r\n          intern:ResearchViewInfo.intern,\r\n          secret:ResearchViewInfo.secret,\r\n          member:ResearchViewInfo.member,\r\n          member_check:ResearchViewInfo.member_check,\r\n          option_list:ResearchViewInfo.option,\r\n          etc:ResearchViewInfo.etc,\r\n        }}\r\n      >\r\n        <Form.Item\r\n          name=\"title\"\r\n          rules={[{ required: true, message: '제목을 입력해 주세요.'}]}\r\n        >\r\n          <Input placeholder=\"제목\" />\r\n        </Form.Item> \r\n        <Form.Item \r\n          name=\"type\"\r\n          label=\"유형 선택\"\r\n          rules={[{ required: true, message: '타입을 선택해 주세요.'}]}\r\n        >\r\n          <Radio.Group\r\n            options={typeOptions}\r\n            onChange={onChangeType}\r\n            value={TypeState}\r\n            optionType=\"button\"\r\n          />\r\n        </Form.Item>\r\n        {TypeState && TypeState == 1 &&\r\n          <Form.List name=\"option_list\">\r\n            {(fields, { add, remove }) => (\r\n              <>\r\n                {fields.map(({ key, name, fieldKey, ...restField }) => (\r\n                  <Space key={key} style={{ display: 'flex', marginBottom: 5 }} align=\"baseline\">\r\n                    <Form.Item\r\n                      {...restField}\r\n                      name={[name, 'option']}\r\n                      fieldKey={[fieldKey, 'option']}\r\n                      rules={[{ required: true, message: '항목을 입력해 주세요.' }]}\r\n                    >\r\n                      <Input placeholder=\"항목\" />\r\n                    </Form.Item>                  \r\n                    <MinusCircleOutlined onClick={() => remove(name)} />\r\n                  </Space>\r\n                ))}\r\n                <Form.Item>\r\n                  <Button type=\"dashed\" onClick={() => add()} block icon={<PlusOutlined />}>\r\n                    Add field\r\n                  </Button>\r\n                </Form.Item>\r\n              </>\r\n            )}\r\n          </Form.List>\r\n        }\r\n        {TypeState && TypeState == 3 &&\r\n          <Form.List name=\"option_list\">\r\n            {(fields, { add, remove }) => (\r\n              <>\r\n                {fields.map(({ key, name, fieldKey, ...restField }) => (\r\n                  <Space key={key} style={{ display: 'flex', marginBottom: 5 }} align=\"baseline\">\r\n                    <Form.Item\r\n                      {...restField}\r\n                      name={[name, 'option_q']}\r\n                      fieldKey={[fieldKey, 'option_q']}\r\n                      rules={[{ required: true, message: '질문을 입력해 주세요.' }]}\r\n                    >\r\n                      <Input placeholder=\"질문\" />\r\n                    </Form.Item>     \r\n                    <Form.Item \r\n                      label=\"유형선택\"\r\n                      {...restField}\r\n                      name={[name, 'option_type']}\r\n                      fieldKey={[fieldKey, 'option_type']}\r\n                    >\r\n                      <Select defaultValue=\"0\" onChange={onSelectChange}>\r\n                        <Select.Option value=\"0\">서술형</Select.Option>\r\n                        <Select.Option value=\"1\">체크형</Select.Option>\r\n                        <Select.Option value=\"2\">선택형</Select.Option>\r\n                      </Select>\r\n                    </Form.Item> \r\n                    <Form.Item\r\n                      {...restField}\r\n                      name={[name, 'option_a']}\r\n                      fieldKey={[fieldKey, 'option_a']}\r\n                    >\r\n                      <Input placeholder=\"항목이 있을때만 ,로 구분 하여 작성\" />\r\n                    </Form.Item> \r\n                    <Form.Item\r\n                      {...restField}\r\n                      name={[name, 'option_photo']}\r\n                      label=\"이미지 업로드\"\r\n                      fieldKey={[fieldKey, 'option_photo']}\r\n                      getValueFromEvent={normFile}                      \r\n                    >\r\n                      <Upload name=\"option_upload\" listType=\"picture\">\r\n                        <Button icon={<UploadOutlined />}>Click to upload</Button>\r\n                      </Upload>\r\n                    </Form.Item>\r\n                    <MinusCircleOutlined onClick={() => remove(name)} />\r\n                  </Space>\r\n                ))}\r\n                <Form.Item>\r\n                  <Button type=\"dashed\" onClick={() => add()} block icon={<PlusOutlined />}>\r\n                    Add field\r\n                  </Button>\r\n                </Form.Item>\r\n              </>\r\n            )}\r\n          </Form.List>\r\n        }        \r\n        <Form.Item\r\n          name=\"upload\"\r\n          label=\"이미지 업로드\"\r\n          valuePropName=\"fileList\"\r\n          getValueFromEvent={normFile}\r\n        >\r\n          <Upload name=\"logo\" listType=\"picture\">\r\n            <Button icon={<UploadOutlined />}>Click to upload</Button>\r\n          </Upload>\r\n        </Form.Item>\r\n        <div className=\"flex-box\">\r\n          <Form.Item\r\n            name=\"alba\"\r\n            valuePropName=\"checked\"\r\n            style={{marginRight:\"13px\"}}\r\n          >\r\n            <Checkbox>알바 제외</Checkbox>\r\n          </Form.Item> \r\n          <Form.Item\r\n            name=\"intern\"\r\n            valuePropName=\"checked\"\r\n            style={{marginRight:\"13px\"}}\r\n          >\r\n            <Checkbox>인턴 제외</Checkbox>\r\n          </Form.Item> \r\n          <Form.Item\r\n            name=\"secret\"\r\n            valuePropName=\"checked\"            \r\n            style={{marginRight:\"13px\"}}\r\n          >\r\n            <Checkbox>결과 비공개</Checkbox>\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"member\"\r\n            valuePropName=\"checked\"\r\n            onChange={onMemberChange}\r\n          >\r\n            <Checkbox>제외 선택</Checkbox>\r\n          </Form.Item> \r\n        </div>\r\n        {onMember &&\r\n          <>\r\n            <Form.Item name=\"member_check\">\r\n              <Checkbox.Group>\r\n                <Row>                \r\n                {TotalUser && TotalUser.map((el,idx)=>(\r\n                  <Col span={4}>\r\n                    <Checkbox key={idx} value={el.uid}>{el.name}({el.part})</Checkbox>\r\n                  </Col>\r\n                ))}\r\n                </Row>\r\n              </Checkbox.Group>\r\n            </Form.Item>\r\n          </>\r\n        }\r\n        <Form.Item\r\n          name=\"etc\"          \r\n          rules={[{ required: true}]}\r\n        >\r\n          <Input.TextArea placeholder=\"설명\" />\r\n        </Form.Item>  \r\n        <Form.Item\r\n          label=\"날짜설정\" style={{marginBottom:\"7px\"}}\r\n        >\r\n          <Switch onChange={dateLimit} />\r\n        </Form.Item>\r\n        {DateLimitState &&\r\n          <Form.Item\r\n            name=\"time_limit\"\r\n          >\r\n            <RangePicker  \r\n              showTime \r\n              disabledDate={disabledDate} \r\n            />\r\n          </Form.Item>\r\n        }\r\n\r\n        <div className=\"flex-box j-center\" style={{marginTop:\"15px\"}}>\r\n          <Button type=\"primary\" htmlType=\"submit\" style={{width:\"100px\"}}>\r\n            등록하기\r\n          </Button>\r\n          <Button style={{marginLeft:\"5px\"}}>\r\n            <Link ref={btnToList} to=\"/research\">목록으로</Link>\r\n          </Button>\r\n        </div>    \r\n      </Form>\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ResearchTemp\r\n","D:\\프로젝트\\sy-cafe-order\\src\\component\\Research\\ResearchModify.js",["462","463","464","465","466","467","468","469","470","471","472"],"import React, { useState, useRef, useEffect } from 'react'\r\nimport { Link } from \"react-router-dom\";\r\nimport { Form, Input, Button, Space, Radio, Checkbox, Upload, Switch, DatePicker, Select, Row, Col } from 'antd';\r\nimport { MinusCircleOutlined, PlusOutlined, UploadOutlined } from '@ant-design/icons';\r\nimport uuid from \"react-uuid\";\r\nimport firebase from \"../../firebase\";\r\nimport { getFormatDate } from \"../CommonFunc\";\r\nimport moment from 'moment';\r\nconst { RangePicker } = DatePicker;\r\nfunction ResearchModify(props) {\r\n\r\n  const [TotalUser, setTotalUser] = useState()\r\n  const [ResearchViewInfo, setResearchViewInfo] = useState();\r\n  const [onMember, setOnMember] = useState(false)  \r\n  const [TypeState, setTypeState] = useState()\r\n  useEffect(() => {\r\n    let userArr = [];\r\n    firebase\r\n    .database()\r\n    .ref(\"users\")\r\n    .once(\"value\", (snapshot) => {\r\n      snapshot.forEach(el=>{\r\n        userArr.push({\r\n          uid:el.key,\r\n          auth:el.val().auth ? el.val().auth : \"\",\r\n          name:el.val().name,\r\n          part:el.val().part,\r\n          role:el.val().role\r\n        })\r\n      })\r\n      userArr.sort((a,b)=>{\r\n        return a.part < b.part ? -1 : 1 \r\n      })\r\n      setTotalUser(userArr);\r\n    });\r\n    firebase.database().ref(`research/${props.location.state.uid}`)\r\n    .once(\"value\", snapshot => {\r\n      let res = snapshot.val();\r\n      if(snapshot.val() && snapshot.val().image){\r\n        let uploadArr = [];\r\n        snapshot.val().image.map((el,idx)=>{\r\n          uploadArr.push({\r\n            uid:idx,\r\n            name:el.name,\r\n            status:'done',\r\n            url:el.url\r\n          })\r\n        })\r\n        res.upload = uploadArr\r\n      }      \r\n      setOnMember(res.member)\r\n      setTypeState(res.type)\r\n      setResearchViewInfo(res)\r\n    })\r\n\r\n    return () => {      \r\n    }\r\n  }, [])\r\n\r\n  const btnToList = useRef();\r\n\r\n  const uid = props.location.state.uid;\r\n\r\n  const disabledDate = (current) => {\r\n    return current && current < moment().subtract(1, 'days');\r\n  }\r\n\r\n  const [DateLimitState, setDateLimitState] = useState(false)\r\n  const dateLimit = () => {\r\n    setDateLimitState(!DateLimitState)\r\n  }  \r\n\r\n  let newUid = uuid();\r\n  const finishDataSave = (values) => {\r\n    \r\n    let uploadURL = values.upload ? values.upload : [];   \r\n    const getImgUrl = async () => {\r\n    values.upload && values.upload.map(el=>{\r\n    if(el.originFileObj){\r\n      let getImg = async () => {\r\n      let uploadTask = await firebase\r\n          .storage()\r\n          .ref(\"research\")\r\n          .child(`image/${uid}/${newUid}`)          \r\n          .put(el.originFileObj, el.type);\r\n            uploadTask.ref.getDownloadURL()\r\n            .then(url => {\r\n              uploadURL.push({                \r\n                name:el.originFileObj.name,\r\n                url:url\r\n              });\r\n              firebase.database().ref('research')\r\n              .child(uid)\r\n              .update({\r\n                image: uploadURL\r\n              });                       \r\n            });\r\n          }\r\n        getImg();\r\n      }else{\r\n        uploadURL = \"\"\r\n        firebase.database().ref('research')\r\n        .child(uid)\r\n        .update({\r\n          image: uploadURL\r\n        }); \r\n      }\r\n      })\r\n    }\r\n    getImgUrl(); \r\n      firebase.database().ref('research')\r\n      .child(uid)\r\n      .update({\r\n        title:values.title,\r\n        type:values.type,\r\n        option:values.option_list ? values.option_list : '',\r\n        member:values.member ? values.member : false,\r\n        member_check:values.member_check ? values.member_check : '',\r\n        etc:values.etc ? values.etc : '',\r\n        uid:uid,\r\n        alba:values.alba ? values.alba : false,\r\n        intern:values.intern ? values.intern : false,\r\n        secret:values.secret ? values.secret : false,\r\n        date:getFormatDate(new Date()).full_,\r\n        timestamp:new Date().getTime(),\r\n        limit_start:values.time_limit ? values.time_limit[0]._d.getTime() : 0,\r\n        limit_end:values.time_limit ? values.time_limit[1]._d.getTime() : 99999999999999,\r\n      });\r\n    }      \r\n\r\n \r\n  \r\n  const onFinish = async (values) => {\r\n    if(values.type != 2){\r\n      let listLength = values.option_list.length;\r\n      let count = 0;\r\n      const ref = firebase.storage().ref(`research/image/${uid}`);\r\n      ref.listAll()\r\n      .then(dir => {\r\n        const images = dir._delegate.items;\r\n        images.map(el=>{\r\n            let path = el._location.path_;\r\n            firebase.storage().ref(`${path}`).delete()\r\n            .then(()=>{\r\n            }).catch(error=>console.error(error))\r\n          })\r\n        })\r\n      let urlArr = [];\r\n      values.option_list && values.option_list.map(el=>{\r\n        el.option_photo = el.option_photo ? el.option_photo : \"\";\r\n        el.option_a = el.option_a ? el.option_a : \"\";\r\n        el.option_type = el.option_type ? el.option_type : \"\";\r\n        count++;    \r\n        const getOptionImgUrl = (photo) => {\r\n            if(!photo){\r\n              if(count == listLength){\r\n                finishDataSave(values);\r\n                btnToList.current && btnToList.current.click();\r\n              }\r\n            }else{\r\n            photo.map((list,idx)=>{\r\n              if(list.originFileObj){\r\n                let getImg = async () => {\r\n                let uploadTask = await firebase\r\n                .storage()\r\n                .ref(\"research\")\r\n                .child(`image/${uid}/${uuid()}`)          \r\n                .put(list.originFileObj, list.type);\r\n                  uploadTask.ref.getDownloadURL()\r\n                  .then(url => {\r\n                    urlArr.push({\r\n                      uid:idx,\r\n                      status:\"done\",\r\n                      name:list.originFileObj.name,\r\n                      url:url\r\n                    });\r\n                    firebase.database().ref('research')\r\n                    .child(`${uid}/option/${idx}`)\r\n                    .update({\r\n                      option_photo: urlArr\r\n                    });                \r\n                    el.option_photo = urlArr ? urlArr : '';                \r\n                    if(count == listLength){\r\n                      finishDataSave(values);\r\n                      btnToList.current && btnToList.current.click();\r\n                    }\r\n                  });\r\n                }\r\n                getImg();              \r\n              }else{\r\n                finishDataSave(values);\r\n                btnToList.current && btnToList.current.click();\r\n              }\r\n              })\r\n            }          \r\n          }\r\n        getOptionImgUrl(el.option_photo);\r\n        el.option_photo = el.option_photo ? el.option_photo : '';\r\n      })\r\n    }else{\r\n      finishDataSave(values);\r\n      btnToList.current && btnToList.current.click();\r\n    }\r\n      \r\n  };\r\n\r\n\r\n\r\n\r\n  const typeOptions = [\r\n    {label: '선다형', value: 1},\r\n    {label: '서술형', value: 2},\r\n    {label: '복합형', value: 3}\r\n  ]\r\n  const onChangeType = (e) => {\r\n    setTypeState(e.target.value)\r\n  }\r\n\r\n  const normFile = (e) => {\r\n    console.log(e)\r\n    if (Array.isArray(e)) {\r\n      return e;\r\n    }\r\n    return e && e.fileList;\r\n  };\r\n\r\n  const onSelectChange = (e) => {\r\n    console.log(e)\r\n  }\r\n\r\n\r\n\r\n  const onMemberChange = (e) => {\r\n    setOnMember(!onMember)\r\n  }\r\n\r\n\r\n  return (\r\n    <>     \r\n      {ResearchViewInfo &&\r\n      <Form name=\"dynamic_form_nest_item\" className=\"research-form\" onFinish={onFinish} autoComplete=\"off\"\r\n        initialValues={{\r\n          title:ResearchViewInfo.title,\r\n          type:ResearchViewInfo.type,\r\n          upload:ResearchViewInfo.upload,\r\n          alba:ResearchViewInfo.alba,\r\n          intern:ResearchViewInfo.intern,\r\n          secret:ResearchViewInfo.secret,\r\n          member:ResearchViewInfo.member,\r\n          member_check:ResearchViewInfo.member_check,\r\n          option_list:ResearchViewInfo.option,\r\n          etc:ResearchViewInfo.etc,\r\n        }}\r\n      >\r\n        <Form.Item\r\n          name=\"title\"\r\n          rules={[{ required: true, message: '제목을 입력해 주세요.'}]}\r\n        >\r\n          <Input placeholder=\"제목\" />\r\n        </Form.Item> \r\n        <Form.Item \r\n          name=\"type\"\r\n          label=\"유형 선택\"\r\n          rules={[{ required: true, message: '타입을 선택해 주세요.'}]}\r\n        >\r\n          <Radio.Group\r\n            options={typeOptions}\r\n            onChange={onChangeType}\r\n            value={TypeState}\r\n            optionType=\"button\"\r\n          />\r\n        </Form.Item>\r\n        {TypeState && TypeState == 1 &&\r\n          <Form.List name=\"option_list\">\r\n            {(fields, { add, remove }) => (\r\n              <>\r\n                {fields.map(({ key, name, fieldKey, ...restField }) => (\r\n                  <Space key={key} style={{ display: 'flex', marginBottom: 5 }} align=\"baseline\">\r\n                    <Form.Item\r\n                      {...restField}\r\n                      name={[name, 'option']}\r\n                      fieldKey={[fieldKey, 'option']}\r\n                      rules={[{ required: true, message: '항목을 입력해 주세요.' }]}\r\n                    >\r\n                      <Input placeholder=\"항목\" />\r\n                    </Form.Item>                  \r\n                    <MinusCircleOutlined onClick={() => remove(name)} />\r\n                  </Space>\r\n                ))}\r\n                <Form.Item>\r\n                  <Button type=\"dashed\" onClick={() => add()} block icon={<PlusOutlined />}>\r\n                    Add field\r\n                  </Button>\r\n                </Form.Item>\r\n              </>\r\n            )}\r\n          </Form.List>\r\n        }\r\n        {TypeState && TypeState == 3 &&\r\n          <Form.List name=\"option_list\">\r\n            {(fields, { add, remove }) => (\r\n              <>\r\n                {fields.map(({ key, name, fieldKey, ...restField }) => (\r\n                  <Space key={key} style={{ display: 'flex', marginBottom: 5 }} align=\"baseline\">\r\n                    <Form.Item\r\n                      {...restField}\r\n                      name={[name, 'option_q']}\r\n                      fieldKey={[fieldKey, 'option_q']}\r\n                      rules={[{ required: true, message: '질문을 입력해 주세요.' }]}\r\n                    >\r\n                      <Input placeholder=\"질문\" />\r\n                    </Form.Item>     \r\n                    <Form.Item \r\n                      label=\"유형선택\"\r\n                      {...restField}\r\n                      name={[name, 'option_type']}\r\n                      fieldKey={[fieldKey, 'option_type']}\r\n                    >\r\n                      <Select defaultValue=\"0\" onChange={onSelectChange}>\r\n                        <Select.Option value=\"0\">서술형</Select.Option>\r\n                        <Select.Option value=\"1\">체크형</Select.Option>\r\n                        <Select.Option value=\"2\">선택형</Select.Option>\r\n                      </Select>\r\n                    </Form.Item> \r\n                    <Form.Item\r\n                      {...restField}\r\n                      name={[name, 'option_a']}\r\n                      fieldKey={[fieldKey, 'option_a']}\r\n                    >\r\n                      <Input placeholder=\"항목이 있을때만 ,로 구분 하여 작성\" />\r\n                    </Form.Item> \r\n                    <Form.Item\r\n                      {...restField}\r\n                      name={[name, 'option_photo']}\r\n                      label=\"이미지 업로드\"\r\n                      fieldKey={[fieldKey, 'option_photo']}\r\n                      getValueFromEvent={normFile}                      \r\n                    >\r\n                      <Upload name=\"option_upload\" listType=\"picture\">\r\n                        <Button icon={<UploadOutlined />}>Click to upload</Button>\r\n                      </Upload>\r\n                    </Form.Item>\r\n                    <MinusCircleOutlined onClick={() => remove(name)} />\r\n                  </Space>\r\n                ))}\r\n                <Form.Item>\r\n                  <Button type=\"dashed\" onClick={() => add()} block icon={<PlusOutlined />}>\r\n                    Add field\r\n                  </Button>\r\n                </Form.Item>\r\n              </>\r\n            )}\r\n          </Form.List>\r\n        }        \r\n        <Form.Item\r\n          name=\"upload\"\r\n          label=\"이미지 업로드\"\r\n          valuePropName=\"fileList\"\r\n          getValueFromEvent={normFile}\r\n        >\r\n          <Upload name=\"logo\" listType=\"picture\">\r\n            <Button icon={<UploadOutlined />}>Click to upload</Button>\r\n          </Upload>\r\n        </Form.Item>\r\n        <div className=\"flex-box\">\r\n          <Form.Item\r\n            name=\"alba\"\r\n            valuePropName=\"checked\"\r\n            style={{marginRight:\"13px\"}}\r\n          >\r\n            <Checkbox>알바 제외</Checkbox>\r\n          </Form.Item> \r\n          <Form.Item\r\n            name=\"intern\"\r\n            valuePropName=\"checked\"\r\n            style={{marginRight:\"13px\"}}\r\n          >\r\n            <Checkbox>인턴 제외</Checkbox>\r\n          </Form.Item> \r\n          <Form.Item\r\n            name=\"secret\"\r\n            valuePropName=\"checked\"            \r\n            style={{marginRight:\"13px\"}}\r\n          >\r\n            <Checkbox>결과 비공개</Checkbox>\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"member\"\r\n            valuePropName=\"checked\"\r\n            onChange={onMemberChange}\r\n          >\r\n            <Checkbox>제외 선택</Checkbox>\r\n          </Form.Item> \r\n        </div>\r\n        {onMember &&\r\n          <>\r\n            <Form.Item name=\"member_check\">\r\n              <Checkbox.Group>\r\n                <Row>                \r\n                {TotalUser && TotalUser.map((el,idx)=>(\r\n                  <Col span={4}>\r\n                    <Checkbox key={idx} value={el.uid}>{el.name}({el.part})</Checkbox>\r\n                  </Col>\r\n                ))}\r\n                </Row>\r\n              </Checkbox.Group>\r\n            </Form.Item>\r\n          </>\r\n        }\r\n        <Form.Item\r\n          name=\"etc\"          \r\n          rules={[{ required: true}]}\r\n        >\r\n          <Input.TextArea placeholder=\"설명\" />\r\n        </Form.Item>  \r\n        <Form.Item\r\n          label=\"날짜설정\" style={{marginBottom:\"7px\"}}\r\n        >\r\n          <Switch onChange={dateLimit} />\r\n        </Form.Item>\r\n        {DateLimitState &&\r\n          <Form.Item\r\n            name=\"time_limit\"\r\n          >\r\n            <RangePicker  \r\n              showTime \r\n              disabledDate={disabledDate} \r\n            />\r\n          </Form.Item>\r\n        }\r\n\r\n        <div className=\"flex-box j-center\" style={{marginTop:\"15px\"}}>\r\n          <Button type=\"primary\" htmlType=\"submit\" style={{width:\"100px\"}}>\r\n            수정하기\r\n          </Button>\r\n          <Button style={{marginLeft:\"5px\"}}>\r\n            <Link ref={btnToList} to=\"/research\">목록으로</Link>\r\n          </Button>\r\n        </div>    \r\n      </Form>\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ResearchModify\r\n","D:\\프로젝트\\sy-cafe-order\\src\\component\\Admin\\AdminOrderList.js",["473","474","475","476","477"],"import React, { useState, useEffect } from \"react\";\r\nimport firebase from \"../../firebase\";\r\nimport { Radio, Button, DatePicker, message } from \"antd\";\r\nimport * as antIcon from \"react-icons/ai\";\r\nimport { commaNumber, getFormatDate } from \"../CommonFunc\";\r\nimport { CSVLink } from \"react-csv\";\r\nimport moment from \"moment\";\r\nimport LastOrderTime from \"./option/LastOrderTime\";\r\n\r\nfunction AdminOrderList() {\r\n  const curDate = getFormatDate(new Date());\r\n\r\n  const [OrderList, setOrderList] = useState([]);\r\n  const [SelectDay, setSelectDay] = useState();\r\n  const [LastDay, setLastDay] = useState();\r\n  const [PrevDay, setPrevDay] = useState();\r\n  const [SumAmount, setSumAmount] = useState();\r\n  const [SumPrice, setSumPrice] = useState();\r\n  const [Add1Count, setAdd1Count] = useState();\r\n  const [Add2Count, setAdd2Count] = useState();\r\n  const [SumAddAmount, setSumAddAmount] = useState();\r\n\r\n  const [SearchDate, setSearchDate] = useState(curDate);\r\n  const [Render, setRender] = useState(true);\r\n\r\n  const [excelData, setExcelData] = useState();\r\n  const excelHeaders = [\r\n    { label: \"주문자\", key: \"order_name\" },\r\n    { label: \"상품명\", key: \"prod_name\" },\r\n    { label: \"수량\", key: \"amount\" },\r\n    { label: \"추가\", key: \"add\" },\r\n    { label: \"추가2\", key: \"add2\" },\r\n    { label: \"코멘트\", key: \"order_etc\" },\r\n    { label: \"주문시간\", key: \"order_time\" },\r\n    { label: \"가격\", key: \"price\" },\r\n  ];\r\n\r\n  const [lastOrderTime, setLastOrderTime] = useState();\r\n  useEffect(() => {\r\n    firebase\r\n      .database()\r\n      .ref(\"last_order_time\")\r\n      .on(\"value\", (data) => {\r\n        setLastOrderTime(data.val());\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    let limitDateStart =\r\n      new Date(\r\n        SearchDate.year,\r\n        SearchDate.month - 1,\r\n        SearchDate.day,\r\n        lastOrderTime?.hour,\r\n        0\r\n      ).getTime() - 86400000;\r\n    let limitDateEnd = new Date(\r\n      SearchDate.year,\r\n      SearchDate.month - 1,\r\n      SearchDate.day,\r\n      lastOrderTime?.hour,\r\n      0\r\n    ).getTime();\r\n    if ((mounted, lastOrderTime)) {\r\n      firebase\r\n        .database()\r\n        .ref(\"order\")\r\n        .orderByChild(\"timestamp\")\r\n        .startAt(limitDateStart)\r\n        .endAt(limitDateEnd)\r\n        .on(\"value\", (snapshot) => {\r\n          let array = [];\r\n          snapshot.forEach(function (item) {\r\n            array.push({\r\n              ...item.val(),\r\n              key: item.key,\r\n            });\r\n          });\r\n\r\n          // eslint-disable-next-line array-callback-return\r\n          array.sort((a, b) => {\r\n            if (a.timestamp > b.timestamp) {\r\n              return -1;\r\n            }\r\n            if (a.timestamp < b.timestamp) {\r\n              return 1;\r\n            }\r\n          });\r\n          array = array.filter((el) => {\r\n            return el.order_state === 2;\r\n          });\r\n\r\n          array.map((el) => {\r\n            if (el.hot === \"hot\") el.prod_name = `따뜻한 ${el.prod_name}`;\r\n            if (el.hot === \"ice\") el.prod_name = `차가운 ${el.prod_name}`;\r\n            if (el.prod_option)\r\n              el.prod_name = el.prod_name + \"-\" + el.prod_option;\r\n          });\r\n          const day = [\"월요일\", \"화요일\", \"수요일\", \"목요일\", \"금요일\"];\r\n          setLastDay(array[0].order_time.split(\"|\")[1]);\r\n          let prevDayIndex = day.indexOf(LastDay) - 1;\r\n          if (prevDayIndex < 0) {\r\n            prevDayIndex = 4;\r\n          }\r\n          setPrevDay(day[prevDayIndex]);\r\n          if (SelectDay) {\r\n            array = array.filter((el) => {\r\n              return el.order_time.includes(SelectDay);\r\n            });\r\n            let sumA = 0;\r\n            let sumP = 0;\r\n            let add1C = 0;\r\n            let add2C = 0;\r\n            array.map((el) => {\r\n              sumA += parseInt(el.amount);\r\n              if (el.add && el.add.includes(\"버블\")) {\r\n                el.price -= 500;\r\n                add1C += 1;\r\n              }\r\n              if (el.add2 && el.add2.includes(\"샷1\")) {\r\n                el.price -= 500;\r\n                add2C += 1;\r\n              }\r\n              if (el.add2 && el.add2.includes(\"샷2\")) {\r\n                el.price -= 1000;\r\n                add2C += 2;\r\n              }\r\n            });\r\n            setSumAmount(sumA);\r\n            setAdd1Count(add1C);\r\n            setAdd2Count(add2C);\r\n            setSumAddAmount(add1C + add2C);\r\n            array = array.reduce((a, c) => {\r\n              let x = a.find(\r\n                (e) => e.prod_name === c.prod_name && e.hot === c.hot\r\n              );\r\n              if (!x) a.push(Object.assign({}, c));\r\n              else {\r\n                x.og_price += c.og_price;\r\n                x.amount += c.amount;\r\n              }\r\n              return a;\r\n            }, []);\r\n            array.map((el) => {\r\n              sumP += el.price * el.amount;\r\n              el.price = el.price * el.amount;\r\n            });\r\n            setSumPrice(sumP);\r\n\r\n            array = array.sort((a, b) => {\r\n              if (a.category > b.category) {\r\n                return -1;\r\n              }\r\n              if (a.category < b.category) {\r\n                return 1;\r\n              }\r\n            });\r\n          }\r\n          setExcelData(array);\r\n          setOrderList(array);\r\n        });\r\n    }\r\n    return function cleanup() {\r\n      firebase.database().ref(\"order\").off();\r\n      mounted = false;\r\n    };\r\n  }, [SearchDate, lastOrderTime]);\r\n\r\n  const onSelectDay = (e) => {\r\n    if (e.target.value === \"1\") {\r\n      setSelectDay(\"\");\r\n    }\r\n    if (e.target.value === \"2\") {\r\n      setSelectDay(LastDay);\r\n    }\r\n    if (e.target.value === \"3\") {\r\n      setSelectDay(PrevDay);\r\n    }\r\n  };\r\n\r\n  const onSelectDate = (date, dateString) => {\r\n    setSearchDate(getFormatDate(date._d));\r\n    setRender(!Render);\r\n  };\r\n\r\n  const disabledDate = (current) => {\r\n    return current < moment().subtract(30, \"days\") || current > moment();\r\n  };\r\n\r\n  const kakaoSend = (key) => {\r\n    let time = getFormatDate(new Date());\r\n    time = time.full + time.hour + time.min + time.sec;\r\n    let url =\r\n      \"https://metree.co.kr/_sys/_xml/order_kakao.php?order_tel=\" +\r\n      key.order_phone +\r\n      \"&goods_name=\" +\r\n      key.prod_name +\r\n      \"&order_time=\" +\r\n      time;\r\n    //window.open(url,'kakao',\"height=1,width=1\");\r\n\r\n    fetch(url, {\r\n      mode: \"no-cors\",\r\n    })\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(response.statusText);\r\n        }\r\n        message.success(\"카톡알림이 발송되었습니다.\");\r\n        return response;\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n\r\n    return;\r\n  };\r\n  return (\r\n    <>\r\n      <LastOrderTime />\r\n      <h3 className=\"title\">완료내역</h3>\r\n\r\n      <Radio.Group onChange={onSelectDay} defaultValue=\"1\" buttonStyle=\"solid\">\r\n        <Radio.Button value=\"1\">전체</Radio.Button>\r\n        <Radio.Button value=\"2\">수량합계</Radio.Button>\r\n        {/* <Radio.Button value=\"3\">어제</Radio.Button> */}\r\n      </Radio.Group>\r\n      {/* <span style={{fontSize:\"13px\",marginLeft:\"5px\"}}>(영업일 기준)</span> */}\r\n\r\n      <DatePicker\r\n        format=\"YYYY-MM-DD\"\r\n        defaultValue={moment()}\r\n        style={{ marginLeft: \"10px\" }}\r\n        disabledDate={disabledDate}\r\n        onChange={onSelectDate}\r\n      />\r\n      {excelData && (\r\n        <Button style={{ marginLeft: \"10px\" }}>\r\n          <CSVLink\r\n            headers={excelHeaders}\r\n            data={excelData}\r\n            filename={`metree-cafe${curDate.full}.csv`}\r\n            target=\"_blank\"\r\n          >\r\n            <antIcon.AiOutlineFileExcel\r\n              style={{\r\n                position: \"relative\",\r\n                top: \"3px\",\r\n                fontSize: \"17px\",\r\n                marginRight: \"3px\",\r\n              }}\r\n            />\r\n            엑셀 다운로드\r\n          </CSVLink>\r\n        </Button>\r\n      )}\r\n      {!SelectDay && (\r\n        <table className=\"fl-table\" style={{ marginTop: \"12px\" }}>\r\n          <thead>\r\n            <tr>\r\n              <th scope=\"col\">알림재발송</th>\r\n              <th scope=\"col\">주문자</th>\r\n              <th scope=\"col\">상품명</th>\r\n              <th scope=\"col\">수량</th>\r\n              <th scope=\"col\" colSpan=\"2\">\r\n                추가\r\n              </th>\r\n              <th scope=\"col\">코멘트</th>\r\n              <th scope=\"col\">주문시간</th>\r\n              <th scope=\"col\">가격</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {OrderList.map((list, index) => (\r\n              <tr key={index}>\r\n                <td>\r\n                  <Button\r\n                    onClick={() => {\r\n                      kakaoSend(list);\r\n                    }}\r\n                  >\r\n                    <antIcon.AiOutlineAlert\r\n                      style={{ marginTop: \"2px\", fontSize: \"17px\" }}\r\n                    />\r\n                  </Button>\r\n                </td>\r\n                <td>{list.order_name}</td>\r\n                <td>{list.prod_name}</td>\r\n                <td>{list.amount}</td>\r\n                <td>{list.add}</td>\r\n                <td>{list.add2}</td>\r\n                <td>{list.order_etc}</td>\r\n                <td>{list.order_time}</td>\r\n                <td>{list.price}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      )}\r\n      {SelectDay && (\r\n        <>\r\n          <div style={{ marginTop: \"12px\" }}>\r\n            {OrderList[0] && <span>{OrderList[0].order_time}</span>}\r\n          </div>\r\n          <div style={{ display: \"flex\" }}>\r\n            <table\r\n              className=\"fl-table\"\r\n              style={{ marginTop: \"12px\", width: \"48%\" }}\r\n            >\r\n              <thead>\r\n                <tr>\r\n                  <th scope=\"col\">상품명</th>\r\n                  <th scope=\"col\">수량</th>\r\n                  <th scope=\"col\">가격</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {OrderList &&\r\n                  OrderList.map((list, index) => (\r\n                    <tr key={index}>\r\n                      <td>\r\n                        {list.hot === \"ice\" && \"차가운 \"}\r\n                        {list.prod_name}\r\n                      </td>\r\n                      <td>{list.amount}</td>\r\n                      <td>{list.price}</td>\r\n                    </tr>\r\n                  ))}\r\n                <tr>\r\n                  <td>합계</td>\r\n                  <td>{SumAmount}</td>\r\n                  <td>{commaNumber(parseInt(SumPrice))}</td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n            <table\r\n              className=\"fl-table\"\r\n              style={{\r\n                marginTop: \"12px\",\r\n                marginLeft: \"2%\",\r\n                width: \"49%\",\r\n                height: \"100px\",\r\n              }}\r\n            >\r\n              <thead>\r\n                <tr>\r\n                  <th scope=\"col\">상품명</th>\r\n                  <th scope=\"col\">수량</th>\r\n                  <th scope=\"col\">가격</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr>\r\n                  <td>버블추가</td>\r\n                  <td>{Add1Count}</td>\r\n                  <td></td>\r\n                </tr>\r\n                <tr>\r\n                  <td>샷추가</td>\r\n                  <td>{Add2Count}</td>\r\n                  <td></td>\r\n                </tr>\r\n                <tr>\r\n                  <td>합계</td>\r\n                  <td>{SumAddAmount}</td>\r\n                  <td>{commaNumber(parseInt(SumAddAmount * 500))}</td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default AdminOrderList;\r\n","D:\\프로젝트\\sy-cafe-order\\src\\component\\welfare\\Styler.js",["478","479","480","481","482","483","484","485","486","487","488","489","490"],"import React, { useEffect, useState } from \"react\";\r\nimport firebase from \"../../firebase\";\r\nimport { useSelector } from \"react-redux\";\r\nimport {\r\n  Popover,\r\n  Popconfirm,\r\n  message,\r\n  Button,\r\n  DatePicker,\r\n  Statistic,\r\n} from \"antd\";\r\nimport * as antIcon from \"react-icons/ai\";\r\nimport * as imIcon from \"react-icons/im\";\r\nimport * as riIcon from \"react-icons/ri\";\r\nimport { getFormatDate } from \"../CommonFunc\";\r\nimport moment from \"moment\";\r\nimport { constant } from \"lodash\";\r\nimport axios from \"axios\";\r\nconst { Countdown } = Statistic;\r\n\r\nfunction Styler() {\r\n  const userInfo = useSelector((state) => state.user.currentUser);\r\n  const welDb = firebase.database();\r\n  const [CurDate, setCurDate] = useState(getFormatDate(new Date()));\r\n  const [TimeData, setTimeData] = useState();\r\n\r\n  const timeTable = (time, styler, start1, start2, end1, end2) => {\r\n    const first = new Date(\r\n      SearchDate.year,\r\n      SearchDate.og_month,\r\n      SearchDate.og_day,\r\n      start1,\r\n      start2\r\n    );\r\n    const last = new Date(\r\n      SearchDate.year,\r\n      SearchDate.og_month,\r\n      SearchDate.og_day,\r\n      end1,\r\n      end2\r\n    );\r\n    let timeArr = [];\r\n    let copy = timeArr.concat();\r\n    let n = 0;\r\n    let stylerArr = [];\r\n    for (let i = 1; i <= styler; i++) {\r\n      stylerArr.push({\r\n        room_num: i,\r\n      });\r\n    }\r\n    while (first.getTime() < last.getTime()) {\r\n      let obj = {\r\n        timeNum: n + 1,\r\n        time: getFormatDate(first),\r\n        room: stylerArr,\r\n      };\r\n      first.setMinutes(first.getMinutes() + time);\r\n      timeArr.push(obj);\r\n      n++;\r\n    }\r\n    return timeArr;\r\n  };\r\n\r\n  const [Rerender, setRerender] = useState(false);\r\n  const onRerender = () => {\r\n    setRerender(!Rerender);\r\n  };\r\n  const [ListData, setListData] = useState();\r\n\r\n  const getListOff = () => {\r\n    welDb.ref(`styler/list/${CurDate.full}`).off();\r\n  };\r\n\r\n  const [DefaultNotice, setDefaultNotice] = useState();\r\n  useEffect(() => {\r\n    welDb.ref(\"styler/notice\").once(\"value\", (data) => {\r\n      setDefaultNotice(data.val());\r\n    });\r\n    return () => {};\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setInterval(() => {\r\n      setCurDate(getFormatDate(new Date()));\r\n    }, 2000);\r\n    return () => {};\r\n  }, []);\r\n\r\n  const [SearchDate, setSearchDate] = useState(CurDate);\r\n\r\n  const [MyReservation, setMyReservation] = useState();\r\n  useEffect(() => {\r\n    //시간설정\r\n    welDb.ref(\"styler/time_set\").once(\"value\", (data) => {\r\n      const startTime = data.val() ? data.val().start : \"\";\r\n      const endTime = data.val() ? data.val().end : \"\";\r\n      const interval = data.val() ? data.val().interval : \"\";\r\n      // 사용자 목록\r\n      welDb.ref(`styler/user/${userInfo.uid}/list`).on(\"value\", (data) => {\r\n        let userArr = [];\r\n        data.forEach((el) => {\r\n          for (let i in el.val()) {\r\n            if (el.val()[i].reserve_time > Date.now()) {\r\n              console.log(el.val()[i]);\r\n              let room = el.val()[i].room_num <= 3 ? 1 : 2;\r\n              let obj = {\r\n                date: getFormatDate(new Date(el.val()[i].reserve_time)),\r\n                timestamp: el.val()[i].timestamp,\r\n                timeNum: el.val()[i].timeNum,\r\n                roomNum: el.val()[i].room,\r\n                room: room,\r\n              };\r\n              userArr.push(obj);\r\n            }\r\n          }\r\n        });\r\n        setMyReservation(userArr);\r\n      });\r\n\r\n      // 예약목록\r\n      let arr = [];\r\n      welDb.ref(`styler/list/${SearchDate.full}`).on(\"value\", (data) => {\r\n        let timeArr = timeTable(\r\n          interval,\r\n          6,\r\n          startTime[0],\r\n          startTime[1],\r\n          endTime[0],\r\n          endTime[1]\r\n        ); //시간표 생성\r\n        let arr2 = JSON.parse(JSON.stringify(timeArr));\r\n        data.forEach((el) => {\r\n          arr.push(el.val());\r\n        });\r\n        timeArr.map((time, idx) => {\r\n          arr.map((user) => {\r\n            if (user.timeNum === time.timeNum) {\r\n              for (let key in user) {\r\n                if (key != \"timeNum\" && user[key]) {\r\n                  arr2[idx][key] = user[key];\r\n                  arr2[idx].room[user[key].room - 1] = {\r\n                    ...arr2[idx].room[user[key].room - 1],\r\n                    num: \"room\" + user[key].room,\r\n                    check: true,\r\n                  };\r\n                }\r\n              }\r\n            }\r\n          });\r\n          arr2[idx].reservCount = Object.keys(arr2[idx]).length - 3;\r\n        });\r\n        setListData(arr2);\r\n      });\r\n    });\r\n\r\n    return () => {\r\n      welDb.ref(`styler/list/${SearchDate.full}`).off();\r\n    };\r\n  }, [Rerender]);\r\n\r\n  const reservation = (num, time, styler) => {\r\n    let room = \"room\" + styler;\r\n    const user = {\r\n      name: userInfo.displayName,\r\n      part: userInfo.photoURL,\r\n      user_uid: userInfo.uid,\r\n      room: styler,\r\n    };\r\n\r\n    welDb\r\n      .ref(`styler/user/${userInfo.uid}/list/${SearchDate.full}`)\r\n      .get()\r\n      .then((data) => {\r\n        if (data.exists()) {\r\n          message.error(\"예약은 하루에 한건만 가능합니다.\");\r\n        } else {\r\n          welDb\r\n            .ref(`styler/list/${SearchDate.full}/${num}`)\r\n            .get()\r\n            .then((data) => {\r\n              let able = true;\r\n              for (let i = 1; i < styler; i++) {\r\n                let num = \"room\" + i;\r\n                console.log(data.val());\r\n                if (!data.val() || (data.val() && !data.val()[num])) {\r\n                  message.error(\"예약은 순서대로 해주세요.\");\r\n                  able = false;\r\n                  return;\r\n                }\r\n              }\r\n              if (able) {\r\n                // 예약 목록\r\n                welDb.ref(`styler/list/${SearchDate.full}/${num}`).update({\r\n                  [room]: user,\r\n                  timeNum: num,\r\n                });\r\n\r\n                // 사용자 예약목록\r\n                welDb\r\n                  .ref(\r\n                    `styler/user/${userInfo.uid}/list/${SearchDate.full}/${num}`\r\n                  )\r\n                  .update({\r\n                    reserve_time: time.timestamp,\r\n                    timestamp: new Date().getTime(),\r\n                    timeNum: num,\r\n                    room,\r\n                    room_num: styler,\r\n                  });\r\n\r\n                // 카운팅\r\n                welDb\r\n                  .ref(`styler/user/${userInfo.uid}/count`)\r\n                  .transaction((pre) => {\r\n                    pre++;\r\n                    return pre;\r\n                  });\r\n                welDb.ref(`styler/count`).transaction((pre) => {\r\n                  pre++;\r\n                  return pre;\r\n                });\r\n                message.success(\"예약 되었습니다.\");\r\n              }\r\n            });\r\n        }\r\n      });\r\n  };\r\n\r\n  const onCancel = (date, num, room) => {\r\n    const dateTime = date.full + String(date.hour) + String(date.min);\r\n    welDb\r\n      .ref(`styler/list/${date.full}/${num}/${room}`)\r\n      .remove()\r\n      .then(() => {});\r\n    welDb.ref(`styler/user/${userInfo.uid}/list/${date.full}/${num}`).remove();\r\n    welDb.ref(`styler/user/${userInfo.uid}/count`).transaction((pre) => {\r\n      pre--;\r\n      return pre;\r\n    });\r\n    welDb.ref(`styler/count`).transaction((pre) => {\r\n      pre--;\r\n      return pre;\r\n    });\r\n\r\n    message.success(\"취소 되었습니다.\");\r\n\r\n    setRerender(!Rerender);\r\n  };\r\n\r\n  // 날짜선택\r\n  const onSelectDate = (date, dateString) => {\r\n    if (date) {\r\n      setSearchDate(getFormatDate(date._d));\r\n      setRerender(!Rerender);\r\n    }\r\n  };\r\n  const disabledDate = (current) => {\r\n    return current && current >= moment().endOf(\"day\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {DefaultNotice && (\r\n        <div className=\"item-info-box\" style={{ marginBottom: \"20px\" }}>\r\n          <pre>{DefaultNotice}</pre>\r\n        </div>\r\n      )}\r\n      <div className=\"flex-box a-center\" style={{ marginBottom: \"20px\" }}>\r\n        <h3 className=\"title\" style={{ marginRight: \"10px\" }}>\r\n          날짜선택\r\n        </h3>\r\n        <DatePicker\r\n          format=\"YYYY-MM-DD\"\r\n          defaultValue={moment()}\r\n          disabledDate={disabledDate}\r\n          style={{ marginBottom: \"10px\" }}\r\n          onChange={onSelectDate}\r\n        />\r\n      </div>\r\n      {MyReservation && MyReservation.length > 0 && (\r\n        <>\r\n          <h3 className=\"title\">예정중인 내 예약목록</h3>\r\n          <ul className=\"my-reserv-list styler\">\r\n            {MyReservation.map((el, idx) => (\r\n              <li key={idx}>\r\n                <div className=\"box\">\r\n                  <div className=\"r-day\">\r\n                    <span className=\"room\">{el.room}</span>\r\n                    <span className=\"date fon-barlow\">\r\n                      {el.date.full === CurDate.full\r\n                        ? \"오늘 \"\r\n                        : `${el.date.full_} `}\r\n                      {el.date.hour}:{el.date.min}\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"right\">\r\n                    <div className=\"count-box\">\r\n                      <antIcon.AiOutlineHourglass className=\"ic-time\" />\r\n                      <Countdown\r\n                        className=\"countdown\"\r\n                        value={el.date.timestamp}\r\n                        format=\"H시간 m분 s초\"\r\n                        onFinish={onRerender}\r\n                      />\r\n                    </div>\r\n                    <Popconfirm\r\n                      title=\"예약 취소 하시겠습니까?\"\r\n                      onConfirm={() => {\r\n                        onCancel(el.date, el.timeNum, el.roomNum);\r\n                      }}\r\n                    >\r\n                      <Button className=\"btn-del\">\r\n                        <antIcon.AiOutlineRollback />\r\n                        <span className=\"no-mo\">예약취소</span>\r\n                      </Button>\r\n                    </Popconfirm>\r\n                  </div>\r\n                </div>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </>\r\n      )}\r\n      {ListData && (\r\n        <>\r\n          <h3 className=\"title\" style={{ marginTop: \"25px\" }}>\r\n            예약하기\r\n          </h3>\r\n          <ul className=\"flex-box reserv-info\">\r\n            <li>\r\n              <antIcon.AiOutlineBell className=\"info-ic-reserv\" /> 예약중\r\n            </li>\r\n            <li>\r\n              <antIcon.AiOutlineBell className=\"info-ic-my\" /> 내예약\r\n            </li>\r\n          </ul>\r\n          <ul className=\"reserv-time-list styler\">\r\n            {ListData.map((el, idx) => (\r\n              <li\r\n                key={idx}\r\n                className={\r\n                  el.time.timestamp > CurDate.timestamp &&\r\n                  el.user &&\r\n                  el.user.user_uid === userInfo.uid\r\n                    ? \"my-reserve\"\r\n                    : el.time.timestamp > CurDate.timestamp && el.user\r\n                    ? \"reserv\"\r\n                    : el.time.timestamp < CurDate.timestamp\r\n                    ? \"timeover\"\r\n                    : \"\"\r\n                }\r\n              >\r\n                <div className={el.reservCount === 6 ? \"box full\" : \"box\"}>\r\n                  <span className=\"time fon-barlow\">\r\n                    {el.time.hour}:{el.time.min}\r\n                  </span>\r\n                  <div className=\"btn-box\">\r\n                    {el.room.map((list) => (\r\n                      <>\r\n                        <Popconfirm\r\n                          title={\r\n                            list.room_num <= 3\r\n                              ? `1번기기에 예약하시겠습니까?`\r\n                              : `2번기기에 예약하시겠습니까?`\r\n                          }\r\n                          disabled={\r\n                            el.time.timestamp < CurDate.timestamp || list.check\r\n                              ? true\r\n                              : false\r\n                          }\r\n                          onConfirm={() => {\r\n                            reservation(el.timeNum, el.time, list.room_num);\r\n                          }}\r\n                        >\r\n                          <Button\r\n                            className={\r\n                              el[list.num] &&\r\n                              el[list.num].user_uid === userInfo.uid\r\n                                ? \"my-reserv\"\r\n                                : list.check\r\n                                ? \"btn-reserv\"\r\n                                : \"\"\r\n                            }\r\n                          >\r\n                            {list.check ? (\r\n                              <Popover\r\n                                content={`${el[list.num].name}(${\r\n                                  el[list.num].part\r\n                                })`}\r\n                                trigger=\"click\"\r\n                                title=\"예약\"\r\n                              >\r\n                                <antIcon.AiOutlineBell\r\n                                  style={{ fontSize: \"16px\" }}\r\n                                />\r\n                              </Popover>\r\n                            ) : (\r\n                              <>\r\n                                {list.room_num === 1 ? (\r\n                                  <>\r\n                                    <riIcon.RiNumber1 />\r\n                                  </>\r\n                                ) : list.room_num === 2 ? (\r\n                                  <>\r\n                                    <riIcon.RiNumber1 />\r\n                                  </>\r\n                                ) : list.room_num === 3 ? (\r\n                                  <>\r\n                                    <riIcon.RiNumber1 />\r\n                                  </>\r\n                                ) : list.room_num === 4 ? (\r\n                                  <>\r\n                                    <riIcon.RiNumber2 />\r\n                                  </>\r\n                                ) : list.room_num === 5 ? (\r\n                                  <>\r\n                                    <riIcon.RiNumber2 />\r\n                                  </>\r\n                                ) : list.room_num === 6 ? (\r\n                                  <>\r\n                                    <riIcon.RiNumber2 />\r\n                                  </>\r\n                                ) : (\r\n                                  \"\"\r\n                                )}\r\n                              </>\r\n                            )}\r\n                          </Button>\r\n                        </Popconfirm>\r\n                      </>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Styler;\r\n","D:\\프로젝트\\sy-cafe-order\\src\\component\\inven\\Inventory.js",["491","492","493","494","495","496"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport firebase from \"../../firebase\";\r\nimport { getFormatDate } from \"../CommonFunc\";\r\nimport {\r\n  Button,\r\n  Radio,\r\n  Popconfirm,\r\n  message,\r\n  InputNumber,\r\n  Modal,\r\n  Form,\r\n  Input,\r\n  DatePicker,\r\n  Table,\r\n} from \"antd\";\r\nimport * as bsIcon from \"react-icons/bs\";\r\nimport * as antIcon from \"react-icons/ai\";\r\nimport * as goIcon from \"react-icons/go\";\r\nimport { useSelector } from \"react-redux\";\r\nimport uuid from \"react-uuid\";\r\nimport moment from \"moment\";\r\nimport useInvenKakaoTel from \"./useInvenKakaoTel\";\r\nconst { Search } = Input;\r\nconst _ = require(\"lodash\");\r\n\r\nfunction Inventory() {\r\n  const nowDate = getFormatDate(new Date());\r\n  const curDate = nowDate.full;\r\n  const curMonth = curDate.substr(0, curDate.length - 2);\r\n  const db = firebase.database();\r\n  const userInfo = useSelector((state) => state.user.currentUser);\r\n  const [InvenData, setInvenData] = useState();\r\n  const [ProdItemCopy, setProdItemCopy] = useState();\r\n  const formRef = useRef();\r\n\r\n  const [SearchMonth, setSearchMonth] = useState(curMonth);\r\n  const onSearchMonth = (date, dateString) => {\r\n    let regex = /-/g;\r\n    let month = dateString.replace(regex, \"\");\r\n    setSearchMonth(month);\r\n  };\r\n\r\n  // 알림톡 수신번호\r\n  const { alertTelArr } = useInvenKakaoTel();\r\n\r\n  //키워드 검색\r\n  const [searchInput, setSearchInput] = useState(\"\");\r\n  const [SearchAgain, setSearchAgain] = useState(false);\r\n  const onSearchChange = (e) => {\r\n    setSearchInput(e.target.value);\r\n  };\r\n  const onSearch = () => {\r\n    setSearchAgain(!SearchAgain);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (ProdItemCopy) {\r\n      let regexstring = searchInput;\r\n      let regexp = new RegExp(regexstring, \"gi\");\r\n      let array = _.cloneDeep(ProdItemCopy);\r\n      if (searchInput != \"\") {\r\n        array = array.filter((el) => {\r\n          return el.name.match(regexp);\r\n        });\r\n      }\r\n      setInvenData(array);\r\n    }\r\n  }, [SearchAgain]);\r\n\r\n  const columns = [\r\n    {\r\n      title: \"등록일자\",\r\n      dataIndex: [\"date\", \"date_\"],\r\n      key: \"date\",\r\n      align: \"center\",\r\n      width: 100,\r\n      sorter: {\r\n        compare: (a, b) => b.date.timestamp - a.date.timestamp,\r\n        multiple: 1,\r\n      },\r\n      defaultSortOrder: \"ascend\",\r\n      render: (text, row) =>\r\n        `${row[\"date\"].full_} ${row[\"date\"].hour}:${row[\"date\"].min}`,\r\n    },\r\n    {\r\n      title: \"입출고일자\",\r\n      dataIndex: [\"real_date\"],\r\n      key: \"real_date\",\r\n      align: \"center\",\r\n      width: 100,\r\n      sorter: {\r\n        compare: (a, b) => b.real_date.timestamp - a.real_date.timestamp,\r\n        multiple: 2,\r\n      },\r\n      defaultSortOrder: \"ascend\",\r\n      render: (text, row) => `${row[\"real_date\"].full_}`,\r\n    },\r\n    {\r\n      title: \"입출고\",\r\n      dataIndex: \"type\",\r\n      key: \"type\",\r\n      align: \"center\",\r\n      width: 100,\r\n      render: (data) => data,\r\n    },\r\n    {\r\n      title: \"사용자\",\r\n      dataIndex: [\"name\", \"part\"],\r\n      key: \"name\",\r\n      align: \"center\",\r\n      width: 100,\r\n      render: (text, row) => `${row[\"name\"]}`,\r\n    },\r\n    {\r\n      title: \"품명\",\r\n      dataIndex: \"prod\",\r\n      key: \"prod\",\r\n      align: \"center\",\r\n      width: 120,\r\n      render: (data) => data,\r\n    },\r\n    {\r\n      title: \"수량\",\r\n      dataIndex: \"val\",\r\n      key: \"val\",\r\n      align: \"center\",\r\n      width: 40,\r\n      render: (data) => data,\r\n    },\r\n    {\r\n      title: \"비고\",\r\n      dataIndex: \"comment\",\r\n      key: \"comment\",\r\n      align: \"center\",\r\n      width: 200,\r\n      render: (data) => data,\r\n    },\r\n    {\r\n      title: \"출납 후 재고\",\r\n      dataIndex: \"ea\",\r\n      key: \"ea\",\r\n      align: \"center\",\r\n      width: 80,\r\n      render: (text, row) => (\r\n        <>\r\n          <span>{row[\"ea\"]}</span>\r\n        </>\r\n      ),\r\n    },\r\n    {\r\n      title: \"삭제\",\r\n      dataIndex: [\"ea\", \"val\", \"real_date\", \"prod_uid\", \"uid\", \"key\"],\r\n      key: \"ea\",\r\n      align: \"center\",\r\n      width: 80,\r\n      render: (text, row) => (\r\n        <>\r\n          <Popconfirm\r\n            title={`삭제하시겠습니까?`}\r\n            onConfirm={() =>\r\n              onLogDelete(\r\n                row[\"ea\"],\r\n                row[\"val\"],\r\n                row[\"real_date\"],\r\n                row[\"prod_uid\"],\r\n                row[\"uid\"],\r\n                row[\"key\"]\r\n              )\r\n            }\r\n            onCancel={cancel}\r\n            okText=\"네\"\r\n            cancelText=\"아니오\"\r\n          >\r\n            <Button>\r\n              <antIcon.AiOutlineDelete style={{ marginTop: \"4px\" }} />\r\n            </Button>\r\n          </Popconfirm>\r\n        </>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const [ProdItem, setProdItem] = useState();\r\n  const [Category, setCategory] = useState();\r\n  const [SortCate, setSortCate] = useState(\"all\");\r\n\r\n  const itemSort = (e) => {\r\n    setSortCate(e.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    db.ref(\"inventory/category\").once(\"value\", (snapshot) => {\r\n      if (snapshot.val()) {\r\n        setCategory(snapshot.val().split(\",\"));\r\n      }\r\n    });\r\n\r\n    db.ref(\"inventory/list\").on(\"value\", (snapshot) => {\r\n      let arr = [];\r\n      snapshot.forEach((el) => {\r\n        arr.push(el.val());\r\n      });\r\n      if (SortCate != \"all\") {\r\n        arr = arr.filter((el) => {\r\n          return el.category === SortCate;\r\n        });\r\n      }\r\n      arr.sort((a, b) => {\r\n        return a.name < b.name ? -1 : a.name > b.name ? 1 : 0;\r\n      });\r\n      setInvenData(arr);\r\n      setProdItemCopy(arr);\r\n    });\r\n\r\n    db.ref(`inventory/user/${SearchMonth}/${userInfo.uid}`).on(\r\n      \"value\",\r\n      (snapshot) => {\r\n        let arr = [];\r\n        snapshot.forEach((item) => {\r\n          let obj = item.val();\r\n          arr.push(obj);\r\n        });\r\n        setProdItem(arr);\r\n      }\r\n    );\r\n    return () => {\r\n      db.ref(\"inventory/list\").off();\r\n    };\r\n  }, [SortCate, SearchMonth]);\r\n\r\n  const cancel = function cancel(e) {\r\n    message.error(\"취소되었습니다.\");\r\n  };\r\n  const handleCancel = () => {\r\n    setIsModalVisible(false);\r\n    setModifyUid(\"\");\r\n  };\r\n  const onModify = (uid, name, ea, alert_ea) => {\r\n    let obj = {\r\n      uid,\r\n      name,\r\n      ea,\r\n      alert_ea: alert_ea || \"\",\r\n    };\r\n    setModifyUid(obj);\r\n    setIsModalVisible(true);\r\n  };\r\n  const [ModifyUid, setModifyUid] = useState(\"\");\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const onModifySubmit = (values) => {\r\n    if (!userInfo.sosok) {\r\n      message.error(\"소속이 설정되어 있지 않습니다.\");\r\n      return;\r\n    }\r\n    const agree = window.confirm(\"출고 하시겠습니까?\\n(수량확인 부탁드립니다)\");\r\n    if (!agree) {\r\n      return;\r\n    }\r\n    let ea = parseInt(ModifyUid.ea) - parseInt(values.val);\r\n    if (ea < 0) {\r\n      message.error(\"재고가 부족합니다.\");\r\n      return;\r\n    }\r\n    let date = values.real_date\r\n      ? getFormatDate(new Date(values.real_date))\r\n      : getFormatDate(new Date());\r\n    values.real_date = date;\r\n    values.comment = values.comment ? values.comment : \"\";\r\n    const uid = uuid();\r\n    let obj = {\r\n      ...values,\r\n      ea,\r\n      type: \"출고\",\r\n      prod_uid: ModifyUid.uid,\r\n      alert_ea: ModifyUid.alert_ea || \"\",\r\n      prod: ModifyUid.name,\r\n      name: userInfo.displayName,\r\n      part: userInfo.photoURL,\r\n      sosok: userInfo.sosok,\r\n      uid: userInfo.uid,\r\n      key: uid,\r\n      date: getFormatDate(new Date()),\r\n    };\r\n\r\n    db.ref(`inventory/log/${curDate}/${uid}`).update({ ...obj });\r\n\r\n    db.ref(`inventory/list/${ModifyUid.uid}`)\r\n      .child(\"ea\")\r\n      .transaction((pre) => {\r\n        let curValue = pre;\r\n        curValue = parseInt(pre) - parseInt(values.val);\r\n        if (curValue <= obj.alert_ea) {\r\n          alertTelArr.forEach((el) => {\r\n            kakaoAlertEa(el, obj.prod, curValue);\r\n          });\r\n        }\r\n        return curValue;\r\n      });\r\n\r\n    let monthDate = curDate.substr(0, curDate.length - 2);\r\n    db.ref(`inventory/log_month/${monthDate}/${ModifyUid.uid}`).update({\r\n      prod: ModifyUid.name,\r\n    });\r\n    db.ref(\r\n      `inventory/log_month/${monthDate}/${ModifyUid.uid}/output`\r\n    ).transaction((pre) => {\r\n      if (pre == \"undefined\") {\r\n        db.ref(\r\n          `inventory/log_month/${monthDate}/${ModifyUid.uid}/output`\r\n        ).update(parseInt(values.val));\r\n      } else {\r\n        return pre + parseInt(values.val);\r\n      }\r\n    });\r\n\r\n    db.ref(`inventory/log_date/${ModifyUid.uid}/${curDate}`).update({\r\n      prod: ModifyUid.name,\r\n      ea,\r\n    });\r\n\r\n    db.ref(`inventory/user/${monthDate}/${userInfo.uid}/${uid}`).update({\r\n      ...obj,\r\n    });\r\n\r\n    message.success(\"출고완료\");\r\n    formRef.current.resetFields();\r\n    setIsModalVisible(false);\r\n    setModifyUid(\"\");\r\n  };\r\n\r\n  const onLogDelete = (ea, val, date, prod, uid, key) => {\r\n    let monthDate = date.full.substr(0, date.full.length - 2);\r\n    db.ref(`inventory/log_month/${monthDate}/${prod}/output`).transaction(\r\n      (pre) => {\r\n        return pre - parseInt(val);\r\n      }\r\n    );\r\n\r\n    db.ref(`inventory/list/${prod}/ea`).transaction((pre) => {\r\n      return pre + parseInt(val);\r\n    });\r\n\r\n    db.ref(`inventory/log_date/${prod}/${date.full}/ea`).transaction((pre) => {\r\n      return pre - parseInt(val);\r\n    });\r\n\r\n    db.ref(`inventory/user/${monthDate}/${uid}/${key}`).remove();\r\n\r\n    db.ref(`inventory/log/${date.full}/${key}`).remove();\r\n  };\r\n\r\n  const kakaoAlertEa = (tel, prod, ea) => {\r\n    let time = getFormatDate(new Date());\r\n    time = time.full + time.hour + time.min + time.sec;\r\n    let url =\r\n      \"https://metree.co.kr/_sys/_xml/order_kakao.php?inven_alert_tel=\" +\r\n      tel +\r\n      \"&prod_name=\" +\r\n      prod +\r\n      \"&alert_ea=\" +\r\n      ea +\r\n      \"&order_time=\" +\r\n      time;\r\n    fetch(url)\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(response.statusText);\r\n        }\r\n        return response;\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {Category && (\r\n        <div className=\"menuCategory\">\r\n          <Radio.Group\r\n            className=\"menuCategory\"\r\n            onChange={itemSort}\r\n            defaultValue=\"all\"\r\n            value={SortCate}\r\n            buttonStyle=\"solid\"\r\n          >\r\n            <Radio.Button value={\"all\"}>{`전체`}</Radio.Button>\r\n            {Category.map((el) => (\r\n              <>\r\n                <Radio.Button value={el}>{el}</Radio.Button>\r\n              </>\r\n            ))}\r\n          </Radio.Group>\r\n        </div>\r\n      )}\r\n      <Search\r\n        style={{ marginBottom: \"20px\" }}\r\n        allowClear\r\n        enterButton=\"검색\"\r\n        size=\"large\"\r\n        placeholder=\"품명으로 검색\"\r\n        value={searchInput}\r\n        onSearch={onSearch}\r\n        onChange={onSearchChange}\r\n        type=\"text\"\r\n      />\r\n      {InvenData && (\r\n        <ul className=\"inven-list-box\">\r\n          {InvenData.map((el, idx) => (\r\n            <li key={idx}>\r\n              <div className=\"list-con\">\r\n                <span className=\"hidden\">{el.uid}</span>\r\n                <div className=\"left\">\r\n                  {el.image ? (\r\n                    <div className=\"img-box\">\r\n                      <img src={el.image} />\r\n                    </div>\r\n                  ) : (\r\n                    <div className=\"img-box no-img\">\r\n                      <bsIcon.BsImage style={{ opacity: \"0.4\" }} />\r\n                    </div>\r\n                  )}\r\n                  <dl className=\"txt-box\">\r\n                    <dt style={{ marginBottom: \"2px\" }}>{el.name}</dt>\r\n                    <dd style={{ color: \"#555\", fontSize: \"13px\" }}>\r\n                      <goIcon.GoLocation\r\n                        style={{\r\n                          fontSize: \"14px\",\r\n                          position: \"relative\",\r\n                          top: \"2px\",\r\n                          marginRight: \"3px\",\r\n                        }}\r\n                      />\r\n                      {el.place}\r\n                    </dd>\r\n                    <dd style={{ color: \"#555\", fontSize: \"13px\" }}>\r\n                      {el.etc && (\r\n                        <antIcon.AiOutlineInfoCircle\r\n                          style={{\r\n                            fontSize: \"15px\",\r\n                            position: \"relative\",\r\n                            top: \"3px\",\r\n                            marginRight: \"3px\",\r\n                          }}\r\n                        />\r\n                      )}\r\n                      {el.etc}\r\n                    </dd>\r\n                  </dl>\r\n                </div>\r\n                <div className=\"right\">\r\n                  <span className=\"ea\">\r\n                    재고 : {el.ea}\r\n                    {el.unit && <>({el.unit})</>}\r\n                  </span>\r\n                  <div className=\"input-box\">\r\n                    <Button\r\n                      onClick={() =>\r\n                        onModify(el.uid, el.name, el.ea, el.alert_ea)\r\n                      }\r\n                    >\r\n                      사용\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n\r\n      <div\r\n        className=\"flex-box a-center\"\r\n        style={{ marginTop: \"30px\", marginBottom: \"10px\" }}\r\n      >\r\n        <h3\r\n          className=\"title\"\r\n          style={{ marginBottom: \"0\", marginRight: \"10px\" }}\r\n        >\r\n          비품 출고 내역\r\n        </h3>\r\n        <DatePicker\r\n          defaultValue={moment(SearchMonth, \"YYYY-MM\")}\r\n          onChange={onSearchMonth}\r\n          picker=\"month\"\r\n          style={{ marginRight: \"5px\" }}\r\n        />\r\n        <span style={{ fontSize: \"12px\", color: \"#888\" }}>*월별 검색</span>\r\n      </div>\r\n      {ProdItem && <Table columns={columns} dataSource={ProdItem} />}\r\n\r\n      {ModifyUid && (\r\n        <Modal\r\n          title={`${ModifyUid.name}`}\r\n          visible={isModalVisible}\r\n          onCancel={handleCancel}\r\n          centered\r\n          footer={false}\r\n        >\r\n          <Form\r\n            className=\"admin-prod-form\"\r\n            onFinish={onModifySubmit}\r\n            ref={formRef}\r\n          >\r\n            <Form.Item name=\"real_date\" label=\"실출고일\">\r\n              <DatePicker\r\n                defaultValue={moment()}\r\n                style={{ marginRight: \"5px\" }}\r\n              />\r\n            </Form.Item>\r\n            <Form.Item\r\n              name=\"val\"\r\n              label=\"수량\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"재고개수를 입력해 주세요\",\r\n                },\r\n              ]}\r\n            >\r\n              <InputNumber min={1} max={999} style={{ width: \"50px\" }} />\r\n            </Form.Item>\r\n            <Form.Item name=\"comment\" label=\"비고\">\r\n              <Input style={{ maxWidth: \"100%\" }} />\r\n            </Form.Item>\r\n            <div\r\n              className=\"btn-box\"\r\n              style={{ width: \"100%\", maxWidth: \"100%\", textAlign: \"center\" }}\r\n            >\r\n              <Button htmlType=\"submit\" type=\"primary\" size=\"large\">\r\n                출고하기\r\n              </Button>\r\n            </div>\r\n          </Form>\r\n        </Modal>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Inventory;\r\n","D:\\프로젝트\\sy-cafe-order\\src\\component\\hair\\Hair.js",["497","498"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport firebase from \"../../firebase\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Form, DatePicker, Input, Button, Table, Select, message, Spin } from 'antd';\r\nimport Signature from \"../Signature\";\r\nimport { getFormatDate, commaNumber } from '../CommonFunc';\r\nimport uuid from \"react-uuid\";\r\nimport moment from 'moment';\r\nimport { OderModalPopup } from \"../OrderModal\";\r\nconst curDate = getFormatDate(new Date());\r\nconst { RangePicker } = DatePicker;\r\nconst { Option } = Select;\r\n\r\nfunction Hair() {\r\n  const userInfo = useSelector((state) => state.user.currentUser);\r\n  const [sigPadData, setSigPadData] = useState(null);\r\n  const [MyHairData, setMyHairData] = useState();\r\n  const [Rerender, setRerender] = useState(false);\r\n  const [SearchDate, setSearchDate] = useState([curDate,curDate]);\r\n\r\n  const [HairInfo, setHairInfo] = useState();\r\n\r\n  const formRef = useRef();\r\n  \r\n\r\n  useEffect(() => {\r\n\r\n    firebase.database().ref('hair/info')\r\n    .on('value', (snapshot) => {\r\n      setHairInfo(snapshot.val())        \r\n    });\r\n\r\n    let hairArr = [];\r\n    let startDate = SearchDate[0].full.substr(0,6);\r\n    let endDate = SearchDate[1].full.substr(0,6);\r\n    firebase\r\n    .database()\r\n    .ref(`hair/list/${userInfo.uid}`)\r\n    .once(\"value\", (snapshot) => {\r\n      snapshot.forEach(el=>{\r\n        let str = el.val().date.full.toString().substr(0,6);\r\n        if(startDate <= str && str <= endDate){\r\n          hairArr.push(el.val())\r\n        }\r\n      })      \r\n      hairArr.sort((a,b)=>{\r\n        return b.timestamp - a.timestamp\r\n      })\r\n      hairArr.sort((a,b)=>{\r\n        return b.date.full - a.date.full\r\n      })\r\n      setMyHairData(hairArr);\r\n    });\r\n    return () => {\r\n      firebase.database().ref(`users/${userInfo.uid}`).off();\r\n    }\r\n  }, [Rerender,SearchDate]);\r\n  \r\n  const onSigpad = (data) => {\r\n    setSigPadData(data);\r\n  }  \r\n\r\n  const [Loading, setLoading] = useState(false);\r\n\r\n  const onFinish = (values)=> {     \r\n\r\n    setLoading(true)\r\n    const uid = uuid();\r\n    values.date = getFormatDate(values.date._d);\r\n    values.signature = sigPadData;\r\n    console.log(sigPadData)\r\n    if(!values.signature){\r\n      window.alert('서명은 필수입니다.');\r\n      setLoading(false)\r\n      return;\r\n    }else if(values.signature.length < 2000){\r\n      window.alert('서명이 너무 짧습니다.');\r\n      setLoading(false)\r\n      return;\r\n    }\r\n    const yearMonth = String(values.date.year) + String(values.date.month)\r\n    firebase.storage().ref(`hair/${yearMonth}/${uid}`)\r\n    .putString(values.signature,'data_url')\r\n    .then((res)=>{\r\n      res.ref.getDownloadURL()\r\n      .then(url => {\r\n        firebase\r\n        .database()\r\n        .ref(\"hair/list\")\r\n        .child(`${userInfo.uid}/${uid}`)\r\n        .update({\r\n          ...values,\r\n          signature:url,\r\n          part: userInfo.photoURL,\r\n          name: userInfo.displayName,\r\n          sosok: userInfo.sosok,\r\n          timestamp: new Date().getTime(),\r\n          uid:uid,\r\n          user_uid:userInfo.uid\r\n        })\r\n        setRerender(!Rerender);\r\n        message.success('등록되었습니다.');    \r\n        formRef.current.resetFields();    \r\n        setSigPadData('');\r\n        setLoading(false)\r\n      })\r\n    })\r\n  }\r\n\r\n  const onDelete = (uid,date) => {\r\n    let yearMonth = getFormatDate(new Date(date));\r\n    yearMonth = String(yearMonth.year) + String(yearMonth.month)\r\n\r\n    let curDate = Math.floor(new Date().getTime()/1000);\r\n    let thisDate = Math.floor(date/1000);\r\n    if(curDate>thisDate+259200){\r\n      window.alert('삭제는 작성 후 3일까지 가능합니다.');\r\n      return;\r\n    }\r\n    let agree = window.confirm('삭제하면 복구가 불가능합니다. 삭제하시겠습니까?');\r\n    if(agree){\r\n      firebase.database().ref(`hair/list/${userInfo.uid}/${uid}`).remove();\r\n      setRerender(!Rerender)\r\n      firebase.storage().ref(`hair/${yearMonth}/${uid}`).delete()\r\n      message.success('삭제되었습니다.');\r\n    }\r\n  }\r\n\r\n  const [ModifyPop, setModifyPop] = useState(false);\r\n  const [ModifyData, setModifyData] = useState();\r\n  const onModify = (uid,date) => {\r\n    firebase.database().ref(`hair/list/${userInfo.uid}/${uid}`)\r\n    .once(\"value\", (snapshot => {\r\n      setModifyData(snapshot.val());\r\n      return;\r\n    }))\r\n    let curDate = Math.floor(new Date().getTime()/1000);\r\n    let thisDate = Math.floor(date/1000);\r\n    if(curDate>thisDate+259200){\r\n      window.alert('수정은 작성 후 3일까지 가능합니다.');\r\n      return;\r\n    }\r\n    setModifyPop(true)\r\n  }\r\n  const modifyOff = () => {\r\n    setModifyData('');\r\n    setModifyPop(false)\r\n  }\r\n\r\n  const onSubmitModify = (e) => {\r\n    e.preventDefault();\r\n    let date = e.target.date.value;\r\n    let year = date.substr(0,4);\r\n    let month = date.substr(5,2);\r\n    month = parseInt(month) - 1;\r\n    let day = date.substr(8,2);\r\n    date = getFormatDate(new Date(year,month,day))\r\n    firebase\r\n    .database()\r\n    .ref(\"hair/list\")\r\n    .child(`${userInfo.uid}/${ModifyData.uid}`)\r\n    .update({\r\n      date:date,\r\n      price: e.target.price.value,\r\n      relation: e.target.querySelector('.ant-select-selection-item').title,\r\n      service: e.target.service.value,\r\n    });\r\n    setRerender(!Rerender)\r\n    modifyOff()\r\n    message.success('수정되었습니다.');\r\n  }\r\n\r\n  const onSelectDate = (date, dateString) => {\r\n    let arr = [];\r\n    arr.push(getFormatDate(date[0]._d))\r\n    arr.push(getFormatDate(date[1]._d))\r\n    setSearchDate(arr)\r\n  }\r\n  const disabledDate = (current) => {\r\n    return current && current > moment();\r\n  }\r\n\r\n  const contentDesc = () => {\r\n    let content;\r\n    content = HairInfo\r\n    return {__html: content}\r\n  }\r\n\r\n\r\n  \r\n    const columns = [\r\n      {\r\n        title: '이용날짜',\r\n        dataIndex: 'date',\r\n        key: 'date',\r\n        align: 'center',\r\n        render: data => data ? data.full_ : '',\r\n      },\r\n      {\r\n        title: '이용자와의 관계',\r\n        dataIndex: 'relation',\r\n        key: 'relation',\r\n        align: 'center',\r\n      },\r\n      {\r\n        title: '서비스명',\r\n        dataIndex: 'service',\r\n        key: 'service',\r\n        align: 'center'\r\n      },\r\n      {\r\n        title: '가격',\r\n        dataIndex: 'price',\r\n        key: 'price',\r\n        align: 'center',        \r\n        render: data => data ? `${commaNumber(data)}` : ''\r\n      },\r\n      {\r\n        title: '서명',\r\n        dataIndex: 'signature',\r\n        key: 'signature',\r\n        align: 'center',\r\n        render: data => data ? <img style={{height:\"40px\"}} src={data} /> : '',\r\n      },\r\n      {\r\n        title: '관리',\r\n        dataIndex: ['uid','timestamp'],\r\n        key: 'uid',\r\n        align: 'center',\r\n        render: (text,row) => row['uid'] ? (\r\n          <>\r\n            <Button style={{marginRight:\"5px\"}} onClick={()=>{onModify(row['uid'],row['timestamp'])}}>수정</Button>\r\n            <Button onClick={()=>{onDelete(row['uid'],row['timestamp'])}}>삭제</Button>\r\n          </>\r\n          ) : '',\r\n      }\r\n      \r\n    ]\r\n\r\n\r\n    \r\n  return (\r\n    <>\r\n      {HairInfo && \r\n          <div className=\"item-info-box\" style={{marginBottom:\"20px\"}}>\r\n            <pre dangerouslySetInnerHTML={contentDesc()}></pre>\r\n          </div>\r\n        }\r\n      <Form ref={formRef} name=\"dynamic_form_nest_item\" className=\"hiar-form\" onFinish={onFinish} autoComplete=\"off\">\r\n        <div className=\"flex-box\">\r\n          <Form.Item \r\n          name=\"date\"\r\n          label=\"이용날짜\"\r\n          rules={[{ \r\n            required: true,\r\n            message: \"필수항목 입니다.\"\r\n          }]}\r\n          >\r\n            <DatePicker />\r\n          </Form.Item>\r\n          <Form.Item \r\n          name=\"relation\"\r\n          label=\"관계\"\r\n          rules={[{ \r\n            required: true,\r\n            message: \"필수항목 입니다.\"\r\n          }]}\r\n          >\r\n            <Select defaultValue=\"선택\" style={{ width: 120 }}>\r\n              <Option value=\"본인\">본인</Option>\r\n              <Option value=\"배우자\">배우자</Option>\r\n              <Option value=\"자녀\">자녀</Option>\r\n            </Select>\r\n          </Form.Item>\r\n        </div>\r\n        <div className=\"flex-box\">\r\n          <Form.Item \r\n          name=\"service\"\r\n          label=\"서비스명\"\r\n          rules={[{ \r\n            required: true,\r\n            message: \"필수항목 입니다.\"\r\n          }]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n          <Form.Item \r\n          name=\"price\"\r\n          label=\"가격\"\r\n          rules={[{ \r\n            required: true,\r\n            message: \"필수항목 입니다.\"\r\n          }]}\r\n          >\r\n            <Input \r\n              prefix=\"￦\" \r\n              type=\"number\"\r\n              style={{maxWidth:\"120px\"}} \r\n            />\r\n          </Form.Item>\r\n        </div>\r\n        <Form.Item \r\n        className=\"signature\"\r\n        name=\"signature\"\r\n        label=\"서명\"\r\n        >\r\n          <Signature onSigpad={onSigpad} />\r\n        </Form.Item>\r\n        <div className=\"btn-box\">\r\n          <Spin spinning={Loading}>\r\n            <Button type=\"primary\" htmlType=\"submit\">등록하기</Button>          \r\n          </Spin>\r\n        </div>\r\n      </Form>\r\n\r\n      {MyHairData &&\r\n        <>\r\n        <RangePicker \r\n          picker=\"month\" \r\n          style={{margin:\"20px 0 10px 0\"}}\r\n          defaultValue={[moment(),moment()]}\r\n          disabledDate={disabledDate} onChange={onSelectDate}\r\n        />\r\n        <Table \r\n        pagination={{\r\n          pageSize:10\r\n        }}\r\n        align=\"center\" columns={columns} dataSource={MyHairData} />        \r\n        </>\r\n      } \r\n      {\r\n        ModifyPop && ModifyData &&\r\n        <>\r\n          <OderModalPopup className=\"call_modify\" style={{\r\n            top:\"50%\",\r\n            left:\"50%\",\r\n            transform:\"translate(-50%,-50%)\",\r\n            position:\"fixed\",\r\n          }}>\r\n            <form className=\"order-form-box\" onSubmit={onSubmitModify}>\r\n              <div className=\"input-box\" style={{marginBottom:\"5px\"}}>\r\n                <span className=\"tit\">이용날짜</span>\r\n                <DatePicker name=\"date\" defaultValue={moment(ModifyData.date.full_)} />\r\n              </div>\r\n              <div className=\"input-box\" style={{marginBottom:\"5px\"}}>\r\n                <span className=\"tit\">관계</span>\r\n                <Select name=\"relation\" defaultValue={ModifyData.relation} style={{ width: 120 }}>\r\n                  <Option value=\"본인\">본인</Option>\r\n                  <Option value=\"배우자\">배우자</Option>\r\n                  <Option value=\"자녀\">자녀</Option>\r\n                </Select>\r\n              </div>\r\n              <div className=\"input-box\" style={{marginBottom:\"5px\"}}>\r\n                <span className=\"tit\">서비스명</span>\r\n                <Input name=\"service\" defaultValue={ModifyData.service} />\r\n              </div>\r\n              <div className=\"input-box\" style={{marginBottom:\"5px\"}}>\r\n                <span className=\"tit\">가격</span>\r\n                <Input prefix=\"￦\" type=\"number\" name=\"price\" defaultValue={ModifyData.price} />\r\n              </div>\r\n              <div className=\"btn-box\">\r\n                <Button type=\"primary\" htmlType=\"submit\">수정하기</Button>\r\n                <Button onClick={modifyOff} style={{marginLeft:\"5px\"}}>닫기</Button>\r\n              </div>\r\n            </form>\r\n          </OderModalPopup>\r\n        </>\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Hair\r\n","D:\\프로젝트\\sy-cafe-order\\src\\redux\\reducers\\user_reducer.js",[],"D:\\프로젝트\\sy-cafe-order\\src\\component\\OrderModal.js",["499","500","501","502","503","504","505","506"],"import React, { useEffect, useState } from \"react\";\r\nimport { Button, Input, Checkbox, Spin, Select,message } from \"antd\";\r\nimport { PlusOutlined, MinusOutlined } from \"@ant-design/icons\";\r\nimport styled from \"styled-components\";\r\nimport { useSelector } from \"react-redux\";\r\nimport firebase from \"../firebase\";\r\nimport moment from \"moment\";\r\nimport { getFormatDate, getAbleTime } from \"./CommonFunc\";\r\nimport \"moment/locale/ko\";\r\nimport uuid from \"react-uuid\";\r\nexport const OderModalPopup = styled.div`\r\n  width: auto;\r\n  min-width:290px;\r\n  padding: 20px;\r\n  border: 1px solid #ddd;\r\n  position: absolute;\r\n  z-index: 150;\r\n  border-radius: 10px;\r\n  background: #fff;\r\n  transform: translate(-50%, -70%);\r\n  left: ${(props) => props.posx}px;\r\n  top: ${(props) => props.posy}px;\r\n  animation: fade_up 0.3s both;\r\n  box-shadow: 0px 0px 7px 0px rgba(0, 0, 0, 0.25);\r\n  .modal-loading {\r\n    position: absolute;\r\n    left: 50%;\r\n    top: 50%;\r\n    transform: translate(-50%, -50%);\r\n  }\r\n  @keyframes fade_up {\r\n    from {\r\n      opacity: 0;\r\n      transform: translate(-50%, -60%);\r\n    }\r\n    to {\r\n      opacity: 1;\r\n      transform: translate(-50%, -70%);\r\n    }\r\n  }  \r\n  @media all and (max-width: 640px) {\r\n    width: 80%;\r\n    max-width: 300px;\r\n    left: 50%;\r\n    transform: translate(-50%, -100%);\r\n  }\r\n  .num {\r\n    width: 40px;\r\n    text-align: center;\r\n    margin: 0 -1px;\r\n  }\r\n  .tit {\r\n    display: inline-block;\r\n    margin-right: 5px;\r\n    flex-shrink: 0;\r\n  }\r\n  .btn-box {\r\n    margin-top: 10px;\r\n    display: flex;\r\n    justify-content: center;\r\n    button {\r\n      width: 100px;\r\n    }\r\n  }\r\n`;\r\nconst { Option } = Select;\r\n\r\nfunction OrderModal({ posx, posy, onFinished, OrderItem }) {\r\n\r\n  const [saleTime, setSaleTime] = useState();\r\n  const userInfo = useSelector((state) => state.user.currentUser);\r\n  const [UserDb, setUserDb] = useState();\r\n  const [UserPhone, setUserPhone] = useState();\r\n\r\n  const [ableTimeState, setAbleTimeState] = useState();\r\n\r\n  useEffect(() => {\r\n    if(OrderItem.time_sale){\r\n      let timeTemp = [];\r\n      OrderItem.time_sale.forEach(el=>{\r\n        let temp = [];\r\n        el.forEach(e=>{\r\n          temp.push(e.split(\":\").slice(0,2).join(\":\"))\r\n        })\r\n        timeTemp.push(temp);\r\n      })\r\n      const curTime = getFormatDate(new Date());   \r\n      const ableTimeCheck =  getAbleTime(OrderItem.time_sale,curTime);\r\n      setAbleTimeState(ableTimeCheck.ableTime);\r\n      setSaleTime(timeTemp);\r\n    }\r\n  }, [OrderItem])\r\n  \r\n  useEffect(() => {\r\n\r\n    if (userInfo) {\r\n      firebase\r\n      .database()\r\n      .ref(\"users\")\r\n      .child(userInfo.uid)\r\n      .once(\"value\", (snapshot) => {\r\n        setUserDb(snapshot.val());\r\n      });\r\n    }\r\n    firebase\r\n    .database()\r\n    .ref(`users/${userInfo.uid}`)\r\n    .once(\"value\")\r\n    .then((snapshot) => {            \r\n      setUserPhone(snapshot.val().call_number)\r\n    });\r\n  }, [])\r\n  const [Amount, setAmount] = useState(1);\r\n  const plusAmount = () => {\r\n    if (Amount < 10) {\r\n      setAmount((pre) => pre + 1);\r\n    } else {\r\n      alert(\"최대 주문량은 10개 입니다.\");\r\n    }\r\n  };\r\n  const minusAmount = () => {\r\n    if (Amount > 1) {\r\n      setAmount((pre) => pre - 1);\r\n    } else {\r\n      alert(\"최소 주문량은 1개 입니다.\");\r\n    }\r\n  };\r\n  const onCancel = () => {\r\n    onFinished();\r\n  };\r\n\r\n  const [radioValue, setradioValue] = useState();\r\n  const radioChange = (e) => {\r\n    setradioValue(e.target.value);\r\n  };\r\n  const [radioValue2, setradioValue2] = useState('저지방');\r\n  const radioChange2 = (e) => {\r\n    setradioValue2(e.target.value);\r\n  };  \r\n\r\n  const [AddCheck, setAddCheck] = useState();\r\n  function onChange(checkedValues) {\r\n    setAddCheck(checkedValues);\r\n  }\r\n\r\n  const [AddCheck2, setAddCheck2] = useState();\r\n  function onChange2(checkedValues) {\r\n    setAddCheck2(checkedValues);\r\n  }\r\n\r\n  let hotRadio;\r\n  if (OrderItem.hot === \"hot & ice\") {\r\n    hotRadio = (\r\n      <>\r\n        <input\r\n          type=\"radio\"\r\n          name=\"hot\"\r\n          id=\"hot\"\r\n          value=\"hot\"\r\n          onChange={radioChange}\r\n        />\r\n        <label className=\"radio_hot\" htmlFor=\"hot\">\r\n          hot\r\n        </label>\r\n        <input\r\n          type=\"radio\"\r\n          id=\"ice\"\r\n          name=\"hot\"\r\n          value=\"ice\"\r\n          onChange={radioChange}\r\n        />\r\n        <label className=\"radio_ice\" htmlFor=\"ice\">\r\n          ice\r\n        </label>\r\n      </>\r\n    );\r\n  }\r\n  if (OrderItem.hot === \"hot only\") {\r\n    hotRadio = (\r\n      <>\r\n        <input\r\n          type=\"radio\"\r\n          id=\"hot\"\r\n          name=\"hot\"\r\n          value=\"hot\"\r\n          checked\r\n          onChange={radioChange}\r\n        />\r\n        <label className=\"radio_hot\" htmlFor=\"hot\">\r\n          hot only\r\n        </label>\r\n      </>\r\n    );\r\n  }\r\n  if (OrderItem.hot === \"ice only\") {\r\n    hotRadio = (\r\n      <>\r\n        <input\r\n          type=\"radio\"\r\n          id=\"ice\"\r\n          name=\"hot\"\r\n          value=\"ice\"\r\n          checked\r\n          onChange={radioChange}\r\n        />\r\n        <label className=\"radio_ice\" htmlFor=\"ice\">\r\n          ice only\r\n        </label>\r\n      </>\r\n    );\r\n  }\r\n\r\n  // submit\r\n  const [ProdOption, setProdOption] = useState();\r\n  const onOptionChange = (e) => {\r\n    setProdOption(e);\r\n  }\r\n  useEffect(()=>{\r\n    setProdOption('')\r\n  },[OrderItem])\r\n  const [submitLoading, setsubmitLoading] = useState(false);\r\n  const onSubmitOrder = async (e) => {\r\n    e.preventDefault();  \r\n    const nowTime = moment().format(\"YYYY-MM-DD HH:mm:ss|dddd\");\r\n    const timeStamp = new Date().getTime();\r\n    const curTime = getFormatDate(new Date());    \r\n    if(OrderItem.time_sale){\r\n      const ableTimeCheck =  getAbleTime(OrderItem.time_sale,curTime)\r\n      if(!ableTimeCheck.ableTime){\r\n        message.error(`주문불가 시간 입니다.`)\r\n        return\r\n      }\r\n    }\r\n    let guest_call = '';\r\n    if(e.target.guest_call){\r\n      guest_call = e.target.guest_call.value;\r\n    }\r\n    \r\n    if(userInfo?.auth && userInfo.auth.includes('disable')){\r\n      message.error(\"주문이 불가능 합니다.\")\r\n      return;\r\n    }    \r\n    if(OrderItem.jaego === 0){\r\n      message.error(\"재고가 부족합니다.\")\r\n      return\r\n    }\r\n    if(OrderItem.option && !ProdOption){\r\n      message.error(\"옵션을 선택해 주세요\")\r\n      return;\r\n    }\r\n       \r\n    setsubmitLoading(true);\r\n    \r\n    if(OrderItem.limit && UserDb.limit){\r\n      if(UserDb.limit.hasOwnProperty(OrderItem.name)){\r\n        let time = UserDb.limit[OrderItem.name].timestamp\r\n        time = getFormatDate(new Date(time));        \r\n        if(curTime.full === time.full){\r\n          message.error(\"하루에 한번만 주문 가능합니다.\");\r\n          onFinished();\r\n          setsubmitLoading(false);\r\n          return;\r\n        }else{\r\n          firebase\r\n          .database()\r\n          .ref(\"users\")\r\n          .child(`${userInfo.uid}/limit/${OrderItem.name}`)\r\n          .update({\r\n            timestamp:timeStamp,      \r\n          })\r\n        } \r\n      }else{\r\n        firebase\r\n        .database()\r\n        .ref(\"users\")\r\n        .child(`${userInfo.uid}/limit/${OrderItem.name}`)\r\n        .update({\r\n          timestamp:timeStamp,      \r\n        })  \r\n      }\r\n    }else if(OrderItem.limit){\r\n      firebase\r\n      .database()\r\n      .ref(\"users\")\r\n      .child(`${userInfo.uid}/limit/${OrderItem.name}`)\r\n      .update({\r\n        timestamp:timeStamp,      \r\n      })           \r\n    }\r\n\r\n    if (e.target.hot && !e.target.hot.value) {\r\n        message.error(\"온도를 선택해주세요\");\r\n        setsubmitLoading(false);\r\n        return;\r\n    }\r\n    let addPrice = 0;\r\n\r\n    if (AddCheck2) {\r\n      if (AddCheck2.includes(\"샷1\")) {\r\n        addPrice += 500;\r\n      }\r\n      if (AddCheck2.includes(\"샷2\")) {\r\n        addPrice += 1000;\r\n      }\r\n    }\r\n    if (AddCheck) {\r\n      addPrice += 500;\r\n    }\r\n    let values = {\r\n      order_uid: userInfo.uid,\r\n      order_email: userInfo.email,\r\n      order_name: userInfo.displayName,\r\n      order_part: userInfo.photoURL,\r\n      order_time: nowTime,\r\n      order_etc: e.target.etc.value,\r\n      order_state: 0,\r\n      order_phone:guest_call ? guest_call : UserPhone,\r\n      prod_uid: OrderItem.uid,\r\n      prod_name: OrderItem.name,\r\n      prod_option: ProdOption ? ProdOption : \"\",\r\n      prod_img: OrderItem.image,\r\n      price: OrderItem.price * e.target.amount.value + addPrice,\r\n      amount: parseInt(e.target.amount.value),\r\n      kal: parseInt(OrderItem.kal),\r\n      hot: e.target.hot ? e.target.hot.value : \"\",\r\n      milk: e.target.milk ? e.target.milk.value : \"\",\r\n      add: AddCheck ? AddCheck : null,\r\n      add2: AddCheck2 ? AddCheck2 : null,\r\n      category: OrderItem.category,\r\n      timestamp: timeStamp,      \r\n    };\r\n\r\n\r\n    try {\r\n      await firebase\r\n      .database()\r\n      .ref(\"products\")\r\n      .child(`${OrderItem.uid}`)\r\n      .transaction((pre) => {\r\n        if(pre.jaego){\r\n          pre.jaego--;\r\n          return pre;\r\n        }\r\n      });\r\n      await firebase\r\n        .database()\r\n        .ref(\"products\")\r\n        .child(`${OrderItem.uid}/count`)\r\n        .transaction((pre) => {\r\n          return pre + 1;\r\n        });\r\n      await firebase\r\n        .database()\r\n        .ref(\"users\")\r\n        .child(`${userInfo.uid}/favorite/${OrderItem.name}`)\r\n        .child(\"count\")\r\n        .transaction((pre) => {\r\n          return pre + 1;\r\n        });\r\n       \r\n      await firebase\r\n        .database()\r\n        .ref(\"order\")\r\n        .child(uuid())\r\n        .set({\r\n          ...values,\r\n        });\r\n      await firebase\r\n        .database()\r\n        .ref(\"order_count\")\r\n        .transaction((pre) => {\r\n          return pre + 1;\r\n        });\r\n        message.success('주문에 성공했습니다 :)');  \r\n      onFinished();\r\n      setsubmitLoading(false);\r\n    } catch (error) {\r\n      alert(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <OderModalPopup\r\n        className=\"ani-fadein du-1\"\r\n        posx={posx}\r\n        posy={posy}\r\n        style={{ padding: \"12px 15px 15px 15px\" }}\r\n      >\r\n        <form className=\"order-form-box\" onSubmit={onSubmitOrder}>\r\n          <h4>{OrderItem.name}</h4>\r\n          {OrderItem.time_sale && saleTime?.length > 0 &&\r\n          <div className=\"sale-time\">\r\n            <h5>판매시간</h5>\r\n            <div className=\"alble-time-check\">\r\n            {ableTimeState ? (<span className=\"able\">(주문가능)</span>) : (<span className=\"disable\">(주문불가)</span>)\r\n            }\r\n            </div>\r\n            <div className=\"time\">\r\n            {saleTime.map(el=>(\r\n              <div>{el.join('~')}</div>\r\n            ))}\r\n            </div>\r\n          </div>\r\n          }\r\n          <div className=\"flex-box a-center\">\r\n            <span className=\"tit\">수량</span>\r\n            {/* <Button\r\n              onClick={minusAmount}\r\n              icon={<MinusOutlined />}\r\n              type=\"default\"\r\n            ></Button> */}\r\n            <Input className=\"num\" name=\"amount\" style={{border:\"none\"}} value={Amount} />\r\n            {/* <Button\r\n              onClick={plusAmount}\r\n              icon={<PlusOutlined />}\r\n              type=\"default\"\r\n            ></Button> */}\r\n          </div>\r\n          {OrderItem.option &&\r\n          <div className=\"flex-box a-center\">\r\n            <span className=\"tit\">옵션</span>\r\n            <Select onChange={onOptionChange} name=\"option\" style={{width:\"100%\"}}>\r\n            {OrderItem.option.split(',').map((el,idx) => (\r\n              <Option value={el} key={idx}>{el}</Option>\r\n            ))}\r\n            </Select>\r\n          </div>\r\n          }\r\n          {hotRadio &&\r\n          <div className=\"flex-box a-center\">\r\n            <span className=\"tit\"></span>\r\n            {hotRadio}\r\n          </div>\r\n          }\r\n            {OrderItem.milk &&\r\n            <div className=\"flex-box a-center\">\r\n              <span className=\"tit\"></span>\r\n                    \r\n              {/* {OrderItem.m_soldout && (\r\n                  <>\r\n                  <input\r\n                    type=\"radio\"\r\n                    id=\"none\"\r\n                    name=\"milk\"\r\n                    value=\"무지방\"\r\n                    onChange={radioChange2}\r\n                  />\r\n                  <label htmlFor=\"none\">\r\n                  무지방\r\n                  </label>\r\n                </>\r\n              )} */}\r\n              {OrderItem.m_soldout2 && (\r\n                <>\r\n                  <input\r\n                    type=\"radio\"\r\n                    id=\"free\"\r\n                    name=\"milk\"\r\n                    value=\"락토프리\"\r\n                    defaultChecked\r\n                    onChange={radioChange2}\r\n                  />\r\n                  <label htmlFor=\"free\">\r\n                  락토프리\r\n                  </label>\r\n                </>\r\n              )}\r\n              {OrderItem.m_soldout && (\r\n              <>\r\n                <input\r\n                  type=\"radio\"\r\n                  name=\"milk\"\r\n                  id=\"basic\"\r\n                  value=\"저지방\"   \r\n                  onChange={radioChange2}\r\n                  />\r\n                  <label htmlFor=\"basic\">\r\n                  저지방\r\n                </label>\r\n              </>\r\n              )}\r\n            </div>\r\n            }\r\n          {OrderItem.add && (\r\n            <div className=\"flex-box\">\r\n              <span className=\"tit\" style={{ marginTop: \"3px\" }}>\r\n                추가\r\n              </span>\r\n              {OrderItem && (\r\n                <div\r\n                  className=\"order-check-box\"\r\n                  style={{ flexDirection: \"column\" }}\r\n                >\r\n                  {/* <Checkbox.Group style={{ width: \"100%\" }} onChange={onChange}>\r\n                    {OrderItem.b_soldout && OrderItem.add.includes(\"버블\") && (\r\n                      <>\r\n                        <Checkbox value=\"버블\">버블</Checkbox>\r\n                      </>\r\n                    )}\r\n                    {!OrderItem.b_soldout && OrderItem.add.includes(\"버블\") && (\r\n                      <>\r\n                        <Checkbox value=\"버블\" disabled>\r\n                          버블품절\r\n                        </Checkbox>\r\n                      </>\r\n                    )}\r\n                  </Checkbox.Group> */}\r\n                  {OrderItem.add.includes(\"샷\") && (\r\n                    <>\r\n                      <div\r\n                        className=\"flex-box a-center\"\r\n                        style={{ marginTop: \"5px\" }}\r\n                      >\r\n                        <Checkbox.Group style={{ width: \"100%\" }} onChange={onChange2}>                          \r\n                          {OrderItem.add.includes(\"연하게\") && (        \r\n                              <Checkbox value=\"연하게\">연하게</Checkbox>\r\n                          )}\r\n                          <Checkbox value=\"샷1\">1샷 추가</Checkbox>\r\n                          <Checkbox value=\"샷2\">2샷 추가</Checkbox>\r\n                        </Checkbox.Group>                        \r\n                      </div>\r\n                    </>\r\n                  )}                  \r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n          <div className=\"flex-box a-center\">\r\n            <span className=\"tit\">기타</span>\r\n            <Input name=\"etc\" type=\"text\" />\r\n          </div>\r\n          {userInfo && userInfo.uid === 'cz8emz5BbZMkdJLTSEmro6DYqF32' &&\r\n            <div className=\"flex-box a-center\">\r\n              <div>\r\n                <span>주문알림용 연락처(선택)</span>\r\n                <Input name=\"guest_call\" type=\"number\" placeholder={`휴대폰번호 ('-' 빼고 입력해 주세요)`} />\r\n              </div>\r\n            </div>\r\n          }\r\n          <div className=\"btn-box\">\r\n            <Button\r\n              disabled={submitLoading}\r\n              htmlType=\"submit\"\r\n              type=\"primary\"\r\n              style={{ marginRight: \"5px\" }}\r\n            >\r\n              주문\r\n            </Button>\r\n            <Button onClick={onCancel} type=\"default\">\r\n              취소\r\n            </Button>\r\n          </div>\r\n        </form>\r\n        {submitLoading && (\r\n          <>\r\n            <div\r\n              className=\"bg-box\"\r\n              style={{\r\n                position: \"absolute\",\r\n                width: \"100%\",\r\n                height: \"100%\",\r\n                background: \"rgba(255,255,255,0.5)\",\r\n                borderRadius: \"10px\",\r\n              }}\r\n            ></div>\r\n            <Spin className=\"modal-loading\" tip=\"Loading...\"></Spin>\r\n          </>\r\n        )}\r\n      </OderModalPopup>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default OrderModal;\r\n","D:\\프로젝트\\sy-cafe-order\\src\\component\\GuestHome.js",["507","508","509","510","511","512","513","514","515","516","517","518"],"import React, { useState,useRef,useEffect } from 'react'\r\nimport { Carousel,Button,Form,Input,InputNumber } from 'antd';\r\nimport * as antIcon from \"react-icons/ai\";\r\nimport {OderModalPopup} from \"./OrderModal\";\r\nimport { values } from 'lodash';\r\nimport firebase from \"../firebase\";\r\nimport LogoImg from './LogoImg';\r\n\r\nfunction GuestHome(props) {\r\n  const db = firebase.database()\r\n  const typeBox = useRef()\r\n  const settings = {\r\n    dots:false,\r\n    autoplay:true,\r\n    effect:'fade'\r\n  };\r\n\r\n\r\n  \r\n\r\n\r\n  const onParkingPop = () => {\r\n    window.open(\"http://suseong.iptime.org:8080/HpmsWeb\")\r\n  }\r\n\r\n  const [VisitPop, setVisitPop] = useState(false)\r\n  const onVistPop = () => {\r\n    setVisitPop(true)\r\n  }\r\n  const onVistPopOff = () => {\r\n    setVisitPop(false)\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      <div className=\"guest-home\">\r\n      <LogoImg />\r\n        <div className=\"slide-wrapper\">\r\n          <Carousel {...settings}>\r\n            {props.prod.map((el,idx)=>(\r\n              <div key={idx} className=\"list\">\r\n                <div className=\"img-box\">\r\n                  <img src={el.image} />\r\n                </div>  \r\n                <div className=\"tit\">\r\n                  <span className=\"name\">{el.name}</span>\r\n                  <span className=\"hot\">{\r\n                    el.hot !== 'etc' && el.hot\r\n                  }\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </Carousel>\r\n        </div>\r\n        <div className=\"home-menu\">\r\n          <Button className=\"menu\" onClick={props.guestPopClose}>\r\n              <antIcon.AiOutlineCoffee className=\"ic\" />\r\n              메뉴화면\r\n          </Button>\r\n          <Button className=\"menu\" onClick={onParkingPop}>\r\n              <antIcon.AiOutlineCar className=\"ic\" />\r\n              주차등록\r\n          </Button>\r\n        </div>\r\n      </div>\r\n      \r\n    </>\r\n  )\r\n}\r\n\r\nexport default GuestHome\r\n","D:\\프로젝트\\sy-cafe-order\\src\\component\\Timer.js",["519"],"import React, { useState, useEffect } from \"react\";\r\n\r\nconst Timer = ({ mm, ss, onTimeOut }) => {\r\n  const [minutes, setMinutes] = useState(parseInt(mm));\r\n  const [seconds, setSeconds] = useState(parseInt(ss));\r\n\r\n  useEffect(() => {\r\n    const countdown = setInterval(() => {\r\n      if (parseInt(seconds) > 0) {\r\n        setSeconds(parseInt(seconds) - 1);\r\n      }\r\n      if (parseInt(minutes) <= 0 && parseInt(seconds) <= 1) {\r\n        setMinutes(0);\r\n        setSeconds(0);\r\n        onTimeOut();\r\n      }\r\n      if (parseInt(seconds) === 0) {\r\n        if (parseInt(minutes) === 0) {\r\n            clearInterval(countdown);            \r\n        } else {\r\n          setMinutes(parseInt(minutes) - 1);\r\n          setSeconds(59);\r\n        }\r\n      }\r\n    }, 1000);\r\n    return () => clearInterval(countdown);\r\n  }, [minutes, seconds]);\r\n\r\n  return (\r\n    <>\r\n      {minutes}:{seconds < 10 ? `0${seconds}` : seconds}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Timer;",["520","521"],"D:\\프로젝트\\sy-cafe-order\\src\\component\\Admin\\ProdCategory.js",[],"D:\\프로젝트\\sy-cafe-order\\src\\component\\Admin\\ModifyModal.js",["522"],"import React, { useState, useEffect } from \"react\";\r\nimport { Button, Checkbox, Switch, TimePicker } from \"antd\";\r\nimport firebase from \"../../firebase\";\r\nimport styled from \"styled-components\";\r\nimport uuid from \"react-uuid\";\r\nimport moment from 'moment'\r\nexport const FileLabel2 = styled.label`\r\n  display: flex;\r\n  width: 60px;\r\n  height: 60px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 5px;\r\n  flex-shrink: 0;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 12px;\r\n  color: #888;\r\n  cursor: pointer;\r\n  overflow: hidden;\r\n  img {\r\n    width: 100%;\r\n    height: auto;\r\n  }\r\n`;\r\nexport const ModalPopup = styled.div`\r\n  width: 100%;\r\n  max-width: 350px;\r\n  padding: 20px;\r\n  border: 1px solid #ddd;\r\n  position: absolute;\r\n  z-index: 100;\r\n  border-radius: 10px;\r\n  background: #fff;\r\n  box-shadow: 0px 0px 5px 0px rgba(0, 0, 0, 0.25);\r\n  transform: translate(-50%, -100%);\r\n  left: ${(props) => props.posx}px;\r\n  top: ${(props) => props.posy}px;\r\n  @media all and (max-width: 640px) {\r\n    width: 80%;\r\n    max-width: 400px;\r\n    left: 50%;\r\n    transform: translate(-50%, -100%);\r\n  }\r\n`;\r\nfunction ModifyModal({ puid, pimg, onFinished, posx, posy }) {\r\n  const [radioValue, setradioValue] = useState();\r\n  const [radioValue2, setradioValue2] = useState();\r\n  const [ProdItem, setProdItem] = useState([]);\r\n\r\n  const [Soldout, setSoldout] = useState();\r\n  const SoldoutToggle = () => {\r\n    setSoldout(!Soldout);\r\n  };\r\n\r\n  const [Hidden, setHidden] = useState();\r\n  function onChange4(e) {\r\n    setHidden(e.target.checked);\r\n  }    \r\n\r\n  const [GuestHidden, setGuestHidden] = useState();\r\n  function onChange5(e) {\r\n    setGuestHidden(e.target.checked);\r\n  } \r\n\r\n  const [AddCheck, setAddCheck] = useState();\r\n  function onChange(checkedValues) {\r\n    setAddCheck(checkedValues);\r\n  }\r\n  const [MilkCheck, setMilkCheck] = useState();\r\n  function onChange2(checkedValues) {\r\n    setMilkCheck(checkedValues);\r\n  }  \r\n\r\n\r\n  const [saleTimeState, setSaleTimeState] = useState()\r\n  const [saleTimeState2, setSaleTimeState2] = useState()\r\n  \r\n  useEffect(() => {\r\n    firebase\r\n      .database()\r\n      .ref(\"products\")\r\n      .child(puid)\r\n      .on(\"value\", snapshot=>{\r\n        setProdItem(snapshot.val());\r\n        setradioValue(snapshot.val().category);\r\n        setradioValue2(snapshot.val().hot);\r\n        setSoldout(snapshot.val().soldout);\r\n        setHidden(snapshot.val().hidden);\r\n        setGuestHidden(snapshot.val().guest_hidden);\r\n        setMilkCheck(snapshot.val().milk)\r\n        setAddCheck(snapshot.val().add);\r\n        if(snapshot.val().time_sale){\r\n          snapshot.val().time_sale[0] && setSaleTimeState(snapshot.val().time_sale[0])\r\n          snapshot.val().time_sale[1] && setSaleTimeState2(snapshot.val().time_sale[1])\r\n        }\r\n      })\r\n    return () => {\r\n      firebase\r\n      .database()\r\n      .ref(\"products\")\r\n      .child(puid)\r\n      .off()\r\n    }\r\n  }, [puid]);\r\n\r\n\r\n  //판매시간\r\n  const [saleTime, setSaleTime] = useState()\r\n  const [saleTime2, setSaleTime2] = useState()\r\n  const onSaleTime = (time,timestring) => {\r\n    setSaleTime(timestring)\r\n  }\r\n  const onSaleTime2 = (time,timestring) => {\r\n    setSaleTime2(timestring)\r\n  }  \r\n\r\n  const onSubmitProd2 = async (e) => {\r\n    e.preventDefault();    \r\n    let time_sale = [];\r\n    if(saleTime?.join('')) time_sale.push(saleTime);\r\n    if(saleTime2?.join('')) time_sale.push(saleTime2);\r\n    let values = {\r\n      name: e.target.name.value,\r\n      option: e.target.option.value,\r\n      price: e.target.price.value,\r\n      kal: e.target.kal.value,\r\n      category: e.target.category.value,\r\n      hot: e.target.hot.value,\r\n      limit: e.target.limit.value,\r\n      add: AddCheck ? AddCheck : null,\r\n      milk: MilkCheck ? MilkCheck : null,\r\n      limit: LimitCheck ? LimitCheck : false,\r\n      sort_num: e.target.sort_num.value\r\n        ? parseInt(e.target.sort_num.value)\r\n        : 9999,\r\n      soldout: Soldout ? Soldout : false,\r\n      hidden: Hidden ? Hidden : false,\r\n      guest_hidden: GuestHidden ? GuestHidden : false,\r\n      time_sale: time_sale.length > 0 ? time_sale : null\r\n    };\r\n    if (isNaN(values.price)) {\r\n      alert(\"가격은 숫자만 입력해 주세요\");\r\n      return;\r\n    }\r\n    if (ImgFile2) {\r\n      var file = ImgFile2;\r\n      var metadata = ImgFile2.type;\r\n    }\r\n    try {\r\n      if (ImgFile2) {\r\n        let uploadTaskSnapshot = await firebase\r\n          .storage()\r\n          .ref(\"products\")\r\n          .child(`prod_image/${uuid()}`)\r\n          .put(file, metadata);\r\n        let downloadURL = await uploadTaskSnapshot.ref.getDownloadURL();\r\n        await firebase\r\n          .database()\r\n          .ref(\"products\")\r\n          .child(puid)\r\n          .update({\r\n            ...values,\r\n            image: downloadURL,\r\n          });\r\n      } else {\r\n        let downloadURL = pimg;\r\n        await firebase\r\n          .database()\r\n          .ref(\"products\")\r\n          .child(puid)\r\n          .update({\r\n            ...values,\r\n            image: downloadURL,\r\n          });\r\n      }\r\n      alert(\"상품을 수정했습니다.\");\r\n      onFinished();\r\n    } catch (error) {\r\n      alert(error);\r\n    }\r\n  };\r\n\r\n  const [ImgFile2, setImgFile2] = useState();\r\n  const [ProdImg2, setProdImg2] = useState();\r\n  const handleChange2 = (e) => {\r\n    setImgFile2(e.target.files[0]);\r\n    let reader = new FileReader();\r\n    reader.onload = function (event) {\r\n      setProdImg2(event.target.result);\r\n    };\r\n    reader.readAsDataURL(e.target.files[0]);\r\n    setProdImg2(e.target.files[0]);\r\n  };\r\n\r\n  const radioChange = (e) => {\r\n    setradioValue(e.target.value);\r\n  };\r\n  const radioChange2 = (e) => {\r\n    setradioValue2(e.target.value);\r\n  };\r\n\r\n\r\n  const [LimitCheck, setLimitCheck] = useState();\r\n  function onChange3(e) {\r\n    setLimitCheck(e.target.checked);\r\n  }  \r\n\r\n  const onCancel = () => {\r\n    onFinished();\r\n  };\r\n  if (ProdItem) {\r\n    return (\r\n      <>        \r\n        <ModalPopup posx={posx} posy={posy}>\r\n          <form className=\"admin-modify-form\" onSubmit={onSubmitProd2}>\r\n            <div className=\"input-box\">\r\n              <input\r\n                style={{ display: \"none\" }}\r\n                type=\"file\"\r\n                id=\"imgFile2\"\r\n                onChange={handleChange2}\r\n              />\r\n              <FileLabel2 htmlFor=\"imgFile2\" style={{ marginRight: \"5px\" }}>\r\n                {ProdImg2 && <img src={`${ProdImg2}`} alt=\"\" />}\r\n                {!ProdImg2 && <img src={`${ProdItem.image}`} alt=\"\" />}\r\n              </FileLabel2>\r\n            </div>\r\n            <div className=\"input-box\">\r\n              <input\r\n                type=\"radio\"\r\n                id=\"hot1\"\r\n                name=\"hot\"\r\n                value=\"hot & ice\"\r\n                checked={radioValue2 === \"hot & ice\"}\r\n                onChange={radioChange2}\r\n              />\r\n              <label htmlFor=\"hot1\">hot & ice</label>\r\n              <input\r\n                type=\"radio\"\r\n                id=\"hot2\"\r\n                name=\"hot\"\r\n                value=\"hot only\"\r\n                checked={radioValue2 === \"hot only\"}\r\n                onChange={radioChange2}\r\n              />\r\n              <label htmlFor=\"hot2\">hot only</label>\r\n              <input\r\n                type=\"radio\"\r\n                id=\"hot3\"\r\n                name=\"hot\"\r\n                value=\"ice only\"\r\n                checked={radioValue2 === \"ice only\"}\r\n                onChange={radioChange2}\r\n              />\r\n              <label htmlFor=\"hot3\">ice only</label>\r\n              <input\r\n                type=\"radio\"\r\n                id=\"hot4\"\r\n                name=\"hot\"\r\n                value=\"etc\"\r\n                checked={radioValue2 === \"etc\"}\r\n                onChange={radioChange2}\r\n              />\r\n              <label htmlFor=\"hot4\">etc</label>\r\n            </div>\r\n            <div className=\"input-box\">\r\n              <input\r\n                type=\"radio\"\r\n                id=\"cate1\"\r\n                name=\"category\"\r\n                value=\"커피\"\r\n                checked={radioValue === \"커피\"}\r\n                onChange={radioChange}\r\n              />\r\n              <label htmlFor=\"cate1\">커피</label>\r\n              <input\r\n                type=\"radio\"\r\n                id=\"cate2\"\r\n                name=\"category\"\r\n                value=\"라떼\"\r\n                checked={radioValue === \"라떼\"}\r\n                onChange={radioChange}\r\n              />\r\n              <label htmlFor=\"cate2\">라떼</label>\r\n              <input\r\n                type=\"radio\"\r\n                id=\"cate3\"\r\n                name=\"category\"\r\n                value=\"에이드\"\r\n                checked={radioValue === \"에이드\"}\r\n                onChange={radioChange}\r\n              />\r\n              <label htmlFor=\"cate3\">에이드</label>\r\n              <input\r\n                type=\"radio\"\r\n                id=\"cate4\"\r\n                name=\"category\"\r\n                value=\"차\"\r\n                checked={radioValue === \"차\"}\r\n                onChange={radioChange}\r\n              />\r\n              <label htmlFor=\"cate4\">차</label>\r\n              <input\r\n                type=\"radio\"\r\n                id=\"cate5\"\r\n                name=\"category\"\r\n                value=\"프로틴\"\r\n                checked={radioValue === \"프로틴\"}\r\n                onChange={radioChange}\r\n              />\r\n              <label htmlFor=\"cate5\">에이드</label>\r\n              <input\r\n                type=\"radio\"\r\n                id=\"cate6\"\r\n                name=\"category\"\r\n                value=\"스낵\"\r\n                checked={radioValue === \"스낵\"}\r\n                onChange={radioChange}\r\n              />\r\n              <label htmlFor=\"cate6\">스낵</label>\r\n              <input\r\n                type=\"radio\"\r\n                id=\"cate7\"\r\n                name=\"category\"\r\n                value=\"셀프\"\r\n                checked={radioValue === \"셀프\"}\r\n                onChange={radioChange}\r\n              />\r\n              <label htmlFor=\"cate7\">셀프</label>\r\n            </div>\r\n            <div className=\"input-box\">\r\n              <label className=\"tit\" htmlFor=\"_name\">\r\n                이름\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"_name\"\r\n                name=\"name\"\r\n                defaultValue={ProdItem.name}\r\n              />\r\n            </div>\r\n            <div className=\"input-box\">\r\n              <label className=\"tit\" htmlFor=\"_option\">\r\n                옵션\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"_option\"\r\n                name=\"option\"\r\n                defaultValue={ProdItem.option}\r\n              />\r\n            </div>\r\n            <div className=\"input-box\">\r\n              <label className=\"tit\" htmlFor=\"_price\">\r\n                가격\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"_price\"\r\n                name=\"price\"\r\n                defaultValue={ProdItem.price}\r\n              />\r\n            </div>\r\n            <div className=\"input-box\">\r\n              <label className=\"tit\" htmlFor=\"_kal\">\r\n                칼로리\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"_kal\"\r\n                name=\"kal\"\r\n                defaultValue={ProdItem.kal}\r\n              />\r\n            </div>\r\n            <div className=\"input-box\">\r\n              <label className=\"tit\" htmlFor=\"_sort_num\">\r\n                순서\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"_sort_num\"\r\n                name=\"sort_num\"\r\n                defaultValue={ProdItem.sort_num ? ProdItem.sort_num : \"\"}\r\n              />\r\n            </div>\r\n            <div className=\"input-box\">\r\n              <Checkbox\r\n                id=\"_limit\"\r\n                name=\"limit\"\r\n                onChange={onChange3}\r\n                value={LimitCheck}\r\n                style={{marginRight:\"8px\"}}\r\n              />\r\n              <label className=\"tit\" htmlFor=\"_limit\">\r\n                제한\r\n              </label>\r\n              <Checkbox\r\n                id=\"hidden\"\r\n                name=\"hidden\"\r\n                onChange={onChange4}\r\n                checked={Hidden ? true : false}\r\n                style={{marginRight:\"8px\"}}\r\n              />\r\n              <label className=\"tit\" htmlFor=\"hidden\">\r\n                숨김\r\n              </label>\r\n              <Checkbox\r\n                id=\"guest_hidden\"\r\n                name=\"guest_hidden\"\r\n                onChange={onChange5}\r\n                checked={GuestHidden ? true : false}\r\n                style={{marginRight:\"8px\"}}\r\n              />\r\n              <label className=\"tit\" htmlFor=\"guest_hidden\" style={{width:\"auto\"}}>\r\n                손님제외\r\n              </label>\r\n              \r\n            </div>\r\n            <Checkbox.Group onChange={onChange} value={AddCheck}>\r\n              {/* <Checkbox value=\"버블\" style={{ lineHeight: \"32px\" }}>\r\n                버블\r\n              </Checkbox> */}\r\n              <Checkbox value=\"샷\" style={{ lineHeight: \"32px\" }}>\r\n                샷\r\n              </Checkbox>\r\n              <Checkbox value=\"연하게\" style={{ lineHeight: \"32px\" }}>\r\n                연하게\r\n              </Checkbox>\r\n            </Checkbox.Group>\r\n            <Checkbox.Group onChange={onChange2} value={MilkCheck}>\r\n              <Checkbox value=\"우유\" style={{ lineHeight: \"32px\" }}>\r\n                우유\r\n              </Checkbox>\r\n            </Checkbox.Group>\r\n            <div style={{marginBottom:\"7px\"}}>\r\n              {saleTimeState &&\r\n                <TimePicker.RangePicker style={{marginBottom:\"5px\"}} defaultValue={[\r\n                  moment(`${saleTimeState[0]}`, 'HH:mm:ss'),\r\n                  moment(`${saleTimeState[1]}`, 'HH:mm:ss')\r\n                ]} onChange={onSaleTime} placeholder={['주문시작','주문종료']} />                  \r\n              }\r\n              {saleTimeState2 &&\r\n                <TimePicker.RangePicker style={{marginBottom:\"5px\"}} defaultValue={[\r\n                  moment(`${saleTimeState2[0]}`, 'HH:mm:ss'),\r\n                  moment(`${saleTimeState2[1]}`, 'HH:mm:ss')\r\n                ]} onChange={onSaleTime2} placeholder={['주문시작','주문종료']} />                  \r\n              }\r\n\r\n              {!saleTimeState &&\r\n                <>\r\n                  <TimePicker.RangePicker style={{marginBottom:\"5px\"}} onChange={onSaleTime} placeholder={['주문시작','주문종료']} />\r\n                </>\r\n              }\r\n              {!saleTimeState2 &&\r\n                <>\r\n                  <TimePicker.RangePicker onChange={onSaleTime2} placeholder={['주문시작','주문종료']} />\r\n                </>\r\n              }\r\n\r\n            </div>\r\n            {(Soldout === true || Soldout === \"\") && (\r\n              <Switch\r\n                style={{ width: \"60px\" }}\r\n                onChange={SoldoutToggle}\r\n                checkedChildren=\"판매\"\r\n                unCheckedChildren=\"품절\"\r\n                defaultChecked\r\n              />\r\n            )}\r\n            {!Soldout && (\r\n              <Switch\r\n                style={{ width: \"60px\" }}\r\n                onChange={SoldoutToggle}\r\n                checkedChildren=\"판매\"\r\n                unCheckedChildren=\"품절\"\r\n              />\r\n            )}\r\n            <div className=\"btn-box\">\r\n              <Button\r\n                htmlType=\"submit\"\r\n                type=\"primary\"\r\n                style={{ marginRight: \"7px\" }}\r\n              >\r\n                수정하기\r\n              </Button>\r\n              <Button onClick={onCancel} type=\"default\">\r\n                취소\r\n              </Button>\r\n            </div>\r\n          </form>\r\n        </ModalPopup>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ModifyModal;\r\n","D:\\프로젝트\\sy-cafe-order\\src\\redux\\actions\\types.js",[],"D:\\프로젝트\\sy-cafe-order\\src\\component\\Admin\\ImgUpload.js",[],"D:\\프로젝트\\sy-cafe-order\\src\\component\\Signature.js",["523","524"],"import React, { useState, useEffect } from \"react\";\r\nimport SignaturePad from \"signature_pad\";\r\nimport {Button} from \"antd\";\r\nimport * as antIcon from \"react-icons/ai\";\r\n\r\nlet sigPad = null;\r\nfunction Signature({onSigpad}) {\r\n\r\n  useEffect(() => {\r\n    let canvas  = document.getElementById(\"signature-pad\");\r\n    sigPad = new SignaturePad(canvas, {\r\n      backgroundColor: \"rgb(255, 255, 255)\",\r\n      onEnd: () => {\r\n        onSigpad(sigPad.toDataURL(\"image/svg+xml\")); \r\n      }\r\n    });\r\n\r\n    function resizeCanvas() {\r\n      let ratio =  Math.max(window.devicePixelRatio || 1, 1);\r\n      canvas.width = canvas.offsetWidth * ratio;\r\n      canvas.height = canvas.offsetHeight * ratio;\r\n      canvas.getContext(\"2d\").scale(ratio, ratio);\r\n      sigPad.clear();\r\n  }\r\n  \r\n  window.onresize = resizeCanvas;\r\n  resizeCanvas();\r\n\r\n    \r\n    return () => {};\r\n  }, []);  \r\n  const handleRestSignature = () => {\r\n    sigPad.clear();\r\n    onSigpad();\r\n  };\r\n\r\n\r\n  return (\r\n    <>\r\n      <div className=\"signature-box\">\r\n        <canvas\r\n          id=\"signature-pad\"\r\n          className=\"signature-pad\"\r\n        />\r\n        <Button className=\"clear\" onClick={handleRestSignature}>\r\n          <antIcon.AiOutlineDelete />\r\n          clear\r\n        </Button>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Signature\r\n","D:\\프로젝트\\sy-cafe-order\\src\\component\\inven\\useInvenKakaoTel.js",["525"],"import { useEffect, useState } from \"react\";\r\nimport firebase from \"../../firebase\";\r\n\r\nconst useInvenKakaoTel = () => {\r\n  const db = firebase.database();\r\n  const [alertTelArr, setAlertTelArr] = useState(undefined);\r\n  const [alertTelTxt, setAlertTelTxt] = useState(undefined);\r\n\r\n  useEffect(() => {\r\n    db.ref(\"inventory/alert_tel\").on(\"value\", (data) => {\r\n      if (!data.val()) return;\r\n      setAlertTelArr(data.val());\r\n      setAlertTelTxt(data.val().join());\r\n    });\r\n    return () => {\r\n      db.ref(\"inventory/alert_tel\").off();\r\n    };\r\n  }, []);\r\n\r\n  return { alertTelArr, alertTelTxt };\r\n};\r\n\r\nexport default useInvenKakaoTel;\r\n","D:\\프로젝트\\sy-cafe-order\\src\\component\\Admin\\inventory\\InvenTelAdmin.js",["526"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport { Button, Input, message, Switch } from \"antd\";\r\nimport useInvenKakaoTel from \"../../inven/useInvenKakaoTel\";\r\nimport firebase from \"../../../firebase\";\r\n\r\nfunction InvenTelAdmin() {\r\n  const db = firebase.database();\r\n  const inputTel = useRef();\r\n\r\n  const { alertTelTxt } = useInvenKakaoTel();\r\n\r\n  const [kakaoTel, setkakaoTel] = useState(false);\r\n  const kakaoTelToggle = () => {\r\n    setkakaoTel(!kakaoTel);\r\n  };\r\n\r\n  const onSubmit = () => {\r\n    let tel = inputTel.current.state.value;\r\n    tel = tel.split(\",\");\r\n    db.ref(\"inventory/alert_tel\")\r\n      .set({\r\n        ...tel,\r\n      })\r\n      .then(() => {\r\n        message.success(\"업데이트 되었습니다.\");\r\n      });\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"flex-box a-center\" style={{ marginBottom: \"10px\" }}>\r\n        <h3 className=\"title\" style={{ margin: \"0 10px 0 0\" }}>\r\n          알림톡 수신번호 등록\r\n        </h3>\r\n        <Switch\r\n          onChange={kakaoTelToggle}\r\n          checkedChildren=\"on\"\r\n          unCheckedChildren=\"off\"\r\n        />\r\n      </div>\r\n      {kakaoTel && (\r\n        <>\r\n          <Input.Group compact>\r\n            <Input\r\n              ref={inputTel}\r\n              style={{ width: \"calc(100% - 75px)\" }}\r\n              defaultValue={alertTelTxt}\r\n            />\r\n            <Button type=\"primary\" onClick={onSubmit}>\r\n              Submit\r\n            </Button>\r\n          </Input.Group>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default InvenTelAdmin;\r\n","D:\\프로젝트\\sy-cafe-order\\src\\component\\Admin\\option\\LastOrderTime.js",[],"D:\\프로젝트\\sy-cafe-order\\src\\component\\welfare\\chair\\ReservList.js",[],"D:\\프로젝트\\sy-cafe-order\\src\\component\\Admin\\inventory\\AdminModifyModal.js",[],"D:\\프로젝트\\sy-cafe-order\\src\\component\\PartSelect.js",["527"],"import { useEffect, useState, useRef } from \"react\";\r\nimport firebase from \"../firebase\";\r\n\r\nexport default function PartSelect({ userPart }) {\r\n  const [partSelect, setPartSelect] = useState();\r\n  const partRef = useRef();\r\n  useEffect(() => {\r\n    firebase\r\n      .database()\r\n      .ref(`part_setting`)\r\n      .on(\"value\", (snapshot) => {\r\n        setPartSelect(snapshot.val());\r\n      });\r\n    return () => {\r\n      firebase.database().ref(\"part_setting\").off();\r\n    };\r\n  }, []);\r\n  useEffect(() => {\r\n    partRef.current.value = userPart;\r\n  }, [partSelect]);\r\n\r\n  return (\r\n    <>\r\n      <select name=\"part\" ref={partRef} defaultValue={\"총괄\"}>\r\n        <option value=\"photoUrl\" disabled hidden>\r\n          부서\r\n        </option>\r\n        {partSelect &&\r\n          partSelect.map((el, idx) => (\r\n            <option key={idx} value={el}>\r\n              {el}\r\n            </option>\r\n          ))}\r\n      </select>\r\n    </>\r\n  );\r\n}\r\n","D:\\프로젝트\\sy-cafe-order\\src\\firebaseConfig.js",[],"D:\\프로젝트\\sy-cafe-order\\src\\component\\First.js",["528"],"import { Button } from \"antd\";\r\nimport React from \"react\";\r\n\r\nexport default function First() {\r\n  return (\r\n    <>\r\n      <div className=\"first_box\">\r\n        <p></p>\r\n        <div className=\"btn_box\">\r\n          <button>로그인</button>\r\n          <button>회원가입</button>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n",{"ruleId":"529","replacedBy":"530"},{"ruleId":"531","replacedBy":"532"},{"ruleId":"533","severity":1,"message":"534","line":2,"column":17,"nodeType":"535","messageId":"536","endLine":2,"endColumn":23},{"ruleId":"533","severity":1,"message":"537","line":46,"column":9,"nodeType":"535","messageId":"536","endLine":46,"endColumn":17},{"ruleId":"538","severity":1,"message":"539","line":92,"column":6,"nodeType":"540","endLine":92,"endColumn":8,"suggestions":"541"},{"ruleId":"533","severity":1,"message":"542","line":1,"column":10,"nodeType":"535","messageId":"536","endLine":1,"endColumn":17},{"ruleId":"533","severity":1,"message":"543","line":65,"column":10,"nodeType":"535","messageId":"536","endLine":65,"endColumn":20},{"ruleId":"533","severity":1,"message":"544","line":79,"column":9,"nodeType":"535","messageId":"536","endLine":79,"endColumn":21},{"ruleId":"545","severity":1,"message":"546","line":97,"column":24,"nodeType":"547","messageId":"548","endLine":97,"endColumn":26},{"ruleId":"545","severity":1,"message":"546","line":247,"column":23,"nodeType":"547","messageId":"548","endLine":247,"endColumn":25},{"ruleId":"538","severity":1,"message":"549","line":143,"column":6,"nodeType":"540","endLine":143,"endColumn":19,"suggestions":"550"},{"ruleId":"538","severity":1,"message":"551","line":156,"column":25,"nodeType":"552","endLine":156,"endColumn":56},{"ruleId":"538","severity":1,"message":"553","line":157,"column":25,"nodeType":"552","endLine":157,"endColumn":58},{"ruleId":"538","severity":1,"message":"554","line":158,"column":26,"nodeType":"552","endLine":158,"endColumn":60},{"ruleId":"555","severity":1,"message":"556","line":216,"column":35,"nodeType":"557","messageId":"558","endLine":216,"endColumn":37},{"ruleId":"538","severity":1,"message":"559","line":280,"column":6,"nodeType":"540","endLine":280,"endColumn":19,"suggestions":"560"},{"ruleId":"555","severity":1,"message":"556","line":357,"column":19,"nodeType":"557","messageId":"558","endLine":357,"endColumn":21},{"ruleId":"545","severity":1,"message":"546","line":404,"column":57,"nodeType":"547","messageId":"548","endLine":404,"endColumn":59},{"ruleId":"561","severity":1,"message":"562","line":116,"column":11,"nodeType":"563","endLine":120,"endColumn":12},{"ruleId":"564","severity":1,"message":"565","line":117,"column":18,"nodeType":"566","messageId":"567","endLine":117,"endColumn":32},{"ruleId":"538","severity":1,"message":"568","line":69,"column":6,"nodeType":"540","endLine":69,"endColumn":16,"suggestions":"569"},{"ruleId":"570","severity":1,"message":"571","line":136,"column":19,"nodeType":"563","endLine":136,"endColumn":46},{"ruleId":"533","severity":1,"message":"572","line":3,"column":10,"nodeType":"535","messageId":"536","endLine":3,"endColumn":19},{"ruleId":"533","severity":1,"message":"573","line":32,"column":7,"nodeType":"535","messageId":"536","endLine":32,"endColumn":15},{"ruleId":"533","severity":1,"message":"574","line":37,"column":5,"nodeType":"535","messageId":"536","endLine":37,"endColumn":9},{"ruleId":"533","severity":1,"message":"575","line":38,"column":5,"nodeType":"535","messageId":"536","endLine":38,"endColumn":10},{"ruleId":"533","severity":1,"message":"576","line":39,"column":5,"nodeType":"535","messageId":"536","endLine":39,"endColumn":13},{"ruleId":"533","severity":1,"message":"577","line":40,"column":5,"nodeType":"535","messageId":"536","endLine":40,"endColumn":18},{"ruleId":"533","severity":1,"message":"578","line":41,"column":5,"nodeType":"535","messageId":"536","endLine":41,"endColumn":8},{"ruleId":"545","severity":1,"message":"546","line":133,"column":26,"nodeType":"547","messageId":"548","endLine":133,"endColumn":28},{"ruleId":"545","severity":1,"message":"546","line":133,"column":49,"nodeType":"547","messageId":"548","endLine":133,"endColumn":51},{"ruleId":"538","severity":1,"message":"579","line":143,"column":6,"nodeType":"540","endLine":143,"endColumn":18,"suggestions":"580"},{"ruleId":"545","severity":1,"message":"581","line":162,"column":25,"nodeType":"547","messageId":"548","endLine":162,"endColumn":27},{"ruleId":"582","severity":1,"message":"583","line":428,"column":42,"nodeType":"547","messageId":"584","endLine":428,"endColumn":43},{"ruleId":"533","severity":1,"message":"585","line":10,"column":7,"nodeType":"535","messageId":"536","endLine":10,"endColumn":14},{"ruleId":"533","severity":1,"message":"586","line":35,"column":10,"nodeType":"535","messageId":"536","endLine":35,"endColumn":25},{"ruleId":"533","severity":1,"message":"587","line":35,"column":27,"nodeType":"535","messageId":"536","endLine":35,"endColumn":45},{"ruleId":"538","severity":1,"message":"551","line":48,"column":25,"nodeType":"552","endLine":48,"endColumn":56},{"ruleId":"538","severity":1,"message":"553","line":49,"column":25,"nodeType":"552","endLine":49,"endColumn":58},{"ruleId":"538","severity":1,"message":"554","line":50,"column":26,"nodeType":"552","endLine":50,"endColumn":60},{"ruleId":"555","severity":1,"message":"556","line":107,"column":26,"nodeType":"557","messageId":"558","endLine":107,"endColumn":28},{"ruleId":"555","severity":1,"message":"556","line":108,"column":30,"nodeType":"557","messageId":"558","endLine":108,"endColumn":32},{"ruleId":"555","severity":1,"message":"556","line":176,"column":32,"nodeType":"557","messageId":"558","endLine":176,"endColumn":34},{"ruleId":"533","severity":1,"message":"588","line":6,"column":13,"nodeType":"535","messageId":"536","endLine":6,"endColumn":20},{"ruleId":"555","severity":1,"message":"589","line":27,"column":38,"nodeType":"557","messageId":"590","endLine":27,"endColumn":40},{"ruleId":"555","severity":1,"message":"589","line":43,"column":40,"nodeType":"557","messageId":"590","endLine":43,"endColumn":42},{"ruleId":"545","severity":1,"message":"546","line":56,"column":9,"nodeType":"547","messageId":"548","endLine":56,"endColumn":11},{"ruleId":"533","severity":1,"message":"591","line":75,"column":10,"nodeType":"535","messageId":"536","endLine":75,"endColumn":18},{"ruleId":"555","severity":1,"message":"556","line":108,"column":34,"nodeType":"557","messageId":"558","endLine":108,"endColumn":36},{"ruleId":"555","severity":1,"message":"556","line":109,"column":30,"nodeType":"557","messageId":"558","endLine":109,"endColumn":32},{"ruleId":"545","severity":1,"message":"546","line":110,"column":24,"nodeType":"547","messageId":"548","endLine":110,"endColumn":26},{"ruleId":"555","severity":1,"message":"556","line":116,"column":33,"nodeType":"557","messageId":"558","endLine":116,"endColumn":35},{"ruleId":"555","severity":1,"message":"556","line":117,"column":30,"nodeType":"557","messageId":"558","endLine":117,"endColumn":32},{"ruleId":"545","severity":1,"message":"546","line":118,"column":24,"nodeType":"547","messageId":"548","endLine":118,"endColumn":26},{"ruleId":"555","severity":1,"message":"556","line":125,"column":34,"nodeType":"557","messageId":"558","endLine":125,"endColumn":36},{"ruleId":"555","severity":1,"message":"556","line":126,"column":30,"nodeType":"557","messageId":"558","endLine":126,"endColumn":32},{"ruleId":"545","severity":1,"message":"546","line":127,"column":24,"nodeType":"547","messageId":"548","endLine":127,"endColumn":26},{"ruleId":"538","severity":1,"message":"592","line":147,"column":6,"nodeType":"540","endLine":147,"endColumn":8,"suggestions":"593"},{"ruleId":"555","severity":1,"message":"556","line":171,"column":17,"nodeType":"557","messageId":"558","endLine":171,"endColumn":19},{"ruleId":"545","severity":1,"message":"581","line":230,"column":28,"nodeType":"547","messageId":"548","endLine":230,"endColumn":30},{"ruleId":"545","severity":1,"message":"546","line":242,"column":49,"nodeType":"547","messageId":"548","endLine":242,"endColumn":51},{"ruleId":"545","severity":1,"message":"546","line":242,"column":78,"nodeType":"547","messageId":"548","endLine":242,"endColumn":80},{"ruleId":"545","severity":1,"message":"546","line":256,"column":64,"nodeType":"547","messageId":"548","endLine":256,"endColumn":66},{"ruleId":"545","severity":1,"message":"581","line":269,"column":24,"nodeType":"547","messageId":"548","endLine":269,"endColumn":26},{"ruleId":"545","severity":1,"message":"546","line":274,"column":24,"nodeType":"547","messageId":"548","endLine":274,"endColumn":26},{"ruleId":"545","severity":1,"message":"546","line":291,"column":51,"nodeType":"547","messageId":"548","endLine":291,"endColumn":53},{"ruleId":"545","severity":1,"message":"546","line":291,"column":80,"nodeType":"547","messageId":"548","endLine":291,"endColumn":82},{"ruleId":"545","severity":1,"message":"546","line":296,"column":37,"nodeType":"547","messageId":"548","endLine":296,"endColumn":39},{"ruleId":"545","severity":1,"message":"581","line":321,"column":26,"nodeType":"547","messageId":"548","endLine":321,"endColumn":28},{"ruleId":"545","severity":1,"message":"546","line":333,"column":49,"nodeType":"547","messageId":"548","endLine":333,"endColumn":51},{"ruleId":"545","severity":1,"message":"546","line":333,"column":78,"nodeType":"547","messageId":"548","endLine":333,"endColumn":80},{"ruleId":"570","severity":1,"message":"571","line":359,"column":15,"nodeType":"563","endLine":359,"endColumn":45},{"ruleId":"533","severity":1,"message":"594","line":1,"column":17,"nodeType":"535","messageId":"536","endLine":1,"endColumn":25},{"ruleId":"533","severity":1,"message":"595","line":7,"column":9,"nodeType":"535","messageId":"536","endLine":7,"endColumn":21},{"ruleId":"533","severity":1,"message":"596","line":8,"column":8,"nodeType":"535","messageId":"536","endLine":8,"endColumn":13},{"ruleId":"538","severity":1,"message":"597","line":241,"column":6,"nodeType":"540","endLine":241,"endColumn":18,"suggestions":"598"},{"ruleId":"533","severity":1,"message":"599","line":1,"column":10,"nodeType":"535","messageId":"536","endLine":1,"endColumn":19},{"ruleId":"533","severity":1,"message":"594","line":1,"column":21,"nodeType":"535","messageId":"536","endLine":1,"endColumn":29},{"ruleId":"538","severity":1,"message":"600","line":11,"column":14,"nodeType":"601","endLine":11,"endColumn":39},{"ruleId":"545","severity":1,"message":"546","line":38,"column":32,"nodeType":"547","messageId":"548","endLine":38,"endColumn":34},{"ruleId":"545","severity":1,"message":"546","line":39,"column":32,"nodeType":"547","messageId":"548","endLine":39,"endColumn":34},{"ruleId":"570","severity":1,"message":"571","line":57,"column":13,"nodeType":"563","endLine":60,"endColumn":15},{"ruleId":"533","severity":1,"message":"602","line":3,"column":32,"nodeType":"535","messageId":"536","endLine":3,"endColumn":36},{"ruleId":"533","severity":1,"message":"603","line":98,"column":22,"nodeType":"535","messageId":"536","endLine":98,"endColumn":35},{"ruleId":"533","severity":1,"message":"604","line":106,"column":9,"nodeType":"535","messageId":"536","endLine":106,"endColumn":19},{"ruleId":"545","severity":1,"message":"546","line":118,"column":19,"nodeType":"547","messageId":"548","endLine":118,"endColumn":21},{"ruleId":"545","severity":1,"message":"546","line":119,"column":33,"nodeType":"547","messageId":"548","endLine":119,"endColumn":35},{"ruleId":"533","severity":1,"message":"605","line":12,"column":14,"nodeType":"535","messageId":"536","endLine":12,"endColumn":25},{"ruleId":"533","severity":1,"message":"606","line":19,"column":8,"nodeType":"535","messageId":"536","endLine":19,"endColumn":21},{"ruleId":"533","severity":1,"message":"607","line":174,"column":9,"nodeType":"535","messageId":"536","endLine":174,"endColumn":22},{"ruleId":"608","severity":1,"message":"609","line":313,"column":48,"nodeType":"610","messageId":"611","endLine":313,"endColumn":63},{"ruleId":"533","severity":1,"message":"612","line":9,"column":3,"nodeType":"535","messageId":"536","endLine":9,"endColumn":13},{"ruleId":"533","severity":1,"message":"613","line":16,"column":8,"nodeType":"535","messageId":"536","endLine":16,"endColumn":13},{"ruleId":"533","severity":1,"message":"614","line":17,"column":8,"nodeType":"535","messageId":"536","endLine":17,"endColumn":12},{"ruleId":"533","severity":1,"message":"615","line":31,"column":10,"nodeType":"535","messageId":"536","endLine":31,"endColumn":15},{"ruleId":"533","severity":1,"message":"616","line":31,"column":17,"nodeType":"535","messageId":"536","endLine":31,"endColumn":25},{"ruleId":"545","severity":1,"message":"546","line":45,"column":14,"nodeType":"547","messageId":"548","endLine":45,"endColumn":16},{"ruleId":"545","severity":1,"message":"546","line":60,"column":29,"nodeType":"547","messageId":"548","endLine":60,"endColumn":31},{"ruleId":"555","severity":1,"message":"556","line":78,"column":30,"nodeType":"557","messageId":"558","endLine":78,"endColumn":32},{"ruleId":"555","severity":1,"message":"556","line":105,"column":36,"nodeType":"557","messageId":"558","endLine":105,"endColumn":38},{"ruleId":"533","severity":1,"message":"617","line":120,"column":21,"nodeType":"535","messageId":"536","endLine":120,"endColumn":24},{"ruleId":"555","severity":1,"message":"556","line":122,"column":35,"nodeType":"557","messageId":"558","endLine":122,"endColumn":37},{"ruleId":"608","severity":1,"message":"618","line":125,"column":32,"nodeType":"535","messageId":"611","endLine":125,"endColumn":37},{"ruleId":"555","severity":1,"message":"556","line":140,"column":31,"nodeType":"557","messageId":"558","endLine":140,"endColumn":33},{"ruleId":"555","severity":1,"message":"556","line":142,"column":32,"nodeType":"557","messageId":"558","endLine":142,"endColumn":34},{"ruleId":"538","severity":1,"message":"619","line":158,"column":6,"nodeType":"540","endLine":158,"endColumn":26,"suggestions":"620"},{"ruleId":"555","severity":1,"message":"556","line":267,"column":23,"nodeType":"557","messageId":"558","endLine":267,"endColumn":25},{"ruleId":"545","severity":1,"message":"546","line":503,"column":47,"nodeType":"547","messageId":"548","endLine":503,"endColumn":49},{"ruleId":"545","severity":1,"message":"546","line":113,"column":14,"nodeType":"547","messageId":"548","endLine":113,"endColumn":16},{"ruleId":"545","severity":1,"message":"546","line":116,"column":14,"nodeType":"547","messageId":"548","endLine":116,"endColumn":16},{"ruleId":"545","severity":1,"message":"546","line":132,"column":16,"nodeType":"547","messageId":"548","endLine":132,"endColumn":18},{"ruleId":"545","severity":1,"message":"546","line":138,"column":16,"nodeType":"547","messageId":"548","endLine":138,"endColumn":18},{"ruleId":"545","severity":1,"message":"546","line":160,"column":29,"nodeType":"547","messageId":"548","endLine":160,"endColumn":31},{"ruleId":"545","severity":1,"message":"546","line":160,"column":53,"nodeType":"547","messageId":"548","endLine":160,"endColumn":55},{"ruleId":"538","severity":1,"message":"621","line":174,"column":6,"nodeType":"540","endLine":174,"endColumn":27,"suggestions":"622"},{"ruleId":"545","severity":1,"message":"546","line":337,"column":19,"nodeType":"547","messageId":"548","endLine":337,"endColumn":21},{"ruleId":"545","severity":1,"message":"546","line":340,"column":19,"nodeType":"547","messageId":"548","endLine":340,"endColumn":21},{"ruleId":"545","severity":1,"message":"546","line":343,"column":19,"nodeType":"547","messageId":"548","endLine":343,"endColumn":21},{"ruleId":"570","severity":1,"message":"571","line":385,"column":32,"nodeType":"563","endLine":385,"endColumn":74},{"ruleId":"545","severity":1,"message":"546","line":471,"column":27,"nodeType":"547","messageId":"548","endLine":471,"endColumn":29},{"ruleId":"545","severity":1,"message":"546","line":476,"column":27,"nodeType":"547","messageId":"548","endLine":476,"endColumn":29},{"ruleId":"545","severity":1,"message":"546","line":513,"column":27,"nodeType":"547","messageId":"548","endLine":513,"endColumn":29},{"ruleId":"545","severity":1,"message":"546","line":527,"column":27,"nodeType":"547","messageId":"548","endLine":527,"endColumn":29},{"ruleId":"538","severity":1,"message":"621","line":55,"column":6,"nodeType":"540","endLine":55,"endColumn":8,"suggestions":"623"},{"ruleId":"555","severity":1,"message":"556","line":73,"column":42,"nodeType":"557","messageId":"558","endLine":73,"endColumn":44},{"ruleId":"545","severity":1,"message":"581","line":142,"column":22,"nodeType":"547","messageId":"548","endLine":142,"endColumn":24},{"ruleId":"555","severity":1,"message":"556","line":146,"column":34,"nodeType":"557","messageId":"558","endLine":146,"endColumn":36},{"ruleId":"545","severity":1,"message":"546","line":154,"column":26,"nodeType":"547","messageId":"548","endLine":154,"endColumn":28},{"ruleId":"555","severity":1,"message":"556","line":159,"column":35,"nodeType":"557","messageId":"558","endLine":159,"endColumn":37},{"ruleId":"545","severity":1,"message":"546","line":180,"column":32,"nodeType":"547","messageId":"548","endLine":180,"endColumn":34},{"ruleId":"533","severity":1,"message":"624","line":232,"column":9,"nodeType":"535","messageId":"536","endLine":232,"endColumn":21},{"ruleId":"545","severity":1,"message":"546","line":264,"column":33,"nodeType":"547","messageId":"548","endLine":264,"endColumn":35},{"ruleId":"545","severity":1,"message":"546","line":290,"column":33,"nodeType":"547","messageId":"548","endLine":290,"endColumn":35},{"ruleId":"533","severity":1,"message":"625","line":7,"column":3,"nodeType":"535","messageId":"536","endLine":7,"endColumn":11},{"ruleId":"533","severity":1,"message":"626","line":8,"column":3,"nodeType":"535","messageId":"536","endLine":8,"endColumn":6},{"ruleId":"533","severity":1,"message":"627","line":21,"column":8,"nodeType":"535","messageId":"536","endLine":21,"endColumn":17},{"ruleId":"533","severity":1,"message":"628","line":23,"column":8,"nodeType":"535","messageId":"536","endLine":23,"endColumn":14},{"ruleId":"533","severity":1,"message":"629","line":29,"column":10,"nodeType":"535","messageId":"536","endLine":29,"endColumn":14},{"ruleId":"538","severity":1,"message":"630","line":145,"column":6,"nodeType":"540","endLine":145,"endColumn":14,"suggestions":"631"},{"ruleId":"538","severity":1,"message":"630","line":159,"column":6,"nodeType":"540","endLine":159,"endColumn":17,"suggestions":"632"},{"ruleId":"555","severity":1,"message":"556","line":187,"column":30,"nodeType":"557","messageId":"558","endLine":187,"endColumn":32},{"ruleId":"538","severity":1,"message":"633","line":201,"column":6,"nodeType":"540","endLine":201,"endColumn":18,"suggestions":"634"},{"ruleId":"538","severity":1,"message":"630","line":230,"column":6,"nodeType":"540","endLine":230,"endColumn":14,"suggestions":"635"},{"ruleId":"538","severity":1,"message":"630","line":268,"column":6,"nodeType":"540","endLine":268,"endColumn":27,"suggestions":"636"},{"ruleId":"555","severity":1,"message":"556","line":320,"column":28,"nodeType":"557","messageId":"558","endLine":320,"endColumn":30},{"ruleId":"538","severity":1,"message":"633","line":337,"column":6,"nodeType":"540","endLine":337,"endColumn":14,"suggestions":"637"},{"ruleId":"545","severity":1,"message":"546","line":373,"column":17,"nodeType":"547","messageId":"548","endLine":373,"endColumn":19},{"ruleId":"545","severity":1,"message":"546","line":425,"column":17,"nodeType":"547","messageId":"548","endLine":425,"endColumn":19},{"ruleId":"570","severity":1,"message":"571","line":455,"column":16,"nodeType":"563","endLine":455,"endColumn":64},{"ruleId":"545","severity":1,"message":"581","line":748,"column":18,"nodeType":"547","messageId":"548","endLine":748,"endColumn":20},{"ruleId":"555","severity":1,"message":"556","line":67,"column":21,"nodeType":"557","messageId":"558","endLine":67,"endColumn":23},{"ruleId":"555","severity":1,"message":"556","line":68,"column":28,"nodeType":"557","messageId":"558","endLine":68,"endColumn":30},{"ruleId":"545","severity":1,"message":"546","line":69,"column":22,"nodeType":"547","messageId":"548","endLine":69,"endColumn":24},{"ruleId":"545","severity":1,"message":"546","line":69,"column":46,"nodeType":"547","messageId":"548","endLine":69,"endColumn":48},{"ruleId":"538","severity":1,"message":"638","line":81,"column":6,"nodeType":"540","endLine":81,"endColumn":16,"suggestions":"639"},{"ruleId":"538","severity":1,"message":"640","line":91,"column":6,"nodeType":"540","endLine":91,"endColumn":8,"suggestions":"641"},{"ruleId":"570","severity":1,"message":"571","line":150,"column":30,"nodeType":"563","endLine":150,"endColumn":72},{"ruleId":"570","severity":1,"message":"571","line":201,"column":21,"nodeType":"563","endLine":201,"endColumn":51},{"ruleId":"545","severity":1,"message":"546","line":214,"column":38,"nodeType":"547","messageId":"548","endLine":214,"endColumn":40},{"ruleId":"545","severity":1,"message":"546","line":225,"column":38,"nodeType":"547","messageId":"548","endLine":225,"endColumn":40},{"ruleId":"545","severity":1,"message":"546","line":233,"column":38,"nodeType":"547","messageId":"548","endLine":233,"endColumn":40},{"ruleId":"570","severity":1,"message":"571","line":241,"column":27,"nodeType":"563","endLine":241,"endColumn":48},{"ruleId":"545","severity":1,"message":"581","line":246,"column":34,"nodeType":"547","messageId":"548","endLine":246,"endColumn":36},{"ruleId":"545","severity":1,"message":"546","line":248,"column":39,"nodeType":"547","messageId":"548","endLine":248,"endColumn":41},{"ruleId":"545","severity":1,"message":"546","line":257,"column":39,"nodeType":"547","messageId":"548","endLine":257,"endColumn":41},{"ruleId":"538","severity":1,"message":"642","line":22,"column":6,"nodeType":"540","endLine":22,"endColumn":8,"suggestions":"643"},{"ruleId":"533","severity":1,"message":"644","line":17,"column":10,"nodeType":"535","messageId":"536","endLine":17,"endColumn":18},{"ruleId":"533","severity":1,"message":"645","line":20,"column":9,"nodeType":"535","messageId":"536","endLine":20,"endColumn":18},{"ruleId":"533","severity":1,"message":"646","line":23,"column":9,"nodeType":"535","messageId":"536","endLine":23,"endColumn":18},{"ruleId":"533","severity":1,"message":"647","line":27,"column":10,"nodeType":"535","messageId":"536","endLine":27,"endColumn":18},{"ruleId":"533","severity":1,"message":"648","line":27,"column":20,"nodeType":"535","messageId":"536","endLine":27,"endColumn":31},{"ruleId":"533","severity":1,"message":"649","line":45,"column":9,"nodeType":"535","messageId":"536","endLine":45,"endColumn":13},{"ruleId":"538","severity":1,"message":"642","line":82,"column":6,"nodeType":"540","endLine":82,"endColumn":8,"suggestions":"650"},{"ruleId":"555","severity":1,"message":"556","line":176,"column":33,"nodeType":"557","messageId":"558","endLine":176,"endColumn":35},{"ruleId":"533","severity":1,"message":"651","line":177,"column":15,"nodeType":"535","messageId":"536","endLine":177,"endColumn":26},{"ruleId":"555","severity":1,"message":"556","line":178,"column":26,"nodeType":"557","messageId":"558","endLine":178,"endColumn":28},{"ruleId":"545","severity":1,"message":"581","line":181,"column":25,"nodeType":"547","messageId":"548","endLine":181,"endColumn":27},{"ruleId":"538","severity":1,"message":"652","line":201,"column":6,"nodeType":"540","endLine":201,"endColumn":16,"suggestions":"653"},{"ruleId":"533","severity":1,"message":"654","line":215,"column":11,"nodeType":"535","messageId":"536","endLine":215,"endColumn":15},{"ruleId":"533","severity":1,"message":"655","line":223,"column":11,"nodeType":"535","messageId":"536","endLine":223,"endColumn":19},{"ruleId":"538","severity":1,"message":"642","line":22,"column":6,"nodeType":"540","endLine":22,"endColumn":8,"suggestions":"656"},{"ruleId":"533","severity":1,"message":"585","line":7,"column":7,"nodeType":"535","messageId":"536","endLine":7,"endColumn":14},{"ruleId":"657","severity":1,"message":"658","line":20,"column":33,"nodeType":"552","messageId":"659","endLine":20,"endColumn":35},{"ruleId":"657","severity":1,"message":"658","line":20,"column":81,"nodeType":"552","messageId":"659","endLine":20,"endColumn":83},{"ruleId":"657","severity":1,"message":"660","line":20,"column":81,"nodeType":"552","messageId":"659","endLine":20,"endColumn":83},{"ruleId":"657","severity":1,"message":"660","line":21,"column":40,"nodeType":"552","messageId":"659","endLine":21,"endColumn":42},{"ruleId":"657","severity":1,"message":"660","line":21,"column":74,"nodeType":"552","messageId":"659","endLine":21,"endColumn":76},{"ruleId":"657","severity":1,"message":"660","line":22,"column":42,"nodeType":"552","messageId":"659","endLine":22,"endColumn":44},{"ruleId":"538","severity":1,"message":"661","line":34,"column":6,"nodeType":"540","endLine":34,"endColumn":16,"suggestions":"662"},{"ruleId":"555","severity":1,"message":"556","line":44,"column":22,"nodeType":"557","messageId":"558","endLine":44,"endColumn":24},{"ruleId":"545","severity":1,"message":"546","line":77,"column":35,"nodeType":"547","messageId":"548","endLine":77,"endColumn":37},{"ruleId":"545","severity":1,"message":"581","line":82,"column":35,"nodeType":"547","messageId":"548","endLine":82,"endColumn":37},{"ruleId":"555","severity":1,"message":"556","line":43,"column":42,"nodeType":"557","messageId":"558","endLine":43,"endColumn":44},{"ruleId":"538","severity":1,"message":"663","line":60,"column":6,"nodeType":"540","endLine":60,"endColumn":8,"suggestions":"664"},{"ruleId":"555","severity":1,"message":"556","line":80,"column":42,"nodeType":"557","messageId":"558","endLine":80,"endColumn":44},{"ruleId":"545","severity":1,"message":"581","line":136,"column":20,"nodeType":"547","messageId":"548","endLine":136,"endColumn":22},{"ruleId":"555","severity":1,"message":"556","line":143,"column":22,"nodeType":"557","messageId":"558","endLine":143,"endColumn":24},{"ruleId":"555","severity":1,"message":"556","line":151,"column":54,"nodeType":"557","messageId":"558","endLine":151,"endColumn":56},{"ruleId":"545","severity":1,"message":"546","line":158,"column":24,"nodeType":"547","messageId":"548","endLine":158,"endColumn":26},{"ruleId":"555","severity":1,"message":"556","line":163,"column":33,"nodeType":"557","messageId":"558","endLine":163,"endColumn":35},{"ruleId":"545","severity":1,"message":"546","line":185,"column":30,"nodeType":"547","messageId":"548","endLine":185,"endColumn":32},{"ruleId":"545","severity":1,"message":"546","line":275,"column":33,"nodeType":"547","messageId":"548","endLine":275,"endColumn":35},{"ruleId":"545","severity":1,"message":"546","line":301,"column":33,"nodeType":"547","messageId":"548","endLine":301,"endColumn":35},{"ruleId":"555","severity":1,"message":"556","line":41,"column":42,"nodeType":"557","messageId":"558","endLine":41,"endColumn":44},{"ruleId":"538","severity":1,"message":"665","line":58,"column":6,"nodeType":"540","endLine":58,"endColumn":8,"suggestions":"666"},{"ruleId":"555","severity":1,"message":"556","line":78,"column":42,"nodeType":"557","messageId":"558","endLine":78,"endColumn":44},{"ruleId":"545","severity":1,"message":"581","line":134,"column":20,"nodeType":"547","messageId":"548","endLine":134,"endColumn":22},{"ruleId":"555","severity":1,"message":"556","line":141,"column":22,"nodeType":"557","messageId":"558","endLine":141,"endColumn":24},{"ruleId":"555","severity":1,"message":"556","line":149,"column":54,"nodeType":"557","messageId":"558","endLine":149,"endColumn":56},{"ruleId":"545","severity":1,"message":"546","line":156,"column":24,"nodeType":"547","messageId":"548","endLine":156,"endColumn":26},{"ruleId":"555","severity":1,"message":"556","line":161,"column":33,"nodeType":"557","messageId":"558","endLine":161,"endColumn":35},{"ruleId":"545","severity":1,"message":"546","line":183,"column":30,"nodeType":"547","messageId":"548","endLine":183,"endColumn":32},{"ruleId":"545","severity":1,"message":"546","line":273,"column":33,"nodeType":"547","messageId":"548","endLine":273,"endColumn":35},{"ruleId":"545","severity":1,"message":"546","line":299,"column":33,"nodeType":"547","messageId":"548","endLine":299,"endColumn":35},{"ruleId":"555","severity":1,"message":"556","line":94,"column":26,"nodeType":"557","messageId":"558","endLine":94,"endColumn":28},{"ruleId":"555","severity":1,"message":"556","line":115,"column":28,"nodeType":"557","messageId":"558","endLine":115,"endColumn":30},{"ruleId":"555","severity":1,"message":"556","line":145,"column":28,"nodeType":"557","messageId":"558","endLine":145,"endColumn":30},{"ruleId":"555","severity":1,"message":"589","line":151,"column":39,"nodeType":"557","messageId":"590","endLine":151,"endColumn":41},{"ruleId":"538","severity":1,"message":"667","line":168,"column":6,"nodeType":"540","endLine":168,"endColumn":33,"suggestions":"668"},{"ruleId":"533","severity":1,"message":"669","line":13,"column":13,"nodeType":"535","messageId":"536","endLine":13,"endColumn":19},{"ruleId":"533","severity":1,"message":"644","line":17,"column":10,"nodeType":"535","messageId":"536","endLine":17,"endColumn":18},{"ruleId":"533","severity":1,"message":"596","line":18,"column":8,"nodeType":"535","messageId":"536","endLine":18,"endColumn":13},{"ruleId":"533","severity":1,"message":"647","line":25,"column":10,"nodeType":"535","messageId":"536","endLine":25,"endColumn":18},{"ruleId":"533","severity":1,"message":"648","line":25,"column":20,"nodeType":"535","messageId":"536","endLine":25,"endColumn":31},{"ruleId":"533","severity":1,"message":"649","line":43,"column":9,"nodeType":"535","messageId":"536","endLine":43,"endColumn":13},{"ruleId":"533","severity":1,"message":"670","line":70,"column":9,"nodeType":"535","messageId":"536","endLine":70,"endColumn":19},{"ruleId":"538","severity":1,"message":"642","line":80,"column":6,"nodeType":"540","endLine":80,"endColumn":8,"suggestions":"671"},{"ruleId":"555","severity":1,"message":"556","line":135,"column":33,"nodeType":"557","messageId":"558","endLine":135,"endColumn":35},{"ruleId":"555","severity":1,"message":"556","line":136,"column":26,"nodeType":"557","messageId":"558","endLine":136,"endColumn":28},{"ruleId":"545","severity":1,"message":"581","line":139,"column":25,"nodeType":"547","messageId":"548","endLine":139,"endColumn":27},{"ruleId":"538","severity":1,"message":"672","line":159,"column":6,"nodeType":"540","endLine":159,"endColumn":16,"suggestions":"673"},{"ruleId":"533","severity":1,"message":"655","line":230,"column":11,"nodeType":"535","messageId":"536","endLine":230,"endColumn":19},{"ruleId":"545","severity":1,"message":"581","line":61,"column":23,"nodeType":"547","messageId":"548","endLine":61,"endColumn":25},{"ruleId":"538","severity":1,"message":"674","line":68,"column":6,"nodeType":"540","endLine":68,"endColumn":19,"suggestions":"675"},{"ruleId":"545","severity":1,"message":"581","line":203,"column":20,"nodeType":"547","messageId":"548","endLine":203,"endColumn":22},{"ruleId":"538","severity":1,"message":"676","line":229,"column":6,"nodeType":"540","endLine":229,"endColumn":29,"suggestions":"677"},{"ruleId":"545","severity":1,"message":"546","line":307,"column":15,"nodeType":"547","messageId":"548","endLine":307,"endColumn":17},{"ruleId":"570","severity":1,"message":"571","line":416,"column":23,"nodeType":"563","endLine":416,"endColumn":45},{"ruleId":"538","severity":1,"message":"621","line":57,"column":6,"nodeType":"540","endLine":57,"endColumn":27,"suggestions":"678"},{"ruleId":"570","severity":1,"message":"571","line":223,"column":32,"nodeType":"563","endLine":223,"endColumn":74},{"ruleId":"533","severity":1,"message":"679","line":3,"column":10,"nodeType":"535","messageId":"536","endLine":3,"endColumn":22},{"ruleId":"533","severity":1,"message":"680","line":3,"column":24,"nodeType":"535","messageId":"536","endLine":3,"endColumn":37},{"ruleId":"538","severity":1,"message":"549","line":112,"column":6,"nodeType":"540","endLine":112,"endColumn":8,"suggestions":"681"},{"ruleId":"533","severity":1,"message":"682","line":114,"column":9,"nodeType":"535","messageId":"536","endLine":114,"endColumn":19},{"ruleId":"533","severity":1,"message":"683","line":121,"column":9,"nodeType":"535","messageId":"536","endLine":121,"endColumn":20},{"ruleId":"533","severity":1,"message":"684","line":132,"column":10,"nodeType":"535","messageId":"536","endLine":132,"endColumn":20},{"ruleId":"533","severity":1,"message":"685","line":136,"column":10,"nodeType":"535","messageId":"536","endLine":136,"endColumn":21},{"ruleId":"533","severity":1,"message":"686","line":142,"column":12,"nodeType":"535","messageId":"536","endLine":142,"endColumn":20},{"ruleId":"533","severity":1,"message":"599","line":1,"column":33,"nodeType":"535","messageId":"536","endLine":1,"endColumn":42},{"ruleId":"533","severity":1,"message":"602","line":2,"column":26,"nodeType":"535","messageId":"536","endLine":2,"endColumn":30},{"ruleId":"533","severity":1,"message":"687","line":2,"column":31,"nodeType":"535","messageId":"536","endLine":2,"endColumn":36},{"ruleId":"533","severity":1,"message":"605","line":2,"column":37,"nodeType":"535","messageId":"536","endLine":2,"endColumn":48},{"ruleId":"533","severity":1,"message":"688","line":4,"column":9,"nodeType":"535","messageId":"536","endLine":4,"endColumn":23},{"ruleId":"533","severity":1,"message":"689","line":5,"column":10,"nodeType":"535","messageId":"536","endLine":5,"endColumn":16},{"ruleId":"533","severity":1,"message":"690","line":10,"column":9,"nodeType":"535","messageId":"536","endLine":10,"endColumn":11},{"ruleId":"533","severity":1,"message":"691","line":11,"column":9,"nodeType":"535","messageId":"536","endLine":11,"endColumn":16},{"ruleId":"533","severity":1,"message":"692","line":26,"column":10,"nodeType":"535","messageId":"536","endLine":26,"endColumn":18},{"ruleId":"533","severity":1,"message":"693","line":27,"column":9,"nodeType":"535","messageId":"536","endLine":27,"endColumn":18},{"ruleId":"533","severity":1,"message":"694","line":30,"column":9,"nodeType":"535","messageId":"536","endLine":30,"endColumn":21},{"ruleId":"570","severity":1,"message":"571","line":44,"column":19,"nodeType":"563","endLine":44,"endColumn":41},{"ruleId":"538","severity":1,"message":"695","line":27,"column":6,"nodeType":"540","endLine":27,"endColumn":24,"suggestions":"696"},{"ruleId":"529","replacedBy":"697"},{"ruleId":"531","replacedBy":"698"},{"ruleId":"699","severity":1,"message":"700","line":132,"column":7,"nodeType":"701","messageId":"548","endLine":132,"endColumn":12},{"ruleId":"533","severity":1,"message":"594","line":1,"column":17,"nodeType":"535","messageId":"536","endLine":1,"endColumn":25},{"ruleId":"538","severity":1,"message":"702","line":31,"column":6,"nodeType":"540","endLine":31,"endColumn":8,"suggestions":"703"},{"ruleId":"538","severity":1,"message":"630","line":18,"column":6,"nodeType":"540","endLine":18,"endColumn":8,"suggestions":"704"},{"ruleId":"533","severity":1,"message":"599","line":1,"column":17,"nodeType":"535","messageId":"536","endLine":1,"endColumn":26},{"ruleId":"538","severity":1,"message":"705","line":20,"column":6,"nodeType":"540","endLine":20,"endColumn":18,"suggestions":"706"},{"ruleId":"533","severity":1,"message":"707","line":1,"column":10,"nodeType":"535","messageId":"536","endLine":1,"endColumn":16},"no-native-reassign",["708"],"no-negated-in-lhs",["709"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'userInfo' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'history'. Either include them or remove the dependency array.","ArrayExpression",["710"],"'message' is defined but never used.","'InputPhone' is assigned a value but never used.","'onInputPhone' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'userInfo'. Either include it or remove the dependency array.",["711"],"Assignments to the 'b_soldout' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","LogicalExpression","Assignments to the 'm_soldout' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Assignments to the 'm_soldout2' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'ProdItemCopy'. Either include it or remove the dependency array.",["712"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-script-url","Script URL is a form of eval.","Literal","unexpectedScriptURL","React Hook useEffect has missing dependencies: 'EndDate', 'StartDate', and 'userInfo.uid'. Either include them or remove the dependency array.",["713"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'clearUser' is defined but never used.","'dispatch' is assigned a value but never used.","'name' is assigned a value but never used.","'email' is assigned a value but never used.","'photoUrl' is assigned a value but never used.","'emailVerified' is assigned a value but never used.","'uid' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'currentUser'. Either include it or remove the dependency array.",["714"],"Expected '!==' and instead saw '!='.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'curDate' is assigned a value but never used.","'TodayLunchCheck' is assigned a value but never used.","'setTodayLunchCheck' is assigned a value but never used.","'antIcon' is defined but never used.","Array.prototype.sort() expects a value to be returned at the end of arrow function.","expectedAtEnd","'UserList' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'curWeekArr', 'nextWeekArr', 'prevWeekArr', and 'userInfo.uid'. Either include them or remove the dependency array.",["715"],"'useState' is defined but never used.","'signaturePad' is assigned a value but never used.","'axios' is defined but never used.","React Hook useEffect has missing dependencies: 'OrderList.length', 'Sound', and 'SoundSelect'. Either include them or remove the dependency array.",["716"],"'useEffect' is defined but never used.","Assignments to the 'date' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","'Form' is defined but never used.","'setModifyData' is assigned a value but never used.","'modifyUser' is assigned a value but never used.","'InputNumber' is defined but never used.","'LastOrderTime' is defined but never used.","'SoldoutToggle' is assigned a value but never used.","no-self-assign","'values.sort_num' is assigned to itself.","MemberExpression","selfAssignment","'TimePicker' is defined but never used.","'dayjs' is defined but never used.","'uuid' is defined but never used.","'Ruser' is assigned a value but never used.","'setRuser' is assigned a value but never used.","'res' is defined but never used.","'count' is assigned to itself.","React Hook useEffect has missing dependencies: 'Filter' and 'curDate.full'. Either include them or remove the dependency array.",["717"],"React Hook useEffect has a missing dependency: 'userInfo.uid'. Either include it or remove the dependency array.",["718"],["719"],"'onTempSubmit' is assigned a value but never used.","'Checkbox' is defined but never used.","'Row' is defined but never used.","'ImgUpload' is defined but never used.","'styled' is defined but never used.","'once' is defined but never used.","React Hook useEffect has a missing dependency: 'db'. Either include it or remove the dependency array.",["720"],["721"],"React Hook useEffect has missing dependencies: 'DateEnd', 'DateStart', and 'db'. Either include them or remove the dependency array.",["722"],["723"],["724"],["725"],"React Hook useEffect has missing dependencies: 'props.location.state.uid' and 'userInfo'. Either include them or remove the dependency array.",["726"],"React Hook useEffect has a missing dependency: 'ResultList'. Either include it or remove the dependency array.",["727"],"React Hook useEffect has a missing dependency: 'welDb'. Either include it or remove the dependency array.",["728"],"'constant' is defined but never used.","'Countdown' is assigned a value but never used.","'todayDate' is assigned a value but never used.","'TimeData' is assigned a value but never used.","'setTimeData' is assigned a value but never used.","'copy' is assigned a value but never used.",["729"],"'reservCount' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'SearchDate.full', 'SearchDate.full_', 'getListOff', 'timeTable', 'userInfo.uid', and 'welDb'. Either include them or remove the dependency array.",["730"],"'type' is assigned a value but never used.","'dateTime' is assigned a value but never used.",["731"],"no-mixed-operators","Unexpected mix of '&&' and '||'.","unexpectedMixedOperator","Unexpected mix of '||' and '&&'.","React Hook useEffect has missing dependencies: 'userInfo.auth' and 'userInfo.uid'. Either include them or remove the dependency array.",["732"],"React Hook useEffect has missing dependencies: 'props.location.state.uid' and 'userInfo.uid'. Either include them or remove the dependency array.",["733"],"React Hook useEffect has a missing dependency: 'props.location.state.uid'. Either include it or remove the dependency array.",["734"],"React Hook useEffect has missing dependencies: 'LastDay' and 'SelectDay'. Either include them or remove the dependency array.",["735"],"'imIcon' is defined but never used.","'getListOff' is assigned a value but never used.",["736"],"React Hook useEffect has missing dependencies: 'SearchDate.full', 'timeTable', 'userInfo.uid', and 'welDb'. Either include them or remove the dependency array.",["737"],"React Hook useEffect has missing dependencies: 'ProdItemCopy' and 'searchInput'. Either include them or remove the dependency array.",["738"],"React Hook useEffect has missing dependencies: 'db' and 'userInfo.uid'. Either include them or remove the dependency array.",["739"],["740"],"'PlusOutlined' is defined but never used.","'MinusOutlined' is defined but never used.",["741"],"'plusAmount' is assigned a value but never used.","'minusAmount' is assigned a value but never used.","'radioValue' is assigned a value but never used.","'radioValue2' is assigned a value but never used.","'onChange' is defined but never used.","'Input' is defined but never used.","'OderModalPopup' is defined but never used.","'values' is defined but never used.","'db' is assigned a value but never used.","'typeBox' is assigned a value but never used.","'VisitPop' is assigned a value but never used.","'onVistPop' is assigned a value but never used.","'onVistPopOff' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'onTimeOut'. Either include it or remove the dependency array. If 'onTimeOut' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["742"],["708"],["709"],"no-dupe-keys","Duplicate key 'limit'.","ObjectExpression","React Hook useEffect has a missing dependency: 'onSigpad'. Either include it or remove the dependency array. If 'onSigpad' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["743"],["744"],"React Hook useEffect has a missing dependency: 'userPart'. Either include it or remove the dependency array.",["745"],"'Button' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"746","fix":"747"},{"desc":"748","fix":"749"},{"desc":"750","fix":"751"},{"desc":"752","fix":"753"},{"desc":"754","fix":"755"},{"desc":"756","fix":"757"},{"desc":"758","fix":"759"},{"desc":"760","fix":"761"},{"desc":"762","fix":"763"},{"desc":"764","fix":"765"},{"desc":"766","fix":"767"},{"desc":"768","fix":"769"},{"desc":"770","fix":"771"},{"desc":"772","fix":"773"},{"desc":"774","fix":"775"},{"desc":"776","fix":"777"},{"desc":"778","fix":"779"},{"desc":"780","fix":"781"},{"desc":"782","fix":"783"},{"desc":"782","fix":"784"},{"desc":"785","fix":"786"},{"desc":"782","fix":"787"},{"desc":"788","fix":"789"},{"desc":"790","fix":"791"},{"desc":"792","fix":"793"},{"desc":"794","fix":"795"},{"desc":"782","fix":"796"},{"desc":"797","fix":"798"},{"desc":"799","fix":"800"},{"desc":"801","fix":"802"},{"desc":"762","fix":"803"},{"desc":"804","fix":"805"},{"desc":"806","fix":"807"},{"desc":"808","fix":"809"},{"desc":"810","fix":"811"},{"desc":"812","fix":"813"},"Update the dependencies array to be: [dispatch, history]",{"range":"814","text":"815"},"Update the dependencies array to be: [ModifyState, userInfo]",{"range":"816","text":"817"},"Update the dependencies array to be: [ProdItemCopy, searchInput]",{"range":"818","text":"819"},"Update the dependencies array to be: [EndDate, ReRender, StartDate, userInfo.uid]",{"range":"820","text":"821"},"Update the dependencies array to be: [TimeChange, currentUser]",{"range":"822","text":"823"},"Update the dependencies array to be: [curWeekArr, nextWeekArr, prevWeekArr, userInfo.uid]",{"range":"824","text":"825"},"Update the dependencies array to be: [OrderCount, OrderList.length, Sound, SoundSelect]",{"range":"826","text":"827"},"Update the dependencies array to be: [SearchDate, Render, curDate.full, Filter]",{"range":"828","text":"829"},"Update the dependencies array to be: [Rerender, SearchDate, userInfo.uid]",{"range":"830","text":"831"},"Update the dependencies array to be: [userInfo.uid]",{"range":"832","text":"833"},"Update the dependencies array to be: [Render, db]",{"range":"834","text":"835"},"Update the dependencies array to be: [ModifyUid, db]",{"range":"836","text":"837"},"Update the dependencies array to be: [DateEnd, DateStart, ThisLogUid, db]",{"range":"838","text":"839"},"Update the dependencies array to be: [EaDate, db]",{"range":"840","text":"841"},"Update the dependencies array to be: [SearchMonth, Render, db]",{"range":"842","text":"843"},"Update the dependencies array to be: [DateEnd, DateStart, Render, db]",{"range":"844","text":"845"},"Update the dependencies array to be: [Rerender, props.location.state.uid, userInfo]",{"range":"846","text":"847"},"Update the dependencies array to be: [ResultList]",{"range":"848","text":"849"},"Update the dependencies array to be: [welDb]",{"range":"850","text":"851"},{"range":"852","text":"851"},"Update the dependencies array to be: [Rerender, SearchDate.full, SearchDate.full_, getListOff, timeTable, userInfo.uid, welDb]",{"range":"853","text":"854"},{"range":"855","text":"851"},"Update the dependencies array to be: [ReRender, userInfo.auth, userInfo.uid]",{"range":"856","text":"857"},"Update the dependencies array to be: [props.location.state.uid, userInfo.uid]",{"range":"858","text":"859"},"Update the dependencies array to be: [props.location.state.uid]",{"range":"860","text":"861"},"Update the dependencies array to be: [LastDay, SearchDate, SelectDay, lastOrderTime]",{"range":"862","text":"863"},{"range":"864","text":"851"},"Update the dependencies array to be: [Rerender, SearchDate.full, timeTable, userInfo.uid, welDb]",{"range":"865","text":"866"},"Update the dependencies array to be: [ProdItemCopy, SearchAgain, searchInput]",{"range":"867","text":"868"},"Update the dependencies array to be: [SortCate, SearchMonth, db, userInfo.uid]",{"range":"869","text":"870"},{"range":"871","text":"831"},"Update the dependencies array to be: [userInfo]",{"range":"872","text":"873"},"Update the dependencies array to be: [minutes, onTimeOut, seconds]",{"range":"874","text":"875"},"Update the dependencies array to be: [onSigpad]",{"range":"876","text":"877"},"Update the dependencies array to be: [db]",{"range":"878","text":"879"},"Update the dependencies array to be: [partSelect, userPart]",{"range":"880","text":"881"},[3604,3606],"[dispatch, history]",[4274,4287],"[ModifyState, userInfo]",[8557,8570],"[ProdItemCopy, searchInput]",[2348,2358],"[EndDate, ReRender, StartDate, userInfo.uid]",[4233,4245],"[TimeChange, currentUser]",[4208,4210],"[curWeekArr, nextWeekArr, prevWeekArr, userInfo.uid]",[5620,5632],"[OrderCount, OrderList.length, Sound, SoundSelect]",[4938,4958],"[SearchDate, Render, curDate.full, Filter]",[6407,6428],"[Rerender, SearchDate, userInfo.uid]",[1663,1665],"[userInfo.uid]",[4022,4030],"[Render, db]",[4318,4329],"[ModifyUid, db]",[5543,5555],"[DateEnd, DateStart, ThisLogUid, db]",[6301,6309],"[EaDate, db]",[7168,7189],"[SearchMonth, Render, db]",[8911,8919],"[DateEnd, DateStart, Render, db]",[2400,2410],"[Rerender, props.location.state.uid, userInfo]",[2561,2563],"[ResultList]",[702,704],"[welDb]",[2203,2205],[5879,5889],"[Rerender, SearchDate.full, SearchDate.full_, getListOff, timeTable, userInfo.uid, welDb]",[705,707],[1136,1146],"[ReRender, userInfo.auth, userInfo.uid]",[1969,1971],"[props.location.state.uid, userInfo.uid]",[1838,1840],"[props.location.state.uid]",[5365,5392],"[LastDay, SearchDate, SelectDay, lastOrderTime]",[2108,2110],[4616,4626],"[Rerender, SearchDate.full, timeTable, userInfo.uid, welDb]",[1951,1964],"[ProdItemCopy, SearchAgain, searchInput]",[5792,5815],"[SortCate, SearchMonth, db, userInfo.uid]",[1838,1859],[2896,2898],"[userInfo]",[814,832],"[minutes, onTimeOut, seconds]",[863,865],"[onSigpad]",[558,560],"[db]",[552,564],"[partSelect, userPart]"]